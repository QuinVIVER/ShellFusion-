nl_12043 ===> Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths ===> nl2bash
nl2bash_12046 ===> Change all cron jobs running "anm.sh" to be run every 10 minutes instead of 5 minutes. ===> 0.4548678869473179
nl2bash_13746 ===> Calculate the values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and "x.txt" ===> 0.4513007096945999
nl2bash_13863 ===> Count used space on device "/dev/sda" in megabytes ===> 0.44634600022577897
nl2bash_12505 ===> Recursively changes group ownership of everything within a current folder and having group 'X_GNAME' to 'Y_GNAME'. ===> 0.44475877255966034
nl2bash_2758 ===> Find all directories starting from the current directory ===> 0.431872400024651
nl2bash_12044 ===> Archive any files changed in the last day from "remote_host" to "local_dir" ===> 0.430419884998015
nl2bash_7912 ===> find all the zip files in the current folder and create a tar ball of these zip files ===> 0.41964136249938355
nl2bash_8125 ===> find the type & description of all the regular/normal files in the home folder ===> 0.41951832091350355
nl2bash_13942 ===> Counts the number of lines in each file in a git repository. ===> 0.41823085203253635
nl2bash_8107 ===> find the file with the name "esxcfg-firewall" in the current folder ===> 0.4081206906688307
nl2bash_8233 ===> search for a word in all the files in the current directory and display the list of matched files. ===> 0.40594123917716335
nl2bash_8085 ===> find the count of all the charcters of the list of regular files present in the current folder ===> 0.4018767894599514
nl2bash_12045 ===> Change all "JPG" filename suffixes in current directory to "jpeg". ===> 0.401705037496283
nl2bash_8108 ===> find the file with the name "file" in the entire file system ===> 0.4010487460263069
nl2bash_12084 ===> Change group ownership to `foo' for files with GID=2000 ===> 0.39936720705547346
nl2bash_12156 ===> Change permissions to 644 recursively for PHP files. ===> 0.38906311645910324
nl2bash_8134 ===> locate large files (> 100 MB) in /home/ for 'cleaning' ===> 0.3890247078787006
nl2bash_12151 ===> Change permissions to 644 for all regular files under the /path/to/dir/ tree ===> 0.3887550785573204
nl2bash_13713 ===> Calculate the md5 sum of hex byte 61 ===> 0.3872433639109723
nl2bash_8105 ===> find the file with inode $inum under the current directory and delete it ===> 0.3851232048813709
nl2bash_2702 ===> Find all directories in the /data1/realtime directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago ===> 0.381872400024651
nl2bash_2727 ===> Find all directories named "D" in the current directory tree ===> 0.381872400024651
nl2bash_8087 ===> find the count of text files that are present in the current working directory. ===> 0.37934800730550333
nl2bash_259 ===> get the job number from the stored PID ===> 0.3770073478003233
nl2bash_266 ===> take all files in the directory " /path/to/files" and provide them as input to the script file truncate.sh ===> 0.37199970592419446
nl2bash_2533 ===> Find all .txt files under the current directory and below suppressing error messages ===> 0.3678753923021083
nl2bash_2744 ===> Find all directories named CVS, and deletes them and their contents. ===> 0.36524628079891175
nl2bash_227 ===> Use metaflac to extract the artist field from myfile.flac, and set the variable ARTIST to the value of that field. ===> 0.3644037595708708
nl2bash_226 ===> Unzip and extract "userAgent=[^=]*'" from "input.gz" ===> 0.3644037595708708
nl2bash_8100 ===> find the file "httpd.log" in the entire file system ===> 0.361670822133048
nl2bash_8098 ===> find the file "foo.txt" in the current folder and assign the output to a variable ===> 0.36149243537141595
nl2bash_7896 ===> find all the wav files in the current folder and do not search in the sub directories ===> 0.3561631451476117
nl2bash_8324 ===> search for all the files excluding directories ending with old or sccs or core or orig in the project folder and append the output to the file exclude ===> 0.35300947809992334
nl2bash_11630 ===> Remove trailing tabs in .java files from the current directory tree ===> 0.3518892542325095
nl2bash_8103 ===> find the file "myfile.txt" in the folder /home/user/myusername/ ===> 0.34814746012353176
nl2bash_12043 ===> Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths ===> 0.34525015134544973
nl2bash_7987 ===> find files in the current directory having name "filename" ===> 0.3423070155740042
nl2bash_8115 ===> find the oldest normal file in the current directory and display with its timestamp ===> 0.3408533219981551
nl2bash_8093 ===> find the file "dateiname" in the entire file system ( case insensitive search) ===> 0.34009201393363464
nl2bash_8123 ===> find the top 25 files in the current directory and its subdirectories ===> 0.3393842360603892
nl2bash_8470 ===> search for files cart1 or cart2 or cart3 or ...cart6 in the folder junk which is in home folder and display all its details. Discard all the errors and do not display them. ===> 0.33779462391675474
nl2bash_8104 ===> find the file arrow.jpg in the entire file system ===> 0.33453458054840934
nl2bash_8069 ===> find regular files under the current directory, whose name ends in .mbox, piping the output to the GNU Parallel command that will rename each file to not have a file extension. ===> 0.3342612165563006
nl2bash_2759 ===> Find all directories that do not contain "main.cpp" ===> 0.331872400024651
nl2bash_4413 ===> Find all regular files with '.what_to_find' extension in the entire filesystem and move them to directory '/new_directory' ===> 0.3274972148361919
nl2bash_13466 ===> Saves hostname that matches ${ip_address} in 'host' variable, without trailing dot. ===> 0.32693967350217423
nl2bash_2657 ===> Find all TXT files that belong to user root ===> 0.3264896878141524
nl2bash_8096 ===> find the file "fluidpoint" in the file system and discard all the errors ===> 0.32620226365760596
nl2bash_3591 ===> Find all files under current directory, calculate their md5sum and print each of the hash and file name to filename-hash.md5 files ===> 0.3254240862615524
nl2bash_8231 ===> search for a word in all the files in the current directory and display the file paths relative to the current directory ===> 0.32254255069156645
