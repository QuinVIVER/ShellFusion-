nl_11360 ===> Remove all *.swp files under current directory ensuring white space safety ===> nl2bash
nl2bash_7126 ===> find all regular/normal files in the folder "pathfolder" and display the count of files, save all the errors to err.txt file ===> 0.4101799357166592
nl2bash_2291 ===> Find all *.rb (regular) files under current directory and count their line numbers ensuring white space safety on file name/path. ===> 0.4083164786959651
nl2bash_6658 ===> Search the ~/Books directory recursively for files named "Waldo" ===> 0.4010088496888694
nl2bash_6659 ===> Search the ~/Books directory recursively for regular files named "Waldo" ===> 0.4010088496888694
nl2bash_7125 ===> find all regular/normal files in the folder "myfiles" which have read and write permission to the other users ===> 0.4008537710152825
nl2bash_2290 ===> Find all *.rb (regular) files under current directory and count their line numbers ensuring white space safety on file name/path. ===> 0.39919103286569035
au_173801 ===> Use swap partition for hibernation ===> 0.39613345634490693
nl2bash_2292 ===> Find all *.rb (regular) files under current directory and print them on stdout putting the file name/path in-between two string literals 'Hello,' and '!' ===> 0.3945013945756626
nl2bash_2726 ===> Find all directories named "D" in the "A" directory tree ===> 0.3903378901635075
nl2bash_3684 ===> Find all files, folders, symlinks, etc in the current directory recursively ===> 0.38675137320875963
nl2bash_2289 ===> Find all *.rb (regular) files under current directory and count their line numbers ===> 0.37574538162403237
nl2bash_6636 ===> Search the src/ directory recursively for .c and .h files ===> 0.3721510072595081
nl2bash_7127 ===> find all regular/normal files in the folder "pathfolder" and display the count of files, save all the errors to err.txt file ===> 0.3709642557484366
nl2bash_6626 ===> Search the regular files of the current directory tree for string "foo" ===> 0.36419375985317776
nl2bash_2160 ===> Find all *.html files under current directory and for each file replace the first occurrence of STRING and previous lines with the content of common_header file ===> 0.3641275591913671
nl2bash_180 ===> Receive input and print it to terminal preceeding with line number ===> 0.36319795600504723
nl2bash_5612 ===> Look for files whose names begin with letters a-j ===> 0.3617817750860657
nl2bash_9615 ===> Print only printable characters from "/dev/urandom" ===> 0.3613443564876413
nl2bash_11360 ===> Remove all *.swp files under current directory ensuring white space safety ===> 0.3589001298017711
nl2bash_11361 ===> Remove all *.swp files/directories under current directory ===> 0.3589001298017711
nl2bash_11294 ===> Recursively removes all empty folders under current path, printing info message on each operation, and suppressing error messages if folder is not empty. ===> 0.3583060897230057
nl2bash_7504 ===> find all the files in the entire filesystem which belong to the group root and display the ten files. ===> 0.3563164143588432
nl2bash_13597 ===> Merge already sorted files "*.txt" and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix "output" ===> 0.3531619901570561
nl2bash_3171 ===> Find all files in the current directory tree ignoring the ".git" directory ===> 0.35315929376663424
nl2bash_3172 ===> Find all files in the current directory tree named 'FILES.EXT' ===> 0.35315929376663424
nl2bash_3226 ===> Find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file/directory paths ===> 0.3460056466187026
nl2bash_3227 ===> Find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file/directory paths ===> 0.3460056466187026
nl2bash_10665 ===> Copy the entire "/lib" and "/usr" directory including symlinks from "pi@192.168.1.PI" to "$HOME/raspberrypi/rootfs" and delete files after the transfer ===> 0.344314776280526
nl2bash_185 ===> Represent the UTC date given in time string "1970.01.01-$string1" as number of seconds since the epoch and save it in 't1' variable ===> 0.3439363105233432
nl2bash_4133 ===> Find all first occurrences of directories named '.texturedata' under '/path/to/look/in' directory tree ===> 0.34273269818675545
nl2bash_8934 ===> Set up SSH connection forwarding in the background with no terminal or command execution from localhost port 8888 to "proxyhost" port 8888 and a reverse connection from "officefirewall" port 22222 to "localhost" port 22 ===> 0.34180825523702874
nl2bash_179 ===> Receive input and print it to terminal preceeding with line number ===> 0.33819795600504726
nl2bash_11134 ===> Delete all non digits from index "$i" in bash array "depsAlastmodified" and print the hex dump as characters ===> 0.3373887981716764
nl2bash_9616 ===> Print only second from the end field from slash-separated string in file 'datafile' ===> 0.3363443564876413
nl2bash_8224 ===> search for a word in all files in a directory ===> 0.33268332735546313
nl2bash_133 ===> Gets IP address of 'eth0' network interface. ===> 0.33027209226032506
nl2bash_182 ===> Receive pattern to search for on the standard input and print only matching part of lines from file 'f.html' ===> 0.3277307345892597
nl2bash_7124 ===> find all regular/normal files in the folder "myfiles" which have read and write permission to the other users ===> 0.32760628203784714
nl2bash_8935 ===> Set up a local SSH tunnel from port 80 to port 3000 ===> 0.3218082552370287
nl2bash_181 ===> Receive pattern to search for on the standard input and print only matching part of lines from file 'f.html' ===> 0.3077307345892597
nl2bash_4333 ===> Find all regular files under $DIRECTORY_TO_PROCESS matching the case insensitive regex ".*\.$FILES_TO_PROCES" where $FILES_TO_PROCES is a variable and not matching the name pattern '$find_excludes' where $find_excludes is another variable, then print the files with null delimiter instead of newline ===> 0.2678972441136443
nl2bash_5149 ===> Find files/directories with exactly read,write and execute permission for all (owner, group and others) under /path ===> 0.2678288627599671
nl2bash_5611 ===> Look for files that have SUID or SGID set ===> 0.26514096877641147
nl2bash_4523 ===> Find all the files that are not named "MyCProgram.c" in the current directory only and without regards to case. ===> 0.2647490425923159
nl2bash_5654 ===> Recursively find the latest modified file in the current directory and print the modification time and filename ===> 0.24978132677263756
