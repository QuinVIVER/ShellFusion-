{
  "Query": "Argument string to integer in bash",
  "Answers": [
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Enable interpretation of backslash escapes (special characters)",
      "Most Similar TLDR Script": "echo -e \"{{Column 1\\tColumn 2}}\"",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_468429: Bash compare string and integer together as multi-conditions",
        "ul_478831: determine if output is string or integer",
        "so_43459844: Why Can I add a String and a Int in Bash"
      ],
      "Top-3 Scripts": [
        "ul_468429: if true && if true; then false; fi; then echo foo; else echo bar; fi\n\nif (true && (if true; then false; fi)); then echo foo; else echo bar; fi",
        "ul_478831: if ! [[ $( xargs <<< \"$count\" ) =~ ^[0-9]+$ ]]\nthen\n    echo \"string\"\nelse\n    echo $count\nfi\n\nif ! [[ \"${count// /}\" =~ ^[0-9]+$ ]]\nthen\n    echo \"string\"\nelse\n    echo $count\nfi",
        "so_43459844: a=1\nb=2\ndeclare -i var\nvar=a+b+3\necho $var # Prints 6"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bash",
      "MP Summary": "GNU Bourne-Again SHell",
      "Most Similar TLDR Task": "Execute a command",
      "Most Similar TLDR Script": "bash -c \"{{command}}\"",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_27979144: Shell script integer input",
        "so_48612001: `echo` (shell bash) sending integer values and not only chars and strings. Is it possible?",
        "so_39213690: How should I treat return value of command or function? As string or integer?"
      ],
      "Top-3 Scripts": [
        "so_27979144: ",
        "so_48612001: ",
        "so_39213690: bash some_function\nreturn_value=$?\nif [ $return_value -eq 1 ]; then\n  exit 1\nfi"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "xargs",
      "MP Summary": "build and execute command lines from standard input",
      "Most Similar TLDR Task": "Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as `_`) with the input line",
      "Most Similar TLDR Script": "{{arguments_source}} | xargs -I _ {{command}} _ {{optional_extra_arguments}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_478831: determine if output is string or integer",
        "ul_193724: Shell expansion for arguments?",
        "so_57352023: execution with argument"
      ],
      "Top-3 Scripts": [
        "ul_478831: if ! [[ $( xargs <<< \"$count\" ) =~ ^[0-9]+$ ]]\nthen\n    echo \"string\"\nelse\n    echo $count\nfi",
        "ul_193724: echo install update doctor | xargs -n1 brew",
        "so_57352023: xargs -n 1 -P 500 -I % SCRIPT_PATH % \"arguments\" < file.txt # % as input line\nxargs -n 1 -P 500 -I {} SCRIPT_PATH {} \"arguments\" < file.txt # {} as input line\n\nparallel -n 1 -P 500 -I {} SCRIPT_PATH {} \"arguments\" < file.txt # just replace xargs with parallel\nparallel -P 500 SCRIPT_PATH {} \"arguments\" < file.txt # you can omit -n 1 -I arg"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the specified exit code",
      "Most Similar TLDR Script": "exit {{exit_code}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_27979144: Shell script integer input",
        "so_39213690: How should I treat return value of command or function? As string or integer?",
        "so_32826395: Bash Script with Parsing Argument in Linux"
      ],
      "Top-3 Scripts": [
        "so_27979144: echo -n \"ENTER value: \"\nread xyzzy\nif [[ ! $xyzzy =~ ^[0-9]+$ ]] ; then\n    echo \"No good\"\n    exit\nfi\n(( xyzzy = xyzzy + 1 ))\necho \"Adding one gives\" $xyzzy",
        "so_39213690: bash some_function\nreturn_value=$?\nif [ $return_value -eq 1 ]; then\n  exit 1\nfi\n\nif ! some_function; then\n  exit 1\nfi",
        "so_32826395: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "read",
      "MP Summary": "read a line from standard input",
      "Most Similar TLDR Task": "Use a specific character as a delimiter instead of a new line",
      "Most Similar TLDR Script": "read -d {{new_delimiter}} {{variable}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65195213: conversion of string to integer in unix",
        "so_27979144: Shell script integer input",
        "so_67168041: Check if it is an integer or not"
      ],
      "Top-3 Scripts": [
        "so_65195213: while read -r pid owner m cmd; do\n   if [[ $pid =~ ^[0-9]+$ && $cmd != \"ps -o\"* ]]; then\n      mem=\"$(pmap $pid | awk 'END {print $NF+0}')\"\n      ((mem > 0)) && printf \"%-10s%-15s%-15s%s\\n\" \"$pid\" \"$owner\" \"$mem\" \"$cmd\"\n   fi\ndone < <(ps -o  pid,user,%mem,command ax)",
        "so_27979144: echo -n \"ENTER value: \"\nread xyzzy\nif [[ ! $xyzzy =~ ^[0-9]+$ ]] ; then\n    echo \"No good\"\n    exit\nfi\n(( xyzzy = xyzzy + 1 ))\necho \"Adding one gives\" $xyzzy",
        "so_67168041: #!/bin/bash\nread -p \"Number: \" number\n\nwhile [[ ! \"$number\" =~ ^[0-9]+$ ]];\ndo\n    read -p \"Reenter the number: \" number\ndone"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "printf",
      "MP Summary": "format and print data",
      "Most Similar TLDR Task": "Print a text message composed with environment variables",
      "Most Similar TLDR Script": "printf \"{{var1: %s\\tvar2: %s\\n}}\" \"{{$VAR1}}\" \"{{$VAR2}}\"",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65195213: conversion of string to integer in unix",
        "so_48612001: `echo` (shell bash) sending integer values and not only chars and strings. Is it possible?",
        "so_32826395: Bash Script with Parsing Argument in Linux"
      ],
      "Top-3 Scripts": [
        "so_65195213: while read -r pid owner m cmd; do\n   if [[ $pid =~ ^[0-9]+$ && $cmd != \"ps -o\"* ]]; then\n      mem=\"$(pmap $pid | awk 'END {print $NF+0}')\"\n      ((mem > 0)) && printf \"%-10s%-15s%-15s%s\\n\" \"$pid\" \"$owner\" \"$mem\" \"$cmd\"\n   fi\ndone < <(ps -o  pid,user,%mem,command ax)",
        "so_48612001: printf '\\x01' > /dev/LED\n\nprintf '\\001' > /dev/LED",
        "so_32826395: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "test",
      "MP Summary": "check file types and compare values",
      "Most Similar TLDR Task": "Test if given variable is equal to given string",
      "Most Similar TLDR Script": "test $MY_VAR == '/bin/zsh'",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_11516611: How to judge a variable's type as string or integer",
        "so_30708884: Bash in if check integer",
        "so_38442775: Quote argument strings Shell"
      ],
      "Top-3 Scripts": [
        "so_11516611: ",
        "so_30708884: test \"$a\" -ne 0\n\ntest \"$a\" != \"$b\"",
        "so_38442775: this is a test"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Most Similar TLDR Task": "Invert match for excluding specific strings",
      "Most Similar TLDR Script": "grep -v {{search_pattern}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_27979144: Shell script integer input",
        "so_16197179: Too Many Arguments If Statement Bash",
        "so_22899346: Too many arguments in find"
      ],
      "Top-3 Scripts": [
        "so_27979144: ",
        "so_16197179: grep -c\n\n$ grep -c \"OutOfMemory\" /my/path/to/domains/*/*/subdomains/*/logs/*.*\n/my/path/to/domains/a/b/subdomains/c/logs/my.log:1\n/my/path/to/domains/a/b/subdomains/c/logs/another.log:2\n\nif grep -q \"OutOfMemory\" /my/path/to/domains/*/*/subdomains/*/logs/*.*\nthen\n...",
        "so_22899346: #!/bin/bash\n\nread DIR\nread SEARCH\n\n[[ $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) ]] && echo \"Find\"\n# or\n[[ -n $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) ]] && echo \"Find\"\n# or\n[[ $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) != \"\" ]] && echo \"Find\"\n\nif [[ $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) ]]; then\n    echo \"Find\"\nfi"
      ],
      "Explanations about Options": {
        "-q": "Quiet; do not write anything to standard output. Exit immediately with zero status\n if any match is found, even if an error was detected. Also see the -s or\n --no-messages option."
      }
    },
    {
      "Command": "export",
      "MP Summary": "set the export attribute for variables",
      "Most Similar TLDR Task": "Append something to the PATH variable",
      "Most Similar TLDR Script": "export PATH=$PATH:{{path/to/append}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_336905: Conditional arguments",
        "so_60601900: Parse bash argument inside flag"
      ],
      "Top-3 Scripts": [
        "ul_336905: ",
        "so_60601900: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sh",
      "MP Summary": "MirBSD Korn shell",
      "Most Similar TLDR Task": "Execute a command",
      "Most Similar TLDR Script": "sh -c {{command}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_38442775: Quote argument strings Shell"
      ],
      "Top-3 Scripts": [
        "so_38442775: sh ./test.sh 'this is a test'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "wc",
      "MP Summary": "print newline, word, and byte counts for each file",
      "Most Similar TLDR Task": "Use standard input to count lines, words and characters (bytes) in that order",
      "Most Similar TLDR Script": "{{find .}} | wc",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_32826395: Bash Script with Parsing Argument in Linux"
      ],
      "Top-3 Scripts": [
        "so_32826395: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "yes",
      "MP Summary": "output a string repeatedly until killed",
      "Most Similar TLDR Task": "Repeatedly output \"message\"",
      "Most Similar TLDR Script": "yes {{message}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_396895: String comparison with integer in [[ test"
      ],
      "Top-3 Scripts": [
        "ul_396895: $ [ \"2 + 2\" -eq 4 ] && echo yes\nbash: [: 2 + 2: integer expression expected\n$ [[ \"2 + 2\" -eq 4 ]] && echo yes\nyes\n\n$ x=\"\"; echo $((0 + x))\n0\n$ [[ \"\" -eq 0 ]] && echo yes\nyes\n\nx='a[$(rm -i *)]'\n[[ x -eq 0 ]] && echo yes\n\n$ x='a[$(rm -i *)]'\n$ [ \"$x\" -eq 0 ] && echo yes\nbash: [: a[$(rm -i *)]: integer expression expected"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bc",
      "MP Summary": "An arbitrary precision calculator language",
      "Most Similar TLDR Task": "Calculate the result of an expression",
      "Most Similar TLDR Script": "bc <<< \"(1 + 2) * 2 ^ 2\"",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_34769071: Comparing integers and decimals in bash",
        "so_30708884: Bash in if check integer"
      ],
      "Top-3 Scripts": [
        "so_34769071: if bc <<< \"${startrange[inc]} < $actual\"; then \u2026",
        "so_30708884: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "unset",
      "MP Summary": "unset values and attributes of variables and functions",
      "Most Similar TLDR Task": "Remove the variable `foo`, or if the variable doesn't exist, remove the function `foo`",
      "Most Similar TLDR Script": "unset {{foo}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_60601900: Parse bash argument inside flag"
      ],
      "Top-3 Scripts": [
        "so_60601900: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Most Similar TLDR Task": "Print the last column of each line in a file, using a comma (instead of space) as a field separator",
      "Most Similar TLDR Script": "awk -F ',' '{print $NF}' {{filename}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65195213: conversion of string to integer in unix"
      ],
      "Top-3 Scripts": [
        "so_65195213: while read -r pid owner m cmd; do\n   if [[ $pid =~ ^[0-9]+$ && $cmd != \"ps -o\"* ]]; then\n      mem=\"$(pmap $pid | awk 'END {print $NF+0}')\"\n      ((mem > 0)) && printf \"%-10s%-15s%-15s%s\\n\" \"$pid\" \"$owner\" \"$mem\" \"$cmd\"\n   fi\ndone < <(ps -o  pid,user,%mem,command ax)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Replace all occurrences of a string in a file, overwriting the file (i.e. in-place)",
      "Most Similar TLDR Script": "sed -i 's/{{find}}/{{replace}}/g' {{filename}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_28705539: how can i print a string that contains integers and commas only in unix?"
      ],
      "Top-3 Scripts": [
        "so_28705539: sed 's/[^0-9,]*//g' file"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort a file preserving only unique lines",
      "Most Similar TLDR Script": "sort -u {{path/to/file}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_36464381: Sort by string key and then by integer (bash)"
      ],
      "Top-3 Scripts": [
        "so_36464381: $ sort -k1,1 -k2n file"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "fold",
      "MP Summary": "wrap each input line to fit in specified width",
      "Most Similar TLDR Task": "Wrap each line to width \"5\" and break the line at spaces (puts each space separated word in a new line, words with length > 5 are wrapped)",
      "Most Similar TLDR Script": "fold -w5 -s {{file}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_20068767: bash: integer to string, split and join with delimeter"
      ],
      "Top-3 Scripts": [
        "so_20068767: $ i=123\n$ echo $i | fold -w1 | paste -sd.\n1.2.3\n$ i=1234567890\n$ echo $i | fold -w1 | paste -sd.\n1.2.3.4.5.6.7.8.9.0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Find files by matching multiple patterns",
      "Most Similar TLDR Script": "find {{root_path}} -name '{{*pattern_1*}}' -or -name '{{*pattern_2*}}'",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_22899346: Too many arguments in find",
        "so_8551200: arguments in bash"
      ],
      "Top-3 Scripts": [
        "so_22899346: #!/bin/bash\n\nread DIR\nread SEARCH\n\n[[ $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) ]] && echo \"Find\"\n# or\n[[ -n $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) ]] && echo \"Find\"\n# or\n[[ $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) != \"\" ]] && echo \"Find\"\n\nif [[ $(find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;) ]]; then\n    echo \"Find\"\nfi",
        "so_8551200: #!/bin/bash\n\nfrom=/home/elg19/lone/doc\nif [[ $1 = -d ]]; then\n    to=$2\nelse\n    to=/home/elg19/documents\nfi\n\nfind \"$from\" -type f \\( -name '*.pdf' -o -name '*.txt' -o -name '*.doc' \\) -exec bash -c 'dest=$1; shift; mv \"$@\" \"$dest\"' _ \"$to\" {} +"
      ],
      "Explanations about Options": {
        "-name": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils.",
        "-type": "File is of type c:"
      }
    },
    {
      "Command": "cat",
      "MP Summary": "concatenate files and print on the standard output",
      "Most Similar TLDR Task": "Concatenate several files into the target file",
      "Most Similar TLDR Script": "cat {{file1}} {{file2}} > {{target_file}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_58398558: Separate \"Source\" arguments and \"Parent Script\" arguments in bash"
      ],
      "Top-3 Scripts": [
        "so_58398558: cat script2.sh\nsource script1.sh \"$*\" arg1\necho \"script2 got $# args: $@\"\n\nbash script2.sh 1 2 cat\nscript1 got 2 args: 1 2 cat arg1\nscript2 got 3 args: 1 2 cat"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "paste",
      "MP Summary": "merge lines of files",
      "Most Similar TLDR Task": "Merge two files, with lines added alternatively",
      "Most Similar TLDR Script": "paste -d '\\n' {{file1}} {{file2}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_20068767: bash: integer to string, split and join with delimeter"
      ],
      "Top-3 Scripts": [
        "so_20068767: $ i=123\n$ echo $i | fold -w1 | paste -sd.\n1.2.3\n$ i=1234567890\n$ echo $i | fold -w1 | paste -sd.\n1.2.3.4.5.6.7.8.9.0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "exec",
      "MP Summary": "execute commands and open, close, or copy file descriptors",
      "Most Similar TLDR Task": "Replace with the specified command using the current environment variables",
      "Most Similar TLDR Script": "exec {{command -with -flags}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_10004606: Bash script with multiple string arguments"
      ],
      "Top-3 Scripts": [
        "so_10004606: exec(command,null,null)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "true",
      "MP Summary": "do nothing, successfully",
      "Most Similar TLDR Task": "Return a successful exit code",
      "Most Similar TLDR Script": "true",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_468429: Bash compare string and integer together as multi-conditions",
        "so_32826395: Bash Script with Parsing Argument in Linux"
      ],
      "Top-3 Scripts": [
        "ul_468429: if true && if true; then false; fi; then echo foo; else echo bar; fi\n\nif (true && (if true; then false; fi)); then echo foo; else echo bar; fi",
        "so_32826395: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "line",
      "MP Summary": "cache line size",
      "Most Similar TLDR Task": "Read input",
      "Most Similar TLDR Script": "line",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_57352023: execution with argument"
      ],
      "Top-3 Scripts": [
        "so_57352023: xargs -n 1 -P 500 -I % SCRIPT_PATH % \"arguments\" < file.txt # % as input line\nxargs -n 1 -P 500 -I {} SCRIPT_PATH {} \"arguments\" < file.txt # {} as input line"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "false",
      "MP Summary": "return false value",
      "Most Similar TLDR Task": "Return an exit code of 1",
      "Most Similar TLDR Script": "false",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_32826395: Bash Script with Parsing Argument in Linux"
      ],
      "Top-3 Scripts": [
        "so_32826395: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "date",
      "MP Summary": "print or set the system date and time",
      "Most Similar TLDR Task": "Convert a specific date to the Unix timestamp format",
      "Most Similar TLDR Script": "date -d \"{{2018-09-01 00:00}}\" +%s --utc",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_26151375: Parse two integers in a string and assign them to two bash variables?"
      ],
      "Top-3 Scripts": [
        "so_26151375: $ date +'%H %M'\n15 45\n\ndate +'%H %M'\n\n$ read i j < <(date +'%H %M')\n$ echo i=$i j=$j\ni=15 j=45"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "alias",
      "MP Summary": "define or display aliases",
      "Most Similar TLDR Task": "Remove an aliased command",
      "Most Similar TLDR Script": "unalias {{word}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_471474: flag/argument in bash alias"
      ],
      "Top-3 Scripts": [
        "ul_471474: alias add='java -jar vc.jar '"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Most Similar TLDR Task": "Look inside a zipped file and determine the file type(s) inside",
      "Most Similar TLDR Script": "file -z {{foo.zip}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_32826395: Bash Script with Parsing Argument in Linux",
        "so_36464381: Sort by string key and then by integer (bash)",
        "so_28705539: how can i print a string that contains integers and commas only in unix?"
      ],
      "Top-3 Scripts": [
        "so_32826395: ",
        "so_36464381: $ sort -k1,1 -k2n file",
        "so_28705539: sed 's/[^0-9,]*//g' file"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "parallel",
      "MP Summary": "run programs in parallel",
      "Most Similar TLDR Task": "Parallel xargs, cram as many args as possible onto one command",
      "Most Similar TLDR Script": "{{args}} | parallel -X {{command}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_57352023: execution with argument"
      ],
      "Top-3 Scripts": [
        "so_57352023: parallel -n 1 -P 500 -I {} SCRIPT_PATH {} \"arguments\" < file.txt # just replace xargs with parallel\nparallel -P 500 SCRIPT_PATH {} \"arguments\" < file.txt # you can omit -n 1 -I arg\n\nparallel -P 500 --arg-file file.txt SCRIPT_PATH {} \"arguments\"  # --arg-file argument\nparallel -P 500 -a file.txt SCRIPT_PATH {} \"arguments\"  # -a is an --arg-file synonym\nparallel -P 500 SCRIPT_PATH {} \"arguments\" :::: file.txt # '::::' - another way to write -a argfile1\n\nparallel -P 500 --slf file.txt --nonall SCRIPT_PATH \"arguments\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "import",
      "MP Summary": "saves any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen.",
      "Most Similar TLDR Task": "Capture contents of a remote X server screen in the PNG image format",
      "Most Similar TLDR Script": "import -window root -display {{remote_host}}:{screen}.{display} {{output.png}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_22351646: \"Unquote\"/parse bash argument string in python"
      ],
      "Top-3 Scripts": [
        "so_22351646: s = 'first_item second\\ item \"third item\"'\n\nimport shlex\n\nshlex.split(s)\nOut[3]: ['first_item', 'second item', 'third item']"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Assemble the output to a given file",
      "Most Similar TLDR Script": "as {{file.s}} -o {{out.o}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_57352023: execution with argument"
      ],
      "Top-3 Scripts": [
        "so_57352023: xargs -n 1 -P 500 -I % SCRIPT_PATH % \"arguments\" < file.txt # % as input line\nxargs -n 1 -P 500 -I {} SCRIPT_PATH {} \"arguments\" < file.txt # {} as input line"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "write",
      "MP Summary": "send a message to another user",
      "Most Similar TLDR Task": "Send message to \"testuser\" on terminal \"/dev/tty/5\"",
      "Most Similar TLDR Script": "write {{testuser}} {{tty/5}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_57352023: execution with argument"
      ],
      "Top-3 Scripts": [
        "so_57352023: parallel -P 500 --arg-file file.txt SCRIPT_PATH {} \"arguments\"  # --arg-file argument\nparallel -P 500 -a file.txt SCRIPT_PATH {} \"arguments\"  # -a is an --arg-file synonym\nparallel -P 500 SCRIPT_PATH {} \"arguments\" :::: file.txt # '::::' - another way to write -a argfile1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "man",
      "MP Summary": "an interface to the system reference manuals",
      "Most Similar TLDR Task": "Search for manpages containing a search string",
      "Most Similar TLDR Script": "man -k \"{{search string}}\"",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_58398558: Separate \"Source\" arguments and \"Parent Script\" arguments in bash",
        "ul_396895: String comparison with integer in [[ test"
      ],
      "Top-3 Scripts": [
        "so_58398558: man bash",
        "ul_396895: man bash"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "print",
      "MP Summary": "execute programs via entries in the mailcap file",
      "Most Similar TLDR Task": "Print action can be used to print any file on default run-mailcap tool",
      "Most Similar TLDR Script": "print {{filename}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65195213: conversion of string to integer in unix",
        "so_63478080: Ruby ouput(string and integers)"
      ],
      "Top-3 Scripts": [
        "so_65195213: while read -r pid owner m cmd; do\n   if [[ $pid =~ ^[0-9]+$ && $cmd != \"ps -o\"* ]]; then\n      mem=\"$(pmap $pid | awk 'END {print $NF+0}')\"\n      ((mem > 0)) && printf \"%-10s%-15s%-15s%s\\n\" \"$pid\" \"$owner\" \"$mem\" \"$cmd\"\n   fi\ndone < <(ps -o  pid,user,%mem,command ax)",
        "so_63478080: print \"\\tCreated On: #{Time.at(package['created'].to_i / 1000).strftime('%d/%b/%Y') unless package[\"created\"].nil?}\\n\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "pax",
      "MP Summary": "read and write file archives and copy directory hierarchies",
      "Most Similar TLDR Task": "Create an archive from files",
      "Most Similar TLDR Script": "pax -wf {{target.tar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_27979144: Shell script integer input"
      ],
      "Top-3 Scripts": [
        "so_27979144: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "install",
      "MP Summary": "copy files and set attributes",
      "Most Similar TLDR Task": "Copy files to destination",
      "Most Similar TLDR Script": "install {{path/to/source}} {{path/to/destination}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_193724: Shell expansion for arguments?"
      ],
      "Top-3 Scripts": [
        "ul_193724: echo install update doctor | xargs -n1 brew"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "scp",
      "MP Summary": "secure copy (remote file copy program)",
      "Most Similar TLDR Task": "Recursively copy the contents of a directory from a remote host to a local directory",
      "Most Similar TLDR Script": "scp -r {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_69330673: scp multiple arguments of bash script"
      ],
      "Top-3 Scripts": [
        "so_69330673: scp $user@server:/path/run\"1\" \"2\"*.lz4 ./\n\nsources=()\nfor runNum in \"$@\"; do\n    sources+=(\"$user@server:/path/run${runNum}*.lz4\")\ndone\nscp \"${sources[@]}\" ./"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "script",
      "MP Summary": "make typescript of terminal session",
      "Most Similar TLDR Task": "Record a new session to a file named `typescript` in the current directory",
      "Most Similar TLDR Script": "script",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_46240710: Parse optional arguments with multiple space-separated values for some arguments in Bash"
      ],
      "Top-3 Scripts": [
        "so_46240710: ./script first second third --something\nFinal result: first second third\n\n./script --prefix pre --suffixes first second third --something\nFinal result: prefirst presecond prethird\n\n./script -p pre -s first second third --something\nFinal result: prefirst presecond prethird"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "rm",
      "MP Summary": "remove files or directories",
      "Most Similar TLDR Task": "Remove files from arbitrary locations",
      "Most Similar TLDR Script": "rm {{path/to/file}} {{path/to/another/file}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_396895: String comparison with integer in [[ test"
      ],
      "Top-3 Scripts": [
        "ul_396895: x='a[$(rm -i *)]'\n[[ x -eq 0 ]] && echo yes\n\n$ x='a[$(rm -i *)]'\n$ [ \"$x\" -eq 0 ] && echo yes\nbash: [: a[$(rm -i *)]: integer expression expected"
      ],
      "Explanations about Options": {
        "-i": "prompt before every removal"
      }
    },
    {
      "Command": "ps",
      "MP Summary": "report a snapshot of the current processes.",
      "Most Similar TLDR Task": "List all running processes including the full command string",
      "Most Similar TLDR Script": "ps auxww",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65195213: conversion of string to integer in unix"
      ],
      "Top-3 Scripts": [
        "so_65195213: while read -r pid owner m cmd; do\n   if [[ $pid =~ ^[0-9]+$ && $cmd != \"ps -o\"* ]]; then\n      mem=\"$(pmap $pid | awk 'END {print $NF+0}')\"\n      ((mem > 0)) && printf \"%-10s%-15s%-15s%s\\n\" \"$pid\" \"$owner\" \"$mem\" \"$cmd\"\n   fi\ndone < <(ps -o  pid,user,%mem,command ax)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ssh",
      "MP Summary": "OpenSSH SSH client (remote login program)",
      "Most Similar TLDR Task": "Connect to a remote server with a specific identity (private key)",
      "Most Similar TLDR Script": "ssh -i {{path/to/key_file}} {{username}}@{{remote_host}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_69330673: scp multiple arguments of bash script"
      ],
      "Top-3 Scripts": [
        "so_69330673: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "id",
      "MP Summary": "print real and effective user and group IDs",
      "Most Similar TLDR Task": "Display the current group identity as a number",
      "Most Similar TLDR Script": "id -g",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_38758175: BASH:- Parse string into separate command line arguments"
      ],
      "Top-3 Scripts": [
        "so_38758175: for id in {100..500..10}\n  do\nfor letter in A B C D E F\n  do\n    getvars+=( \\\":${id}:${letter}\\\" ) # adding elements to array\n done\ndone\n#and later do the following\n./somecommand \"${getvars[@]}\" # Each element will be separated to a word"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mv",
      "MP Summary": "move (rename) files",
      "Most Similar TLDR Task": "Move files in arbitrary locations",
      "Most Similar TLDR Script": "mv {{source}} {{target}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_8551200: arguments in bash"
      ],
      "Top-3 Scripts": [
        "so_8551200: #!/bin/bash\n\nfrom=/home/elg19/lone/doc\nif [[ $1 = -d ]]; then\n    to=$2\nelse\n    to=/home/elg19/documents\nfi\n\nfind \"$from\" -type f \\( -name '*.pdf' -o -name '*.txt' -o -name '*.doc' \\) -exec bash -c 'dest=$1; shift; mv \"$@\" \"$dest\"' _ \"$to\" {} +"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "stat",
      "MP Summary": "display file or file system status",
      "Most Similar TLDR Task": "Show only octal file permissions",
      "Most Similar TLDR Script": "stat -c \"%a %n\" {{file}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_32826395: Bash Script with Parsing Argument in Linux"
      ],
      "Top-3 Scripts": [
        "so_32826395: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "host",
      "MP Summary": "DNS lookup utility",
      "Most Similar TLDR Task": "Specify an alternate DNS server to query",
      "Most Similar TLDR Script": "host {{domain}} {{8.8.8.8}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_25550687: Bash \u2014 [: too many arguments"
      ],
      "Top-3 Scripts": [
        "so_25550687: if [ nc -w 5 -z host port ] &&  [ nc -w 5 -z host port ]\n\nif [ -n \"$(nc -w 5 -z $host $port)\" ] && [ -n \"$(nc -w 5 -z $host $port)\" ]\n\nif [[ -n \"$(nc -w 5 -z $host $port)\" && -n \"$(nc -w 5 -z $host $port)\" ]]\n\nif nc -w 5 -z $host $port && nc -w 5 -z $host $port"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "nc",
      "MP Summary": "arbitrary TCP and UDP connections and listens",
      "Most Similar TLDR Task": "Receive a file",
      "Most Similar TLDR Script": "nc {{ip_address}} {{port}} > {{file}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_25550687: Bash \u2014 [: too many arguments"
      ],
      "Top-3 Scripts": [
        "so_25550687: if [ nc -w 5 -z host port ] &&  [ nc -w 5 -z host port ]\n\nif [ -n \"$(nc -w 5 -z $host $port)\" ] && [ -n \"$(nc -w 5 -z $host $port)\" ]\n\nif [[ -n \"$(nc -w 5 -z $host $port)\" && -n \"$(nc -w 5 -z $host $port)\" ]]\n\nif nc -w 5 -z $host $port && nc -w 5 -z $host $port"
      ],
      "Explanations about Options": {
        "-z": "Only scan for listening daemons, without sending any data to them. Cannot be used\n together with -l.",
        "-w": "Connections which cannot be established or are idle timeout after timeout seconds.\n The -w flag has no effect on the -l option, i.e. nc will listen forever for a\n connection, with or without the -w flag. The default is no timeout."
      }
    },
    {
      "Command": "lz4",
      "MP Summary": "lz4, unlz4, lz4cat - Compress or decompress .lz4 files",
      "Most Similar TLDR Task": "Package and compress a directory and its contents",
      "Most Similar TLDR Script": "tar cvf - {{path/to/dir}} | lz4 - {{dir.tar.lz4}}",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_69330673: scp multiple arguments of bash script"
      ],
      "Top-3 Scripts": [
        "so_69330673: for runNum in \"$@\"; do\n    lz4 -mdv --rm run${runNum}*.lz4\ndone"
      ],
      "Explanations about Options": {
        "-d": "Decompress. --decompress is also the default operation when the input filename has\n an .lz4 extension.",
        "-m": "Multiple input files. Compressed file names will be appended a .lz4 suffix. This\n mode also reduces notification level. Can also be used to list multiple files. lz4\n -m has a behavior equivalent to gzip -k (it preserves source files by default).",
        "--rm": "Delete source files on successful compression or decompression"
      }
    },
    {
      "Command": "re",
      "MP Summary": "programm to conver russian texts between different encodings",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_42172698: split a string into string and integer bash"
      ],
      "Top-3 Scripts": [
        "so_42172698: re=\"(^| )${myArray[i]} ([0-9]*)( |$)\"\nif [[ $file_content =~ $re ]]; then"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "then",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_42172698: split a string into string and integer bash",
        "ul_468429: Bash compare string and integer together as multi-conditions",
        "ul_478831: determine if output is string or integer"
      ],
      "Top-3 Scripts": [
        "so_42172698: if [[ \" $file_content \" =~ ${myArray[i]} ]]; then\n\nre=\"(^| )${myArray[i]} ([0-9]*)( |$)\"\nif [[ $file_content =~ $re ]]; then",
        "ul_468429: if [ \"${GtkTheme}\" != \"${NightTheme}\" ] && ((${TimeHr}>=19 || ${TimeHr}<=5)); then\n\nif true && if true; then false; fi; then echo foo; else echo bar; fi\n\nif (true && (if true; then false; fi)); then echo foo; else echo bar; fi",
        "ul_478831: if ! [[ $( xargs <<< \"$count\" ) =~ ^[0-9]+$ ]]\nthen\n    echo \"string\"\nelse\n    echo $count\nfi\n\nif ! [[ \"${count// /}\" =~ ^[0-9]+$ ]]\nthen\n    echo \"string\"\nelse\n    echo $count\nfi"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "pmap",
      "MP Summary": "report memory map of a process",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\"\n",
          "command-options": {
            "bash": {
              "mpsum": "GNU Bourne-Again SHell"
            },
            "dev": {
              "mpsum": "release candidate LaTeX testing"
            }
          },
          "TLDR_inform": {
            "bash": {
              "man1_bash_2190": "bourne-again shell\nsh -compat command line interpret execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell"
            },
            "dev": {
              "man1_dev_17127": "",
              "man1_dev_18227": "",
              "man1_dev_25075": "",
              "man1_dev_26073": "",
              "man1_dev_35421": "",
              "man1_dev_37549": "",
              "man1_dev_7859": ""
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65195213: conversion of string to integer in unix"
      ],
      "Top-3 Scripts": [
        "so_65195213: while read -r pid owner m cmd; do\n   if [[ $pid =~ ^[0-9]+$ && $cmd != \"ps -o\"* ]]; then\n      mem=\"$(pmap $pid | awk 'END {print $NF+0}')\"\n      ((mem > 0)) && printf \"%-10s%-15s%-15s%s\\n\" \"$pid\" \"$owner\" \"$mem\" \"$cmd\"\n   fi\ndone < <(ps -o  pid,user,%mem,command ax)"
      ],
      "Explanations about Options": {}
    }
  ]
}