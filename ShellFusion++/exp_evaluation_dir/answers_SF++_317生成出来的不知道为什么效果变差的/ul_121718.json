{
  "Query": "How to parse JSON with shell scripting in Linux?",
  "Answers": [
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Most Similar TLDR Task": "Output all elements from arrays (or all the values from objects) in a JSON file",
      "Most Similar TLDR Script": "jq '.[]' {{file.json}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_45617267: Iterate through JSON objects with jq in shell script",
        "so_65014334: parse JSON Array with spaces in bash"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_45617267: ",
        "so_65014334: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bash",
      "MP Summary": "GNU Bourne-Again SHell",
      "Most Similar TLDR Task": "Execute a command",
      "Most Similar TLDR Script": "bash -c \"{{command}}\"",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_20809820: Executing a shell script in Python from the JSON document",
        "so_45715538: Parsing variables in curl with bash script"
      ],
      "Top-3 Scripts": [
        "so_20809820: jsonDataaa = '{\"script\":\"#!/bin/bash \\\\n hello=$jj1 \\\\n echo $hello \\\\n echo $jj1 \\\\n echo $jj2 \\\\n for el1 in $jj3 \\\\n do \\\\n echo \\\\\"$el1\\\\\" \\\\n done \\\\n for el2 in $jj4 \\\\n do \\\\n echo \\\\\"$el2\\\\\" \\\\n done\"}'",
        "so_45715538: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "so_13912990: Parsing JSON in shell script with regex"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_65014334: ",
        "so_13912990: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Replace all occurrences of a string in a file, overwriting the file (i.e. in-place)",
      "Most Similar TLDR Script": "sed -i 's/{{find}}/{{replace}}/g' {{filename}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_69344075: Create a json from given list of filenames in unix script",
        "so_49338186: delete line from json file with sed in a shell",
        "so_45367076: check value of json response in bash script"
      ],
      "Top-3 Scripts": [
        "so_69344075: for file in $(ls *.txt); do file_version=$(echo $file | sed 's/\\(^.*-\\)\\(.*\\)\\(.txt.*$\\)/\\2/'); jq -n --arg name \"$file_version\" --arg path \"$file\" '{name: $name, name: $path}'; done | jq -n '.urls |= [inputs]'",
        "so_49338186: sed -i '' -e '/electron-inspector/d' file",
        "so_45367076: s='{\"running\": 1, \"finished\": 3, \"node_name\": \"L-2.local\", \"pending\": 0, \"status\": \"ok\"}'\necho $s | sed 's/.*\"running\":[[:space:]]*\\([0-9]*\\).*/\\1/'"
      ],
      "Explanations about Options": {
        "-e": "add the script to the commands to be executed",
        "-i": "edit files in place (makes backup if SUFFIX supplied)"
      }
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Include a given path to the list of directories to search for files specified in .include directives",
      "Most Similar TLDR Script": "as -I {{path/to/directory}} {{file.s}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45617267: Iterate through JSON objects with jq in shell script",
        "so_42296559: update json with jq through shell script",
        "so_69047630: jq parse json with stream flag into different json file"
      ],
      "Top-3 Scripts": [
        "so_45617267: ",
        "so_42296559: --argjson name JSON-text:    \nThis option passes a JSON-encoded value to the jq program as a predefined variable.",
        "so_69047630: jq -n --stream '\n [fromstream( \n   inputs\n   | (.[0] | index(\"data\")) as $ix\n   | select($ix)\n   | .[0] |= .[$ix:] )]\n' input.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "read",
      "MP Summary": "read a line from standard input",
      "Most Similar TLDR Task": "Use a specific character as a delimiter instead of a new line",
      "Most Similar TLDR Script": "read -d {{new_delimiter}} {{variable}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_45617267: Iterate through JSON objects with jq in shell script",
        "so_65014334: parse JSON Array with spaces in bash"
      ],
      "Top-3 Scripts": [
        "so_62263081: declare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_45617267: ",
        "so_65014334: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Most Similar TLDR Task": "Print different values based on conditions",
      "Most Similar TLDR Script": "awk '{if ($1 == \"foo\") print \"Exact match foo\"; else if ($1 ~ \"bar\") print \"Partial match bar\"; else print \"Baz\"}' {{filename}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_18975153: Generate JSON using Dynamic Variable in Shell script",
        "su_1611796: How to remove white space after parsing from JSON with sed",
        "so_27189904: Changing values in a JSON data file from shell"
      ],
      "Top-3 Scripts": [
        "so_18975153: awk -f script.awk file\nsystem_profiler SPMemoryDataType | awk -f script.awk\n\nsystem_profiler SPMemoryDataType | awk '$1==\"BANK\"{bank=$2;sub(/:/,\"\",bank);while(getline>0){if($1==\"Serial\"&&$2==\"Number:\"){serial_number=$3}else if($1==\"Status:\"){status=$2};if(serial_number!=\"\"&&status!=\"\"){entries[++e]=\"{\\\"Bank\\\":\\\"\"bank\"\\\",\\\"SerialNumber\\\":\\\"\"serial_number\"\\\",\\\"Status\\\":\\\"\"status\"\\\"}\";break}};bank=serial_number=status=\"\"}END{print \"[\";if(e>0){printf \"%s\",entries[1];for(i=2;i<=e;++i){printf \",\\n%s\",entries[i]};print\"\"};print \"]\"}'",
        "su_1611796: awk  '\n    $1 == \"\\\"city\\\":\" {\n      $1 = \"\"\n      gsub(/ /,\"\")\n      sub(/^\"/,\"\")\n      sub(/\",$/,\"\")\n      print\n    }\n'",
        "so_27189904: $ arr=\"10.1.1.2 10.1.1.3\"\n$ awk -v arr=\"$arr\" -F, 'BEGIN { gsub(/\\./,\"\\\\.\",arr); gsub(/ /,\"|\",arr) }\n    $1 ~ \"\\\"(\" arr \")\\\"\" { sub(/active/,\"in&\") } 1' file\n{\"ipaddr\":\"10.1.1.2\",\"hostname\":\"host2\",\"role\":\"http\",\"status\":\"inactive\"},\n{\"ipaddr\":\"10.1.1.3\",\"hostname\":\"host3\",\"role\":\"sql\",\"status\":\"inactive\"},\n{\"ipaddr\":\"10.1.1.4\",\"hostname\":\"host4\",\"role\":\"quad\",\"status\":\"active\"},"
      ],
      "Explanations about Options": {
        "-v": "FS=sepstring"
      }
    },
    {
      "Command": "printf",
      "MP Summary": "format and print data",
      "Most Similar TLDR Task": "Print a text message composed with environment variables",
      "Most Similar TLDR Script": "printf \"{{var1: %s\\tvar2: %s\\n}}\" \"{{$VAR1}}\" \"{{$VAR2}}\"",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45617267: Iterate through JSON objects with jq in shell script",
        "so_18975153: Generate JSON using Dynamic Variable in Shell script",
        "so_21918728: How do I make this shell to parse the statement with quotes around them in C?"
      ],
      "Top-3 Scripts": [
        "so_45617267: ",
        "so_18975153: system_profiler SPMemoryDataType | awk '$1==\"BANK\"{bank=$2;sub(/:/,\"\",bank);while(getline>0){if($1==\"Serial\"&&$2==\"Number:\"){serial_number=$3}else if($1==\"Status:\"){status=$2};if(serial_number!=\"\"&&status!=\"\"){entries[++e]=\"{\\\"Bank\\\":\\\"\"bank\"\\\",\\\"SerialNumber\\\":\\\"\"serial_number\"\\\",\\\"Status\\\":\\\"\"status\"\\\"}\";break}};bank=serial_number=status=\"\"}END{print \"[\";if(e>0){printf \"%s\",entries[1];for(i=2;i<=e;++i){printf \",\\n%s\",entries[i]};print\"\"};print \"]\"}'",
        "so_21918728: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the specified exit code",
      "Most Similar TLDR Script": "exit {{exit_code}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_59579961: convert comma separated command line arguments to json in shell script"
      ],
      "Top-3 Scripts": [
        "so_59579961: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "print",
      "MP Summary": "execute programs via entries in the mailcap file",
      "Most Similar TLDR Task": "Print action can be used to print any file on default run-mailcap tool",
      "Most Similar TLDR Script": "print {{filename}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_18975153: Generate JSON using Dynamic Variable in Shell script",
        "su_1611796: How to remove white space after parsing from JSON with sed",
        "so_48521877: How to create array from json data in shell script"
      ],
      "Top-3 Scripts": [
        "so_18975153: system_profiler SPMemoryDataType | awk '$1==\"BANK\"{bank=$2;sub(/:/,\"\",bank);while(getline>0){if($1==\"Serial\"&&$2==\"Number:\"){serial_number=$3}else if($1==\"Status:\"){status=$2};if(serial_number!=\"\"&&status!=\"\"){entries[++e]=\"{\\\"Bank\\\":\\\"\"bank\"\\\",\\\"SerialNumber\\\":\\\"\"serial_number\"\\\",\\\"Status\\\":\\\"\"status\"\\\"}\";break}};bank=serial_number=status=\"\"}END{print \"[\";if(e>0){printf \"%s\",entries[1];for(i=2;i<=e;++i){printf \",\\n%s\",entries[i]};print\"\"};print \"]\"}'",
        "su_1611796: awk  '\n    $1 == \"\\\"city\\\":\" {\n      $1 = \"\"\n      gsub(/ /,\"\")\n      sub(/^\"/,\"\")\n      sub(/\",$/,\"\")\n      print\n    }\n'",
        "so_48521877: arr=($(echo \"['1', '2', '3', '4']\" | grep -oP \"'[^']*'\" | awk '{print substr($0, 2, length($0) - 2)}'))"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "curl",
      "MP Summary": "transfer a URL",
      "Most Similar TLDR Task": "Send data in JSON format, specifying the appropriate content-type header",
      "Most Similar TLDR Script": "curl -d {{'{\"name\":\"bob\"}'}} -H {{'Content-Type: application/json'}} {{http://example.com/users/1234}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_50922765: Parse variables from JSON, then loop through on several url with variables with curl",
        "so_21888831: Get JSON value from URL in BASH",
        "so_62200741: Extracting a json value to a variable in zsh shell script"
      ],
      "Top-3 Scripts": [
        "so_50922765: jq -r '(.Data[] | \"\\(.Latitude),\\(.Longitude)\")' /usr/location/archive/location_1806181400.json |\n   while IFS=, read -r lat long; do\n       curl \"https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&key=APIKEYHERE\"\n   done",
        "so_21888831: value=$(\n  curl -s \"$url\" |\n  ruby -rjson -e 'data = JSON.parse(STDIN.read); puts data[\"latest\"][\"snapshot\"]'\n)",
        "so_62200741: result = $(curl -s -X GET \"https://openexchangerates.org/api/latest.json?app_id=SOME_KEY\" | jq '.rates.GBP')\n\nresult=$(curl -s -X GET \"https://openexchangerates.org/api/latest.json?app_id=SOME_KEY\" | jq '.rates.GBP')"
      ],
      "Explanations about Options": {
        "-X": "(HTTP) Specifies a custom request method to use when communicating with the HTTP\n server. The specified request method will be used instead of the method otherwise\n used (which defaults to GET). Read the HTTP 1.1 specification for details and\n explanations. Common additional HTTP requests include PUT and DELETE, but related\n technologies like WebDAV offers PROPFIND, COPY, MOVE and more.",
        "-s": "Silent or quiet mode. Don't show progress meter or error messages. Makes Curl\n mute. It will still output the data you ask for, potentially even to the\n terminal/stdout unless you redirect it."
      }
    },
    {
      "Command": "command",
      "MP Summary": "execute a simple command",
      "Most Similar TLDR Task": "Display the path to the executable or the alias definition of a specific command",
      "Most Similar TLDR Script": "command -v {{command_name}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_49338186: delete line from json file with sed in a shell"
      ],
      "Top-3 Scripts": [
        "so_49338186: command ...... file.json | sponge file.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ruby",
      "MP Summary": "Interpreted object-oriented scripting language",
      "Most Similar TLDR Task": "Execute a Ruby script",
      "Most Similar TLDR Script": "ruby {{script.rb}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_21888831: Get JSON value from URL in BASH"
      ],
      "Top-3 Scripts": [
        "so_21888831: value=$(\n  curl -s \"$url\" |\n  ruby -rjson -e 'data = JSON.parse(STDIN.read); puts data[\"latest\"][\"snapshot\"]'\n)"
      ],
      "Explanations about Options": {
        "-e": "Specifies script from command-line while telling Ruby not to search the rest\n of the arguments for a script file name.",
        "-r": "Causes Ruby to load the library using require. It is useful when using -n or\n -p.",
        "-s": "Enables some switch parsing for switches after script name but before any\n file name arguments (or before a --). Any switches found there are removed\n from ARGV and set the corresponding variable in the script. For example:",
        "-n": "Causes Ruby to assume the following loop around your script, which makes it\n iterate over file name arguments somewhat like sed -n or awk."
      }
    },
    {
      "Command": "cat",
      "MP Summary": "concatenate files and print on the standard output",
      "Most Similar TLDR Task": "Concatenate several files into the target file",
      "Most Similar TLDR Script": "cat {{file1}} {{file2}} > {{target_file}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_49338186: delete line from json file with sed in a shell",
        "so_43373176: Store JSON directly in bash script with variables?"
      ],
      "Top-3 Scripts": [
        "so_49338186: cat file.json\n{\"foo\": 123, \"electron-inspector\": \"0.1.4\", \"bar\": 42 }",
        "so_43373176: foo=$(cat <<EOF\n{\"Comment\":\"Update DNSName.\",\"Changes\":[{\"Action\":\"UPSERT\",\"ResourceRecordSet\":{\"Name\":\"alex.\",\"Type\":\"A\",\"AliasTarget\":{\"HostedZoneId\":\"######\",\"DNSName\":\"$bar\",\"EvaluateTargetHealth\":false}}}]}\nEOF\n)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "python",
      "MP Summary": "an interpreted, interactive, object-oriented programming language",
      "Most Similar TLDR Task": "Execute script as part of an interactive shell",
      "Most Similar TLDR Script": "python -i {{script.py}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_31798477: How to parse parameter's name from JSON with python"
      ],
      "Top-3 Scripts": [
        "so_31798477: echo '{\"710\":{\"sysKey\":\"ENTER\"},\"230\":{\"sysKey\":\"DELETE\"},\"804\":{\"sysKey\":\"ADD\"}}' | python -c 'import json,sys;obj=json.load(sys.stdin);obj=dict((z,x) for x, y in obj.items() for z in y.values());print obj[\"DELETE\"];'"
      ],
      "Explanations about Options": {
        "-c": "Specify the command to execute (see next section). This terminates the option list\n (following options are passed as arguments to the command)."
      }
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Most Similar TLDR Task": "Look inside a zipped file and determine the file type(s) inside",
      "Most Similar TLDR Script": "file -z {{foo.zip}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_18975153: Generate JSON using Dynamic Variable in Shell script",
        "so_42296559: update json with jq through shell script",
        "so_69344075: Create a json from given list of filenames in unix script"
      ],
      "Top-3 Scripts": [
        "so_18975153: awk -f script.awk file\nsystem_profiler SPMemoryDataType | awk -f script.awk",
        "so_42296559: jq --argjson args \"$REPORT\" '.data.messages += [$args]' file",
        "so_69344075: for file in $(ls *.txt); do file_version=$(echo $file | sed 's/\\(^.*-\\)\\(.*\\)\\(.txt.*$\\)/\\2/'); jq -n --arg name \"$file_version\" --arg path \"$file\" '{name: $name, name: $path}'; done | jq -n '.urls |= [inputs]'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "env",
      "MP Summary": "run a program in a modified environment",
      "Most Similar TLDR Task": "Remove variable from the environment and run a program",
      "Most Similar TLDR Script": "env -u {{variable}} {{program}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_47061923: How can I interpret variables on the fly in the shell script?"
      ],
      "Top-3 Scripts": [
        "so_47061923: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "rm",
      "MP Summary": "remove files or directories",
      "Most Similar TLDR Task": "Remove files from arbitrary locations",
      "Most Similar TLDR Script": "rm {{path/to/file}} {{path/to/another/file}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_27378689: Makefile to generate JSON from Python scripts in separate directories",
        "so_43292243: How to modify a key's value in a JSON file from command line"
      ],
      "Top-3 Scripts": [
        "so_27378689: ",
        "so_43292243: mv package.json temp.json\njq -r '.name |= \"adar\"' temp.json > package.json\nrm temp.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sponge",
      "MP Summary": "soak up standard input and write to a file",
      "Most Similar TLDR Task": "Remove all lines starting with # in a file",
      "Most Similar TLDR Script": "grep -v '^{{#}}' {{path/to/file}} | sponge {{path/to/file}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_49338186: delete line from json file with sed in a shell"
      ],
      "Top-3 Scripts": [
        "so_49338186: command ...... file.json | sponge file.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "export",
      "MP Summary": "set the export attribute for variables",
      "Most Similar TLDR Task": "Remove an environment variable",
      "Most Similar TLDR Script": "export -n {{VARIABLE}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_47061923: How can I interpret variables on the fly in the shell script?"
      ],
      "Top-3 Scripts": [
        "so_47061923: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "indent",
      "MP Summary": "changes the appearance of a C program by inserting or deleting whitespace.",
      "Most Similar TLDR Task": "Format C/C++ source according to the Linux style guide, automatically back up the original files, and replace with the indented versions",
      "Most Similar TLDR Script": "indent --linux-style {{path/to/source.c}} {{path/to/another_source.c}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45040567: working with JSON with a bash script"
      ],
      "Top-3 Scripts": [
        "so_45040567: import json\n\nwith open(\"file.json\", \"r\") as f, open(\"snippet.json\", \"r\") as s, open(\"out.json\", \"w\") as u:\n    data = json.load(f)  # parse `file.json`\n    data[\"tracks\"].append(json.load(s))  # parse `snippet.json` and append it to `.tracks[]`\n    json.dump(data, u, indent=4)  # encode the data back to JSON and write it to `out.json`"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "import",
      "MP Summary": "saves any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen.",
      "Most Similar TLDR Task": "Capture contents of a remote X server screen in the PNG image format",
      "Most Similar TLDR Script": "import -window root -display {{remote_host}}:{screen}.{display} {{output.png}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45040567: working with JSON with a bash script"
      ],
      "Top-3 Scripts": [
        "so_45040567: import json\n\nwith open(\"file.json\", \"r\") as f, open(\"snippet.json\", \"r\") as s, open(\"out.json\", \"w\") as u:\n    data = json.load(f)  # parse `file.json`\n    data[\"tracks\"].append(json.load(s))  # parse `snippet.json` and append it to `.tracks[]`\n    json.dump(data, u, indent=4)  # encode the data back to JSON and write it to `out.json`"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ssh",
      "MP Summary": "OpenSSH SSH client (remote login program)",
      "Most Similar TLDR Task": "Run a command on a remote server",
      "Most Similar TLDR Script": "ssh {{remote_host}} {{command -with -flags}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_66924847: How to pass a variable in a JSON string in bash script"
      ],
      "Top-3 Scripts": [
        "so_66924847: ssh $udcl aggr show -root false | grep -i \"9[2-9]%\\|100%\"  | sed 's/\\(.*\\)\\r/\"\\1\"/g' >  /tmp/${udcl}_aggr.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Most Similar TLDR Task": "Invert match for excluding specific strings",
      "Most Similar TLDR Script": "grep -v {{search_pattern}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_13912990: Parsing JSON in shell script with regex",
        "so_45491659: Compare keys in json string using Unix shell script",
        "so_15365871: Code for parsing a key/value in in file from shell script"
      ],
      "Top-3 Scripts": [
        "so_13912990: grep -Po '(?<=\"host\": \")[^\"]*' myjsonFile",
        "so_45491659: ",
        "so_15365871: myVar=$(grep -Po \"(?<=^HereIsAKey ).*\" file)"
      ],
      "Explanations about Options": {
        "-o": "Print only the matched (non-empty) parts of a matching line, with each such part on\n a separate output line.",
        "-P": "Interpret PATTERNS as Perl-compatible regular expressions (PCREs). This option is\n experimental when combined with the -z (--null-data) option, and grep -P may warn\n of unimplemented features."
      }
    },
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort a file preserving only unique lines",
      "Most Similar TLDR Script": "sort -u {{path/to/file}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45491659: Compare keys in json string using Unix shell script"
      ],
      "Top-3 Scripts": [
        "so_45491659: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mv",
      "MP Summary": "move (rename) files",
      "Most Similar TLDR Task": "Move files in arbitrary locations",
      "Most Similar TLDR Script": "mv {{source}} {{target}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_49338186: delete line from json file with sed in a shell",
        "so_43292243: How to modify a key's value in a JSON file from command line"
      ],
      "Top-3 Scripts": [
        "so_49338186: jq -r 'del(.[\"electron-inspector\"])' file.json > _.json && mv _.json file.json\n\n$ node<<EOF > _.json && mv _.json file.json                                               \nvar o = $(< file.json);\ndelete o[\"electron-inspector\"];\nconsole.log(JSON.stringify(o, null, 4));\nEOF\n\n> x.json && mv x.json file.json",
        "so_43292243: mv package.json temp.json\njq -r '.name |= \"adar\"' temp.json > package.json\nrm temp.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "write",
      "MP Summary": "send a message to another user",
      "Most Similar TLDR Task": "Send message to \"testuser\" on terminal \"/dev/tty/5\"",
      "Most Similar TLDR Script": "write {{testuser}} {{tty/5}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45040567: working with JSON with a bash script"
      ],
      "Top-3 Scripts": [
        "so_45040567: import json\n\nwith open(\"file.json\", \"r\") as f, open(\"snippet.json\", \"r\") as s, open(\"out.json\", \"w\") as u:\n    data = json.load(f)  # parse `file.json`\n    data[\"tracks\"].append(json.load(s))  # parse `snippet.json` and append it to `.tracks[]`\n    json.dump(data, u, indent=4)  # encode the data back to JSON and write it to `out.json`"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "join",
      "MP Summary": "join lines of two files on a common field",
      "Most Similar TLDR Task": "Produce a line for each unpairable line for file1",
      "Most Similar TLDR Script": "join -a {{1}} {{file1}} {{file2}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45491659: Compare keys in json string using Unix shell script",
        "so_66621445: How to parse JSON with keys from a BASH variable using jq?"
      ],
      "Top-3 Scripts": [
        "so_45491659: ",
        "so_66621445: [getpath(($key / \",\")[] / \".\")] | join(\",\")\n\n$ KEYS=id,coord.lon,coord.lat\n$ jq -r '[getpath(($key / \",\")[] / \".\")] | join(\",\")' file --arg key \"$KEYS\"\n707860,34.283333,44.549999"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "column",
      "MP Summary": "columnate lists",
      "Most Similar TLDR Task": "Specify column delimiter character for the -t option (e.g. \",\" for csv); default is whitespace",
      "Most Similar TLDR Script": "printf \"header1,header2\\nbar,foo\\n\" | column -t -s{{,}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45491659: Compare keys in json string using Unix shell script"
      ],
      "Top-3 Scripts": [
        "so_45491659: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "test",
      "MP Summary": "check file types and compare values",
      "Most Similar TLDR Task": "Test if given variable is empty",
      "Most Similar TLDR Script": "test -z $GIT_BRANCH",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_6624616: How to parse out the end of a path in a unix shell script?"
      ],
      "Top-3 Scripts": [
        "so_6624616: $ basename /home/test/user1\nuser1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "diff",
      "MP Summary": "compare two files",
      "Most Similar TLDR Task": "Compare directories, only showing the names of files that differ",
      "Most Similar TLDR Script": "diff -rq {{old_directory}} {{new_directory}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45491659: Compare keys in json string using Unix shell script"
      ],
      "Top-3 Scripts": [
        "so_45491659: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "basename",
      "MP Summary": "strip directory and suffix from filenames",
      "Most Similar TLDR Task": "Show only the file name from a path, with a suffix removed",
      "Most Similar TLDR Script": "basename {{path/to/file}} {{suffix}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_6624616: How to parse out the end of a path in a unix shell script?"
      ],
      "Top-3 Scripts": [
        "so_6624616: $ basename /home/test/user1\nuser1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "hello",
      "MP Summary": "friendly greeting program",
      "Most Similar TLDR Task": "Print a text message",
      "Most Similar TLDR Script": "hello --greeting=\"{{greeting_text}}\"",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_20809820: Executing a shell script in Python from the JSON document"
      ],
      "Top-3 Scripts": [
        "so_20809820: jsonDataaa = '{\"script\":\"#!/bin/bash \\\\n hello=$jj1 \\\\n echo $hello \\\\n echo $jj1 \\\\n echo $jj2 \\\\n for el1 in $jj3 \\\\n do \\\\n echo \\\\\"$el1\\\\\" \\\\n done \\\\n for el2 in $jj4 \\\\n do \\\\n echo \\\\\"$el2\\\\\" \\\\n done\"}'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "host",
      "MP Summary": "DNS lookup utility",
      "Most Similar TLDR Task": "Specify an alternate DNS server to query",
      "Most Similar TLDR Script": "host {{domain}} {{8.8.8.8}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_48505413: Update values in json with jq (shell script)"
      ],
      "Top-3 Scripts": [
        "so_48505413: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ls",
      "MP Summary": "list directory contents",
      "Most Similar TLDR Task": "List all files, including hidden files",
      "Most Similar TLDR Script": "ls -a",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_69344075: Create a json from given list of filenames in unix script"
      ],
      "Top-3 Scripts": [
        "so_69344075: for file in $(ls *.txt); do file_version=$(echo $file | sed 's/\\(^.*-\\)\\(.*\\)\\(.txt.*$\\)/\\2/'); jq -n --arg name \"$file_version\" --arg path \"$file\" '{name: $name, name: $path}'; done | jq -n '.urls |= [inputs]'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "false",
      "MP Summary": "return false value",
      "Most Similar TLDR Task": "Return an exit code of 1",
      "Most Similar TLDR Script": "false",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_542603: Parsing JSON with jq to get firstname in below JSON",
        "so_43373176: Store JSON directly in bash script with variables?",
        "so_66924847: How to pass a variable in a JSON string in bash script"
      ],
      "Top-3 Scripts": [
        "ul_542603: ",
        "so_43373176: ",
        "so_66924847: ssh $udcl aggr show -root false | grep -i \"9[2-9]%\\|100%\"  | sed 's/\\(.*\\)\\r/\"\\1\"/g' >  /tmp/${udcl}_aggr.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "uniq",
      "MP Summary": "report or omit repeated lines",
      "Most Similar TLDR Task": "Display only unique lines",
      "Most Similar TLDR Script": "sort {{file}} | uniq -u",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45491659: Compare keys in json string using Unix shell script"
      ],
      "Top-3 Scripts": [
        "so_45491659: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ping",
      "MP Summary": "send ICMP ECHO_REQUEST to network hosts",
      "Most Similar TLDR Task": "Also display a message if no response was received",
      "Most Similar TLDR Script": "ping -O {{host}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_48505413: Update values in json with jq (shell script)"
      ],
      "Top-3 Scripts": [
        "so_48505413: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ss",
      "MP Summary": "another utility to investigate sockets",
      "Most Similar TLDR Task": "Show all UDP sockets connected on specific source and destination ports",
      "Most Similar TLDR Script": "ss -u 'sport == :{{source_port}} and dport == :{{destination_port}}'",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65211894: Create json with a string variable as argument using jq"
      ],
      "Top-3 Scripts": [
        "so_65211894: ss=\"mango\"\njq -n '{\"name\": {\"S\": $ID}}' --arg ID \"partridge in a $ss tree\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "cut",
      "MP Summary": "remove sections from each line of files",
      "Most Similar TLDR Task": "Cut out everything from the 3rd character to the end of each line",
      "Most Similar TLDR Script": "cut -c {{3-}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_47113425: Parsing key value in an csv file using shell script"
      ],
      "Top-3 Scripts": [
        "so_47113425: grep 100 filename.csv | cut -d, -f3\n\nOutput:\nNew York"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "true",
      "MP Summary": "do nothing, successfully",
      "Most Similar TLDR Task": "Return a successful exit code",
      "Most Similar TLDR Script": "true",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_54744036: How to parse JSON File using Powershell, with conditions"
      ],
      "Top-3 Scripts": [
        "so_54744036: \"isTemplate\": true"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "info",
      "MP Summary": "read Info documents",
      "Most Similar TLDR Task": "Start reading at given menu item node from top-level directory",
      "Most Similar TLDR Script": "info {{menu_item}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_49671580: Running curl command with JSON content from a shell variable"
      ],
      "Top-3 Scripts": [
        "so_49671580: info='Help...?'\nobject='{\"attachments\": [{\"title\": \"ti1\",\"text\": \"'\"$info\"'\" }]}'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mkdir",
      "MP Summary": "make directories",
      "Most Similar TLDR Task": "Create directories recursively (useful for creating nested dirs)",
      "Most Similar TLDR Script": "mkdir -p {{path/to/directory}}",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45617267: Iterate through JSON objects with jq in shell script",
        "so_27378689: Makefile to generate JSON from Python scripts in separate directories"
      ],
      "Top-3 Scripts": [
        "so_45617267: ",
        "so_27378689: mkdir -p\n\nmkdir -p $(@D) && python2 $< > $@"
      ],
      "Explanations about Options": {
        "-p": "no error if existing, make parent directories as needed"
      }
    },
    {
      "Command": "to",
      "MP Summary": "as the filename. --logdir <name> Writes each synchronization log output in a new file in the specified directory. --logexpire <hours> Removes logs older than the value specified (in hours). This command is  used  with --logdir. --logflush Clears (flushes) the log file after each write action. --logdebug Also  output  debug-level  messages  in  the log (equivalent to setting the env var QT_LOGGING_RULES=\"qt.*=true;*.debug=true\"). ) --confdir <dirname> Uses the specified configuration directory. The ownCloud Client reads a configuration file.  You can locate this configuration file as follows: On Linux distributions: $HOME/.config/ownCloud/owncloud.cfg On Microsoft Windows systems: %APPDATA%\\ownCloud\\owncloud.cfg On MAC OS X systems: $HOME/Library/Preferences/ownCloud/owncloud.cfg The configuration file contains settings using the Microsoft Windows .ini file format. You can overwrite changes using the ownCloud configuration dialog. NOTE: Use caution when making changes to the ownCloud Client configuration  file.   Incorrect settings can produce unintended results. Some interesting values that can be set on the configuration file are: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[ownCloud] section          \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                    \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502remotePollInterval          \u2502 30000   \u2502 Specifies  the poll time \u2502 \u2502                            \u2502         \u2502 for      the      remote \u2502 \u2502                            \u2502         \u2502 repository            in \u2502 \u2502                            \u2502         \u2502 milliseconds.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502forceSyncInterval           \u2502 7200000 \u2502 The   duration   of   no \u2502 \u2502                            \u2502         \u2502 activity  after  which a \u2502 \u2502                            \u2502         \u2502 synchronization      run \u2502 \u2502                            \u2502         \u2502 shall    be    triggered \u2502 \u2502                            \u2502         \u2502 automatically.           \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502fullLocalDiscoveryInterval  \u2502 3600000 \u2502 The interval after which \u2502 \u2502                            \u2502         \u2502 the next synchronization \u2502 \u2502                            \u2502         \u2502 will   perform   a  full \u2502 \u2502                            \u2502         \u2502 local discovery.         \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502notificationRefreshInterval \u2502 300000  \u2502 Specifies   the  default \u2502 \u2502                            \u2502         \u2502 interval of checking for \u2502 \u2502                            \u2502         \u2502 new server notifications \u2502 \u2502                            \u2502         \u2502 in milliseconds.         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[General] section       \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502chunkSize               \u2502 5242880 \u2502 Specifies the chunk size \u2502 \u2502                        \u2502         \u2502 of   uploaded  files  in \u2502 \u2502                        \u2502         \u2502 bytes.                   \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502promptDeleteAllFiles    \u2502 true    \u2502 If a  UI  prompt  should \u2502 \u2502                        \u2502         \u2502 ask  for confirmation if \u2502 \u2502                        \u2502         \u2502 it was detected that all \u2502 \u2502                        \u2502         \u2502 files  and  folders were \u2502 \u2502                        \u2502         \u2502 deleted.                 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502maxLogLines             \u2502 20000   \u2502 Specifies  the   maximum \u2502 \u2502                        \u2502         \u2502 number   of   log  lines \u2502 \u2502                        \u2502         \u2502 displayed  in  the   log \u2502 \u2502                        \u2502         \u2502 window.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502timeout                 \u2502 300     \u2502 The  timeout for network \u2502 \u2502                        \u2502         \u2502 connections in seconds.  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502moveToTrash             \u2502 false   \u2502 If  non-locally  deleted \u2502 \u2502                        \u2502         \u2502 files should be moved to \u2502 \u2502                        \u2502         \u2502 trash     instead     of \u2502 \u2502                        \u2502         \u2502 deleting            them \u2502 \u2502                        \u2502         \u2502 completely.  This option \u2502 \u2502                        \u2502         \u2502 only works on linux      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502showExperimentalOptions \u2502 false   \u2502 Whether      to     show \u2502 \u2502                        \u2502         \u2502 experimental     options \u2502 \u2502                        \u2502         \u2502 that      are      still \u2502 \u2502                        \u2502         \u2502 undergoing  testing   in \u2502 \u2502                        \u2502         \u2502 the    user   interface. \u2502 \u2502                        \u2502         \u2502 Turning this on does not \u2502 \u2502                        \u2502         \u2502 enable      experimental \u2502 \u2502                        \u2502         \u2502 behavior on its own.  It \u2502 \u2502                        \u2502         \u2502 does     enable     user \u2502 \u2502                        \u2502         \u2502 inferface  options  that \u2502 \u2502                        \u2502         \u2502 can be used to opt in to \u2502 \u2502                        \u2502         \u2502 experimental features.   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[Proxy] section      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable             \u2502 Default   \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502host                 \u2502 127.0.0.1 \u2502 The address of the proxy \u2502 \u2502                     \u2502           \u2502 server.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502port                 \u2502 8080      \u2502 The  port were the proxy \u2502 \u2502                     \u2502           \u2502 is listening.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502type                 \u2502 2         \u2502 0 for System Proxy.      \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25021 for SOCKS5 Proxy.  \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25022 for No Proxy.      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25023 for HTTP(S) Proxy. \u2502           \u2502                          \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Please report bugs at https://github.com/owncloud/client/issues. owncloudcmd(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45617267: Iterate through JSON objects with jq in shell script",
        "so_42296559: update json with jq through shell script",
        "so_45040567: working with JSON with a bash script"
      ],
      "Top-3 Scripts": [
        "so_45617267: ",
        "so_42296559: --argjson name JSON-text:    \nThis option passes a JSON-encoded value to the jq program as a predefined variable.",
        "so_45040567: import json\n\nwith open(\"file.json\", \"r\") as f, open(\"snippet.json\", \"r\") as s, open(\"out.json\", \"w\") as u:\n    data = json.load(f)  # parse `file.json`\n    data[\"tracks\"].append(json.load(s))  # parse `snippet.json` and append it to `.tracks[]`\n    json.dump(data, u, indent=4)  # encode the data back to JSON and write it to `out.json`"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "break",
      "MP Summary": "exit from for, while, or until loop",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_18975153: Generate JSON using Dynamic Variable in Shell script"
      ],
      "Top-3 Scripts": [
        "so_18975153: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "error",
      "MP Summary": "Postfix error/retry mail delivery agent",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_21918728: How do I make this shell to parse the statement with quotes around them in C?"
      ],
      "Top-3 Scripts": [
        "so_21918728: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "return",
      "MP Summary": "return from a function or dot script",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_21918728: How do I make this shell to parse the statement with quotes around them in C?"
      ],
      "Top-3 Scripts": [
        "so_21918728: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "and",
      "MP Summary": "auto nice daemon",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_50282631: Parsing JSON file in powershell with specific characters",
        "so_45040567: working with JSON with a bash script"
      ],
      "Top-3 Scripts": [
        "so_50282631: $regex = [regex]::new('(?<=TripOriginLocationCode==\\\\\")(?<OriginCode>\\w+)|(?<=TripDestinationLocationCode==\\\\\")(?<DestinationCode>\\w+)|(?<=ZoneCode=\\\\\")(?<ZoneCode>\\w+)')\n$matchlist = $regex.Matches($myjson)\n\n### Assign each component to its own friendly variable name\n$OriginCode, $DestinationCode, $ZoneCode = $matchlist[0].Value, $matchlist[1].Value, $matchlist[2].Value\n\n### Construct a string from the individual components\n'Your origin code is {0}, your destination code is {1}, and your zone code is {2}' -f $OriginCode, $DestinationCode, $ZoneCode\n\nYour origin code is BRE, your destination code is STR, and your zone code is Zone1",
        "so_45040567: import json\n\nwith open(\"file.json\", \"r\") as f, open(\"snippet.json\", \"r\") as s, open(\"out.json\", \"w\") as u:\n    data = json.load(f)  # parse `file.json`\n    data[\"tracks\"].append(json.load(s))  # parse `snippet.json` and append it to `.tracks[]`\n    json.dump(data, u, indent=4)  # encode the data back to JSON and write it to `out.json`"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "then",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_48505413: Update values in json with jq (shell script)",
        "so_59358553: how to replace entire array using jq in shell script?"
      ],
      "Top-3 Scripts": [
        "so_48505413: ",
        "so_59358553: jq --arg originResponse ZZZ --arg viewerRequest YYY --arg originRequest XXX '\n.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items |= map(\n  .EventType as $t | .LambdaFunctionARN =\n    if $t == \"origin-response\" then $originResponse\n    elif $t == \"viewer-request\" then $viewerRequest\n    elif $t == \"origin-request\" then $originRequest\n    else . end\n)' file"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sample",
      "MP Summary": "packet sampling tc action",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\"\n",
          "command-options": {
            "node": {
              "mpsum": "server-side JavaScript runtime",
              "-p": "Identical to -e, but prints the result.",
              "-e": "Evaluate string as JavaScript."
            },
            "cat": {
              "mpsum": "concatenate files and print on the standard output"
            }
          },
          "TLDR_inform": {
            "node": {
              "man1_node_22603": "server-sid javascript platform node js activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell"
            },
            "cat": {
              "man1_cat_3454": "print concaten file append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_45491659: Compare keys in json string using Unix shell script"
      ],
      "Top-3 Scripts": [
        "so_45491659: "
      ],
      "Explanations about Options": {}
    }
  ]
}