{
  "Query": "Run automatically program on startup under linux ubuntu",
  "Answers": [
    {
      "Command": "bash",
      "MP Summary": "GNU Bourne-Again SHell",
      "Most Similar TLDR Task": "Run commands from a file, logging all commands executed to the terminal",
      "Most Similar TLDR Script": "bash -x {{file.sh}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_946946: running python program on startup in tty4",
        "so_18188192: Run a bash script on startup, before login as a user",
        "ul_637855: How to make a command run on startup on KDE Manjaro"
      ],
      "Top-3 Scripts": [
        "su_946946: ",
        "so_18188192: su minecraft -c '/bin/bash /path/to/script/script.sh &'",
        "ul_637855: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "update-rc.d",
      "MP Summary": "install and remove System-V style init script links",
      "Most Similar TLDR Task": "Install a service",
      "Most Similar TLDR Script": "update-rc.d {{mysql}} defaults",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_22712080: How to run Java application on startup of Ubuntu Linux",
        "ul_83155: adding a program on start-up by using LSBInitScripts",
        "ul_13: Stop program running at startup in Linux"
      ],
      "Top-3 Scripts": [
        "so_22712080: sudo update-rc.d mytestserv defaults",
        "ul_83155: ",
        "ul_13: sudo update-rc.d -f apache2 remove"
      ],
      "Explanations about Options": {
        "-f": "Force removal of symlinks even if /etc/init.d/name still exists."
      }
    },
    {
      "Command": "sudo",
      "MP Summary": "execute a command as another user",
      "Most Similar TLDR Task": "Run a command as another user and/or group",
      "Most Similar TLDR Script": "sudo -u {{user}} -g {{group}} {{id -a}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_978847: Start service autamatically on startup at Ubuntu",
        "so_5573592: How to run script on startup of a Fedora 14 machine",
        "so_22712080: How to run Java application on startup of Ubuntu Linux"
      ],
      "Top-3 Scripts": [
        "au_978847: sudo systemctl enable NetworkManager.service",
        "so_5573592: sudo(8)",
        "so_22712080: sudo update-rc.d mytestserv defaults"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "systemctl",
      "MP Summary": "Control the systemd system and service manager",
      "Most Similar TLDR Task": "Enable/Disable a unit to be started on bootup",
      "Most Similar TLDR Script": "systemctl enable/disable {{unit}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_978847: Start service autamatically on startup at Ubuntu",
        "ul_371565: configure Unix apache Web server to automatically start on reboot?",
        "su_946946: running python program on startup in tty4"
      ],
      "Top-3 Scripts": [
        "au_978847: sudo systemctl enable NetworkManager.service",
        "ul_371565: sudo systemctl enable httpd\n\nsudo systemctl start httpd",
        "su_946946: systemctl status getty@tty4.service\nsudo systemctl stop getty@tty4.service\nsudo systemctl disable getty@tty4.service\n\nsudo systemctl enable mystuff.service\nsudo systemctl daemon-reload\n\nsudo systemctl start mystuff.service\nsystemctl status mystuff.service"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "gnome-terminal",
      "MP Summary": "is a terminal emulation application.",
      "Most Similar TLDR Task": "Run a specific command in a new terminal window",
      "Most Similar TLDR Script": "gnome-terminal -- {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_179701: Running a program (command) on terminal after login screen in Ubuntu 14.04",
        "so_63954825: How to start python program with a terminal window on ubuntu startup",
        "ul_3850: How to run commands automatically on gnome-terminal after log-in?"
      ],
      "Top-3 Scripts": [
        "ul_179701: gnome-terminal -e \"bash -c 'watch sensors'\"\ngnome-terminal -e \"bash -c 'gedit /etc/hostname'\"\ngnome-terminal -e \"bash -c 'processing /home/Desktop/samudra_gui/samudra_gui.pde'\"",
        "so_63954825: gnome-terminal -- python3 path/to/app",
        "ul_3850: gnome-terminal --tab-with-profile=Dev"
      ],
      "Explanations about Options": {
        "-e": "Execute the argument to this option inside the terminal.",
        "--tab-with-profile": "Open a tab in the window with the given profile. More than one of these options\n can be provided, to open several tabs ."
      }
    },
    {
      "Command": "exec",
      "MP Summary": "execute commands and open, close, or copy file descriptors",
      "Most Similar TLDR Task": "Replace with the specified command and login using the default shell",
      "Most Similar TLDR Script": "exec -l {{command -with -flags}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_7247543: Restarting program automatically on crash in OSX",
        "ul_305193: run GUI application on startup after network is up"
      ],
      "Top-3 Scripts": [
        "so_7247543: #!/bin/bash\n\n~/ProgramDir/Program || exec \"$0\"",
        "ul_305193: until ip link show $interface | grep -F -q \"state UP\"; do\n    sleep 10 # wait every ten second\ndone\n# interface is up, now start program\nexec bla"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "parallel",
      "MP Summary": "run programs in parallel",
      "Most Similar TLDR Task": "Run on multiple machines via SSH",
      "Most Similar TLDR Script": "parallel -S {{machine1}},{{machine2}} {{command}} ::: {{arg1}} {{arg2}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_547526: How to create a directory in /var/run on startup?",
        "ul_426126: Run C++ program across computer on network"
      ],
      "Top-3 Scripts": [
        "au_547526: ",
        "ul_426126: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "crontab",
      "MP Summary": "maintain crontab files for individual users (Vixie Cron)",
      "Most Similar TLDR Task": "Sample job which runs every minute on the 3rd of April",
      "Most Similar TLDR Script": "* * 3 Apr * {{command_to_execute}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_5573592: How to run script on startup of a Fedora 14 machine",
        "so_40049450: Running a program in linux (debian) on startup",
        "au_872532: How to launch startup program on specific time"
      ],
      "Top-3 Scripts": [
        "so_5573592: crontab(5)",
        "so_40049450: crontab -e",
        "au_872532: crontab -e"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "env",
      "MP Summary": "run a program in a modified environment",
      "Most Similar TLDR Task": "Remove variable from the environment and run a program",
      "Most Similar TLDR Script": "env -u {{variable}} {{program}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_35646: Linux program running on Ubuntu machine but not on Unix webserver"
      ],
      "Top-3 Scripts": [
        "ul_35646: /usr/bin/env\n\n#!/bin/sh\n. /etc/profile\n\n/usr/bin/env\npwd\n./words 2>&1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sh",
      "MP Summary": "MirBSD Korn shell",
      "Most Similar TLDR Task": "Execute a command",
      "Most Similar TLDR Script": "sh -c {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_3850: How to run commands automatically on gnome-terminal after log-in?",
        "au_823050: Run Script on startup on AWS Ec2 Ubuntu 1404 Server"
      ],
      "Top-3 Scripts": [
        "ul_3850: sh -c \"ENV=$HOME/.dev_profile sh\"",
        "au_823050: "
      ],
      "Explanations about Options": {
        "-c": "Impose a size limit of n blocks on the size of core dumps."
      }
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the specified exit code",
      "Most Similar TLDR Script": "exit {{exit_code}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_421662: Linux script not running on start up",
        "au_515989: How do I run terminal code on startup and running VPN on startup?"
      ],
      "Top-3 Scripts": [
        "ul_421662: ",
        "au_515989: sudo sed -i 's/^exit 0/# &/' /etc/rc.local\nsudo tee -a /etc/rc.local <<EOF\necho -n 0 > /sys/module/video/parameters/brightness_switch_enabled\nexit 0\nEOF\n\nexit 0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "modprobe",
      "MP Summary": "Add and remove modules from the Linux Kernel",
      "Most Similar TLDR Task": "Load a module into the kernel",
      "Most Similar TLDR Script": "sudo modprobe {{module_name}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_547526: How to create a directory in /var/run on startup?",
        "so_35345837: Run script on Linux startup as late as possible"
      ],
      "Top-3 Scripts": [
        "au_547526: ",
        "so_35345837: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "script",
      "MP Summary": "make typescript of terminal session",
      "Most Similar TLDR Task": "Record a new session to a file named `typescript` in the current directory",
      "Most Similar TLDR Script": "script",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup",
        "au_547526: How to create a directory in /var/run on startup?",
        "so_18188192: Run a bash script on startup, before login as a user"
      ],
      "Top-3 Scripts": [
        "au_1369461: [Desktop Entry]\nType=Application\nName=Anti Midmouse Paste\nExec=\"/path/to/the/script/anti-midmouse-paste.sh\" \"--no-window\"\nX-GNOME-Autostart-enabled=true",
        "au_547526: ",
        "so_18188192: su minecraft -c '/bin/bash /path/to/script/script.sh &'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "tee",
      "MP Summary": "read from standard input and write to standard output and files",
      "Most Similar TLDR Task": "Print standard input to the terminal, and also pipe it into another program for further processing",
      "Most Similar TLDR Script": "echo \"example\" | tee {{/dev/tty}} | {{xargs printf \"[%s]\"}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_899820: Startup with GUI on Ubuntu 16.04",
        "au_515989: How do I run terminal code on startup and running VPN on startup?"
      ],
      "Top-3 Scripts": [
        "au_899820: echo \"/usr/sbin/lightdm\" | sudo tee /etc/X11/default-display-manager > /dev/null",
        "au_515989: sudo sed -i 's/^exit 0/# &/' /etc/rc.local\nsudo tee -a /etc/rc.local <<EOF\necho -n 0 > /sys/module/video/parameters/brightness_switch_enabled\nexit 0\nEOF"
      ],
      "Explanations about Options": {
        "-a": "append to the given FILEs, do not overwrite"
      }
    },
    {
      "Command": "chmod",
      "MP Summary": "change file mode bits",
      "Most Similar TLDR Task": "Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite",
      "Most Similar TLDR Script": "chmod -R g+w,o+w {{directory}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_458227: How to run Bash script on startup on Linux?",
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup",
        "au_187935: How to run a bash script in terminal but hide the terminal on startup?"
      ],
      "Top-3 Scripts": [
        "ul_458227: chmod +x /etc/rc.local",
        "au_1369461: chmod +x /path/to/file/anti-midmouse-paste.sh",
        "au_187935: chmod u+x /path/to/your/script.sh"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sleep",
      "MP Summary": "delay for a specified amount of time",
      "Most Similar TLDR Task": "Delay in minutes",
      "Most Similar TLDR Script": "sleep {{minutes}}m",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup",
        "ul_235118: How to delay a service startup on boot in Debian?",
        "ul_280917: How to delay a program from starting on boot up - Xubuntu"
      ],
      "Top-3 Scripts": [
        "au_1369461: #!/bin/bash\n\nwhile(true)\ndo\n    echo -n | xsel -n -i\n    sleep 0.5\ndone\n\nsleep 0.5",
        "ul_235118: mount | grep -q /path/to/USB/stick/mountpoint || sleep 1m",
        "ul_280917: #!/bin/sh\nprogram1 &\nsleep 5\nprogram2 &\nsleep 5\nprogram3 &"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "apt-get",
      "MP Summary": "APT package handling utility - command-line interface",
      "Most Similar TLDR Task": "Update the list of available packages and versions (it's recommended to run this before other `apt-get` commands)",
      "Most Similar TLDR Script": "apt-get update",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup"
      ],
      "Top-3 Scripts": [
        "au_1369461: sudo apt-get install xsel"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Append a message to the file",
      "Most Similar TLDR Script": "echo \"{{Hello World}}\" >> {{file.txt}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_458227: How to run Bash script on startup on Linux?",
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup",
        "so_56099657: How to run a command on startup for ubuntu server 18.04?"
      ],
      "Top-3 Scripts": [
        "ul_458227: $ cat /etc/rc.local\n#!/bin/bash\ntouch /var/lock/subsys/local\necho \"hickory stick\"\n\n$ cat /etc/rc.local\n#!/bin/bash\ntouch /var/lock/subsys/local\necho \"hickory stick\" | logger",
        "au_1369461: #!/bin/bash\n\nwhile(true)\ndo\n    echo -n | xsel -n -i\n    sleep 0.5\ndone",
        "so_56099657: /bin/echo hello > /home/ubuntu/test.log"
      ],
      "Explanations about Options": {
        "-n": "do not output the trailing newline"
      }
    },
    {
      "Command": "ssh",
      "MP Summary": "OpenSSH SSH client (remote login program)",
      "Most Similar TLDR Task": "Run a command on a remote server",
      "Most Similar TLDR Script": "ssh {{remote_host}} {{command -with -flags}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_547526: How to create a directory in /var/run on startup?"
      ],
      "Top-3 Scripts": [
        "au_547526: /etc/init.d/ssh\n/etc/init.d/bind9\n/etc/init/dbus.conf\n/etc/init/ssh.conf\n/etc/init/cups.conf"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "su",
      "MP Summary": "run a command with substitute user and group ID",
      "Most Similar TLDR Task": "Execute a command as another user",
      "Most Similar TLDR Script": "su - {{username}} -c \"{{command}}\"",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_18188192: Run a bash script on startup, before login as a user"
      ],
      "Top-3 Scripts": [
        "so_18188192: su minecraft -c '/bin/bash /path/to/script/script.sh &'\n\nsu -l minecraft"
      ],
      "Explanations about Options": {
        "-l": "Start the shell as a login shell with an environment similar to a real login:"
      }
    },
    {
      "Command": "nohup",
      "MP Summary": "run a command immune to hangups, with output to a non-tty",
      "Most Similar TLDR Task": "Run process that can live beyond the terminal",
      "Most Similar TLDR Script": "nohup {{command options}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_823050: Run Script on startup on AWS Ec2 Ubuntu 1404 Server"
      ],
      "Top-3 Scripts": [
        "au_823050: /usr/bin/nohup\n\n#!/bin/sh\nexport PATH=\"$PATH\":/usr/bin\nnohup /home/ubuntu/elasticsearch-2.3.4/bin/elasticsearch &\n\n#!/bin/sh\n/usr/bin/nohup /home/ubuntu/elasticsearch-2.3.4/bin/elasticsearch &"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "logger",
      "MP Summary": "enter messages into the system log",
      "Most Similar TLDR Task": "Log a message to syslog",
      "Most Similar TLDR Script": "logger {{message}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_458227: How to run Bash script on startup on Linux?"
      ],
      "Top-3 Scripts": [
        "ul_458227: $ logger hi\n\n$ journalctl -xef\nJul 24 20:23:04 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=man logger\nJul 24 20:23:24 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=logger hi\nJul 24 20:23:24 centos7 vagrant[1811]: hi\n\n$ cat /etc/rc.local\n#!/bin/bash\ntouch /var/lock/subsys/local\necho \"hickory stick\" | logger\n\n$ logger -t \"smurfs\" hi\n$ journalctl -xe | grep smurfs\nJul 24 20:38:24 centos7 smurfs[1764]: hi"
      ],
      "Explanations about Options": {
        "-t": "Mark every line to be logged with the specified tag. The default tag is the name\n of the user logged in on the terminal (or a user name based on effective user ID)."
      }
    },
    {
      "Command": "hello",
      "MP Summary": "friendly greeting program",
      "Most Similar TLDR Task": "Print a text message",
      "Most Similar TLDR Script": "hello --greeting=\"{{greeting_text}}\"",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_56099657: How to run a command on startup for ubuntu server 18.04?",
        "so_44267711: Run program on boot with initramfs"
      ],
      "Top-3 Scripts": [
        "so_56099657: /bin/echo hello > /home/ubuntu/test.log",
        "so_44267711: file /bin/hello ${INSTALL_ROOT}/projects/${SAMPLE}/goodbye/hello 755 0 0\nslink /bin/init hello 777 0 0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mount",
      "MP Summary": "mount a filesystem",
      "Most Similar TLDR Task": "Mount a directory to another directory",
      "Most Similar TLDR Script": "mount --bind {{path/to/old_dir}} {{path/to/new_dir}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_235118: How to delay a service startup on boot in Debian?",
        "so_59959090: How to mount Windows folders in WSL automatically on startup"
      ],
      "Top-3 Scripts": [
        "ul_235118: mount | grep -q /path/to/USB/stick/mountpoint || sleep 1m",
        "so_59959090: # <file system> <dir> <type> <options> <dump> <pass>\nC: /mnt/c drvfs rw,noatime,uid=1000,gid=1000,case=off,umask=0027,fmask=0137, 0 0\n/mnt/c/directory/for/mount /where/to/mount none bind,default 0 0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "export",
      "MP Summary": "set the export attribute for variables",
      "Most Similar TLDR Task": "Set a new environment variable",
      "Most Similar TLDR Script": "export {{VARIABLE}}={{value}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_872532: How to launch startup program on specific time",
        "au_823050: Run Script on startup on AWS Ec2 Ubuntu 1404 Server"
      ],
      "Top-3 Scripts": [
        "au_872532: ",
        "au_823050: #!/bin/sh\nexport PATH=\"$PATH\":/usr/bin\nnohup /home/ubuntu/elasticsearch-2.3.4/bin/elasticsearch &"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "true",
      "MP Summary": "do nothing, successfully",
      "Most Similar TLDR Task": "Return a successful exit code",
      "Most Similar TLDR Script": "true",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup",
        "au_547526: How to create a directory in /var/run on startup?"
      ],
      "Top-3 Scripts": [
        "au_1369461: [Desktop Entry]\nType=Application\nName=Anti Midmouse Paste\nExec=\"/path/to/the/script/anti-midmouse-paste.sh\" \"--no-window\"\nX-GNOME-Autostart-enabled=true",
        "au_547526: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Most Similar TLDR Task": "Look inside a zipped file and determine the file type(s) inside",
      "Most Similar TLDR Script": "file -z {{foo.zip}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup",
        "so_44267711: Run program on boot with initramfs"
      ],
      "Top-3 Scripts": [
        "au_1369461: chmod +x /path/to/file/anti-midmouse-paste.sh",
        "so_44267711: file /bin/hello ${INSTALL_ROOT}/projects/${SAMPLE}/goodbye/hello 755 0 0\nslink /bin/init hello 777 0 0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "journalctl",
      "MP Summary": "Query the systemd journal",
      "Most Similar TLDR Task": "Show all messages by a specific process",
      "Most Similar TLDR Script": "journalctl _PID={{pid}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_458227: How to run Bash script on startup on Linux?"
      ],
      "Top-3 Scripts": [
        "ul_458227: $ journalctl -xef\nJul 24 20:23:04 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=man logger\nJul 24 20:23:24 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=logger hi\nJul 24 20:23:24 centos7 vagrant[1811]: hi\n\n$ journalctl -xef\n...\nJul 24 20:31:41 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=journalctl -xe\nJul 24 22:24:00 centos7 logger[1286]: hickory stick\nJul 24 22:24:00 centos7 sshd[1270]: Server listening on 0.0.0.0 port 22.\nJul 24 22:24:00 centos7 sshd[1270]: Server listening on :: port 22.\nJul 24 22:24:00 centos7 systemd[1]: Starting Permit User Sessions...\n\n$ logger -t \"smurfs\" hi\n$ journalctl -xe | grep smurfs\nJul 24 20:38:24 centos7 smurfs[1764]: hi"
      ],
      "Explanations about Options": {
        "-e": "Immediately jump to the end of the journal inside the implied pager tool. This implies\n -n1000 to guarantee that the pager will not buffer logs of unbounded size. This may be\n overridden with an explicit -n with some other numeric value, while -nall will disable\n this cap. Note that this option is only supported for the less(1) pager."
      }
    },
    {
      "Command": "wait",
      "MP Summary": "await process completion",
      "Most Similar TLDR Task": "Wait for a process to finish given its process ID (PID) and return its exit status",
      "Most Similar TLDR Script": "wait {{pid}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_305193: run GUI application on startup after network is up"
      ],
      "Top-3 Scripts": [
        "ul_305193: until ip link show $interface | grep -F -q \"state UP\"; do\n    sleep 10 # wait every ten second\ndone\n# interface is up, now start program\nexec bla"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "dash",
      "MP Summary": "command interpreter (shell)",
      "Most Similar TLDR Task": "Run commands from a file, logging all commands executed to the terminal",
      "Most Similar TLDR Script": "dash -x {{file.sh}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_823050: Run Script on startup on AWS Ec2 Ubuntu 1404 Server"
      ],
      "Top-3 Scripts": [
        "au_823050: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "killall",
      "MP Summary": "kill processes by name",
      "Most Similar TLDR Task": "Force kill a process",
      "Most Similar TLDR Script": "killall -KILL {{process_name}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_872532: How to launch startup program on specific time"
      ],
      "Top-3 Scripts": [
        "au_872532: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "shutdown",
      "MP Summary": "Halt, power-off or reboot the machine",
      "Most Similar TLDR Task": "Reboot immediately",
      "Most Similar TLDR Script": "shutdown -r now",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_959915: Ubuntu blocked on startup due to never ending script on startup"
      ],
      "Top-3 Scripts": [
        "au_959915: sudo shutdown -r now"
      ],
      "Explanations about Options": {
        "-r": "Reboot the machine."
      }
    },
    {
      "Command": "screen",
      "MP Summary": "screen manager with VT100/ANSI terminal emulation",
      "Most Similar TLDR Task": "Detach from inside a screen",
      "Most Similar TLDR Script": "Ctrl + A, D",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_1424731: Starting a screen session on startup with ubuntu"
      ],
      "Top-3 Scripts": [
        "so_1424731: screen -ls\n\nscreen -r"
      ],
      "Explanations about Options": {
        "-r": " resumes a detached screen session. No other options (except combinations with -d/-D)\n may be specified, though an optional prefix of [pid.]tty.host may be needed to\n distinguish between multiple detached screen sessions. The second form is used to\n connect to another user's screen session which runs in multiuser mode. This indicates\n that screen should look for sessions in another user's directory. This requires\n setuid-root."
      }
    },
    {
      "Command": "module",
      "MP Summary": "command interface to the Modules package",
      "Most Similar TLDR Task": "Unload a specific loaded module",
      "Most Similar TLDR Script": "module {{module_name}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_515989: How do I run terminal code on startup and running VPN on startup?"
      ],
      "Top-3 Scripts": [
        "au_515989: echo -n 0 > /sys/module/video/parameters/brightness_switch_enabled\n\nsudo sed -i 's/^exit 0/# &/' /etc/rc.local\nsudo tee -a /etc/rc.local <<EOF\necho -n 0 > /sys/module/video/parameters/brightness_switch_enabled\nexit 0\nEOF"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "gedit",
      "MP Summary": "text editor for the GNOME Desktop",
      "Most Similar TLDR Task": "Open a text file with a specific encoding",
      "Most Similar TLDR Script": "gedit --encoding={{UTF-8}} {{path/to/file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_872532: How to launch startup program on specific time"
      ],
      "Top-3 Scripts": [
        "au_872532: sudo mkdir -p /opt/flux/\nsudo gedit /opt/flux/toogleFlux.sh"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "python",
      "MP Summary": "an interpreted, interactive, object-oriented programming language",
      "Most Similar TLDR Task": "Run library module as a script (terminates option list)",
      "Most Similar TLDR Script": "python -m {{module}} {{arguments}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_946946: running python program on startup in tty4"
      ],
      "Top-3 Scripts": [
        "su_946946: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "at",
      "MP Summary": "queue, examine, or delete jobs for later execution",
      "Most Similar TLDR Task": "Execute a script at the given time",
      "Most Similar TLDR Script": "at {{hh:mm}} -f {{path/to/file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_21694771: C program to dump stack of running process on linux"
      ],
      "Top-3 Scripts": [
        "so_21694771: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "install",
      "MP Summary": "copy files and set attributes",
      "Most Similar TLDR Task": "Copy files and apply access/modification times of source to destination",
      "Most Similar TLDR Script": "install -p {{path/to/source}} {{path/to/destination}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup"
      ],
      "Top-3 Scripts": [
        "au_1369461: sudo apt-get install xsel"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "touch",
      "MP Summary": "change file timestamps",
      "Most Similar TLDR Task": "Create a new empty file(s) or change the times for existing file(s) to current time",
      "Most Similar TLDR Script": "touch {{filename}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_458227: How to run Bash script on startup on Linux?"
      ],
      "Top-3 Scripts": [
        "ul_458227: $ cat /etc/rc.local\n#!/bin/bash\ntouch /var/lock/subsys/local\necho \"hickory stick\"\n\n$ cat /etc/rc.local\n#!/bin/bash\ntouch /var/lock/subsys/local\necho \"hickory stick\" | logger"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ping",
      "MP Summary": "send ICMP ECHO_REQUEST to network hosts",
      "Most Similar TLDR Task": "Also display a message if no response was received",
      "Most Similar TLDR Script": "ping -O {{host}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_305193: run GUI application on startup after network is up"
      ],
      "Top-3 Scripts": [
        "ul_305193: ping -W 2 -c 1 google.com >& /dev/null"
      ],
      "Explanations about Options": {
        "-c": "Stop after sending count ECHO_REQUEST packets. With deadline option, ping waits for\n count ECHO_REPLY packets, until the timeout expires.",
        "-W": "Time to wait for a response, in seconds. The option affects only timeout in absence of\n any responses, otherwise ping waits for two RTTs."
      }
    },
    {
      "Command": "date",
      "MP Summary": "print or set the system date and time",
      "Most Similar TLDR Task": "Display a specific date (represented as a Unix timestamp) using the default format",
      "Most Similar TLDR Script": "date -d @1473305798",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_872532: How to launch startup program on specific time"
      ],
      "Top-3 Scripts": [
        "au_872532: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "link",
      "MP Summary": "call the link function to create a link to a file",
      "Most Similar TLDR Task": "Create a hard link from a new file to an existing file",
      "Most Similar TLDR Script": "link {{path/to/existing_file}} {{path/to/new_file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_305193: run GUI application on startup after network is up"
      ],
      "Top-3 Scripts": [
        "ul_305193: until ip link show $interface | grep -F -q \"state UP\"; do\n    sleep 10 # wait every ten second\ndone\n# interface is up, now start program\nexec bla\n\nip link show $interface"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "xsel",
      "MP Summary": "manipulate the X selection.",
      "Most Similar TLDR Task": "Output the X11 primary selection's contents into the terminal (equivalent to a mouse middle-click)",
      "Most Similar TLDR Script": "xsel -op",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1369461: How to disable Middle Mouse Paste on Ubuntu automatically on startup"
      ],
      "Top-3 Scripts": [
        "au_1369461: sudo apt-get install xsel\n\n#!/bin/bash\n\nwhile(true)\ndo\n    echo -n | xsel -n -i\n    sleep 0.5\ndone"
      ],
      "Explanations about Options": {
        "-i": "read standard input into the selection.",
        "-n": "Do not detach from the controlling terminal. Without this option, xsel will fork to\n become a background process in input, exchange and keep modes."
      }
    },
    {
      "Command": "nano",
      "MP Summary": "Nano's ANOther editor, inspired by Pico",
      "Most Similar TLDR Task": "Open a specific file",
      "Most Similar TLDR Script": "nano {{path/to/file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_421662: Linux script not running on start up"
      ],
      "Top-3 Scripts": [
        "ul_421662: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ip",
      "MP Summary": "show / manipulate routing, network devices, interfaces and tunnels",
      "Most Similar TLDR Task": "Add/Delete an ip address to an interface",
      "Most Similar TLDR Script": "ip addr add/del {{ip}}/{{mask}} dev {{interface}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_305193: run GUI application on startup after network is up"
      ],
      "Top-3 Scripts": [
        "ul_305193: until ip link show $interface | grep -F -q \"state UP\"; do\n    sleep 10 # wait every ten second\ndone\n# interface is up, now start program\nexec bla\n\nip link show $interface\n\nip \u2026 | grep"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "opt",
      "MP Summary": "LLVM optimizer",
      "Most Similar TLDR Task": "Optimize the program at level 2 and output the result to another file",
      "Most Similar TLDR Script": "opt -O2 {{path/to/file.bc}} -S -o {{path/to/output_file.bc}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_872532: How to launch startup program on specific time"
      ],
      "Top-3 Scripts": [
        "au_872532: sudo mkdir -p /opt/flux/\nsudo gedit /opt/flux/toogleFlux.sh\n\nsudo chmod +x /opt/flux/toogleFlux.sh\n\n05 20 * * * /opt/flux/toogleFlux.sh\n05 3 * * * /opt/flux/toogleFlux.sh\n\nxhost +local:\n/opt/flux/toogleFlux.sh"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Replace separator / by any other character not used in the find or replace patterns, e.g., #",
      "Most Similar TLDR Script": "sed 's#{{find}}#{{replace}}#' {{filename}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_515989: How do I run terminal code on startup and running VPN on startup?"
      ],
      "Top-3 Scripts": [
        "au_515989: sudo sed -i 's/^exit 0/# &/' /etc/rc.local\nsudo tee -a /etc/rc.local <<EOF\necho -n 0 > /sys/module/video/parameters/brightness_switch_enabled\nexit 0\nEOF"
      ],
      "Explanations about Options": {
        "-i": "edit files in place (makes backup if SUFFIX supplied)"
      }
    },
    {
      "Command": "pwd",
      "MP Summary": "print name of current/working directory",
      "Most Similar TLDR Task": "Print the current directory, and resolve all symlinks (i.e. show the \"physical\" path)",
      "Most Similar TLDR Script": "pwd -P",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_35646: Linux program running on Ubuntu machine but not on Unix webserver"
      ],
      "Top-3 Scripts": [
        "ul_35646: #!/bin/sh\n. /etc/profile\n\n/usr/bin/env\npwd\n./words 2>&1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "read",
      "MP Summary": "read a line from standard input",
      "Most Similar TLDR Task": "Enable backspace and GNU readline hotkeys when entering input with read",
      "Most Similar TLDR Script": "read -e {{variable}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_21694771: C program to dump stack of running process on linux"
      ],
      "Top-3 Scripts": [
        "so_21694771: read()"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "man",
      "MP Summary": "an interface to the system reference manuals",
      "Most Similar TLDR Task": "Display the location of a manpage rather than the manpage itself",
      "Most Similar TLDR Script": "man -w {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_458227: How to run Bash script on startup on Linux?"
      ],
      "Top-3 Scripts": [
        "ul_458227: $ journalctl -xef\nJul 24 20:23:04 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=man logger\nJul 24 20:23:24 centos7 bash[1629]: HISTORY: PID=1629 UID=0 USER=root CMD=logger hi\nJul 24 20:23:24 centos7 vagrant[1811]: hi"
      ],
      "Explanations about Options": {}
    }
  ]
}