{
  "Query": "How to get lines 10 to 100 from a 200 line file into a new file",
  "Answers": [
    {
      "Command": "wc",
      "MP Summary": "print newline, word, and byte counts for each file",
      "Most Similar TLDR Task": "Count lines in file",
      "Most Similar TLDR Script": "wc -l {{file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_40689719: Get the line count from 2nd line of the file",
        "so_39598792: How do I grab the first 10% of lines in a text file?",
        "nl2bash_10111: Prints the size in kb of the first 100 lines of a file"
      ],
      "Top-3 Scripts": [
        "so_40689719: tail -n +2 file | wc -l",
        "so_39598792: head -n $(( $(wc -l < file) / 10 )) file",
        "nl2bash_10111: echo `cat $FILE | head -n 100 | wc -c` / 1024 | bc -l"
      ],
      "Explanations about Options": {
        "-l": "print the newline counts"
      }
    },
    {
      "Command": "cat",
      "MP Summary": "concatenate files and print on the standard output",
      "Most Similar TLDR Task": "Number all output lines",
      "Most Similar TLDR Script": "cat -n {{file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9501: Print every 4th line from 10 lines of \"y\" with line numbers",
        "so_51208311: How can I get output of 2 files with no-duplicates of lines [from any file]?",
        "so_801004: Move top 1000 lines from text file to a new file using Unix shell commands"
      ],
      "Top-3 Scripts": [
        "nl2bash_9501: yes | cat -n | head -10 | awk 'NR % 4 == 1'",
        "so_51208311: cat <(sort -u file1) <(sort -u file2)",
        "so_801004: "
      ],
      "Explanations about Options": {
        "-n": "number all output lines"
      }
    },
    {
      "Command": "head",
      "MP Summary": "output the first part of files",
      "Most Similar TLDR Task": "Output the first few lines of a file",
      "Most Similar TLDR Script": "head -n {{count_of_lines}} {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_10239: Write 200 lines of \"this is the text I want to add to a file\" to myFile.txt",
        "nl2bash_9501: Print every 4th line from 10 lines of \"y\" with line numbers",
        "nl2bash_4497: Find all the files in entire file system  which are modified more than 50 days back and less than 100 days and show a few lines of output from the beginning"
      ],
      "Top-3 Scripts": [
        "nl2bash_10239: yes \"this is the text I want to add to a file\"|head -200>myFile.txt",
        "nl2bash_9501: yes | cat -n | head -10 | awk 'NR % 4 == 1'",
        "nl2bash_4497: find / -mtime +50 -mtime -100 | head"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "cut",
      "MP Summary": "remove sections from each line of files",
      "Most Similar TLDR Task": "Cut out the fields 3 through to the end of each line, using a space as a delimiter",
      "Most Similar TLDR Script": "cut -d'{{ }}' -f{{3-}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9584: Print new line separated numbers from \"001\" to \"100\"",
        "so_30667458: Write first 10 characters of each line to new file using bash"
      ],
      "Top-3 Scripts": [
        "nl2bash_9584: yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6",
        "so_30667458: $ cut -c-10 file\n@MSQ-M0124\nCCCCCTCTTC\n+\n##########"
      ],
      "Explanations about Options": {
        "-b": "select only these bytes"
      }
    },
    {
      "Command": "line",
      "MP Summary": "cache line size",
      "Most Similar TLDR Task": "Read input",
      "Most Similar TLDR Script": "line",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_31853041: Bash get lines from text file by reading line numbers from another file",
        "so_36662883: Read lines from text file and if a specific word == 100, print the line",
        "so_7957361: how to read line by line from file in bash script?"
      ],
      "Top-3 Scripts": [
        "so_31853041: for line in `cat lines.txt`\ndo\n  sed -n \"${line}p\" text.txt\ndone",
        "so_36662883: with open(\"file.txt\", \"r\") as f:\n    for line in f.readlines():\n        if float(line.split(\"=\")[1]) == 3.878:\n            print line\n\nline = \"rt=3.878\"\nprint line.split(\"=\")[0] # rt\nprint line.split(\"=\")[1] # 3.878\nprint type(line.split(\"=\")[1]) # type 'str'\nprint type(float(line.split(\"=\")[1])) # type 'float'\n\nwith open(\"file.txt\", \"r\") as f:\n    for line in f.readlines():\n        if line.split(\"=\")[0] == \"rt\":\n            if float(line.split(\"=\")[1]) == 3.878:\n                print line",
        "so_7957361: while IFS= read line ; do\n   something \"$line\"\ndone <\"$file\"\n\nwhile IFS= read line ; do echo \"$line\"; done <<<\"$(echo -e \"a b\\nc d\")\"\na b\nc d"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "tail",
      "MP Summary": "output the last part of files",
      "Most Similar TLDR Task": "Show last 'num' lines in 'file' and refresh every 'n' seconds",
      "Most Similar TLDR Script": "tail -n {{num}} -s {{n}} -f {{file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_40689719: Get the line count from 2nd line of the file",
        "nl2bash_9837: Print the last 10 lines of '/var/log/syslog', printing out any additional data appended to the file",
        "so_29391363: Cut 13*10^6 lines from file"
      ],
      "Top-3 Scripts": [
        "so_40689719: tail -n +2 file | wc -l",
        "nl2bash_9837: tail -f /var/log/syslog",
        "so_29391363: tail -n +13000000 < file_in > file_out"
      ],
      "Explanations about Options": {
        "-f": "output appended data as the file grows;",
        "-n": "output the last NUM lines, instead of the last 10; or use -n +NUM to output\n starting with line NUM"
      }
    },
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Most Similar TLDR Task": "Print file name with the corresponding line number for each match",
      "Most Similar TLDR Script": "grep -Hn {{search_pattern}} {{path/to/file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_487764: How can I add 10 lines from a file (file2) to another one after 2 lines (file1)?",
        "nl2bash_9332: Print a single line of numbers from \"001\" to \"100\"",
        "ul_479679: How can I use grep in a loop and add new line of text each time to the same file?"
      ],
      "Top-3 Scripts": [
        "ul_487764: # how many times we need to insert blocks\ntimes=$(grep -c transcr_ file1)\nfor((index=1;index <= times; index++));\ndo\n  printf \"%dr !sed -n %d,%dp file2\\nw\\nq\\n\" $((12 * index - 10)) $((10 * index - 9)) $(( 10 * index ))  |\n    ed -s file1\ndone",
        "nl2bash_9332: yes | grep y | sed 100q | awk '{printf( \"%03d \", NR )}'; echo",
        "ul_479679: command | grep sth >> test.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "split",
      "MP Summary": "split a file into pieces",
      "Most Similar TLDR Task": "Split a file, each split having 10 lines (except the last split)",
      "Most Similar TLDR Script": "split -l {{10}} {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_63208951: How to extract an unknown number of lines from a file and generate a new file for each?",
        "so_36662883: Read lines from text file and if a specific word == 100, print the line",
        "nl2bash_15315: Split \"date.csv\" into files with at most 100 lines each"
      ],
      "Top-3 Scripts": [
        "so_63208951: $ split --lines=1 --numeric-suffixes=1 --suffix-length=5 --additional-suffix=.txt File_1 File_1.",
        "so_36662883: ",
        "nl2bash_15315: split -l 100 date.csv"
      ],
      "Explanations about Options": {
        "--lines": "put NUMBER lines/records per output file",
        "--additional-suffix": "append an additional SUFFIX to file names",
        "--suffix-length": "generate suffixes of length N (default 2)",
        "-l": "put NUMBER lines/records per output file",
        "--numeric-suffixes": "same as -d, but allow setting the start value"
      }
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Append a message to the file",
      "Most Similar TLDR Script": "echo \"{{Hello World}}\" >> {{file.txt}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_35308692: Print numbers 1 to 100 in 10 columns",
        "so_48947202: Print top 100 lines to a file",
        "nl2bash_9332: Print a single line of numbers from \"001\" to \"100\""
      ],
      "Top-3 Scripts": [
        "so_35308692: for ((i=1;i<=10;i++)); do\n    for ((j=i;j<=(i+90);j+=10)); do\n        printf \"%2d  \" $j\n    done\n    echo\ndone\n\nfor ((i=0;i<10;i++)); do\n    for ((j=1;j<=10;j++)); do\n        printf \"%2d  \" $[$i*10+$j]\n    done\n    echo\ndone",
        "so_48947202: ",
        "nl2bash_9332: yes | grep y | sed 100q | awk '{printf( \"%03d \", NR )}'; echo"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort the passwd file by the 3rd field, numerically",
      "Most Similar TLDR Script": "sort -t: -k 3n /etc/passwd",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_39598792: How do I grab the first 10% of lines in a text file?",
        "so_51208311: How can I get output of 2 files with no-duplicates of lines [from any file]?",
        "ul_618119: How to get a line with a string from multiple files by file orders?"
      ],
      "Top-3 Scripts": [
        "so_39598792: sort -nk8 file | awk '{ a[NR] = $0 } END { \n  for (i = 1; i <= NR / 10; ++i) print a[i] \n}'",
        "so_51208311: sort -u file1; sort -u file2\n\ncat <(sort -u file1) <(sort -u file2)",
        "ul_618119: printf '%s\\0' File_* | sort -zV | xargs -r0 grep -h '^kgf' > Output_file\n\nsort -V"
      ],
      "Explanations about Options": {
        "-u": "with -c, check for strict ordering; without -c, output only the first of an equal\n run",
        "-V": "natural sort of (version) numbers within text"
      }
    },
    {
      "Command": "read",
      "MP Summary": "read a line from standard input",
      "Most Similar TLDR Task": "Store each of the next lines you enter as values of an array",
      "Most Similar TLDR Script": "read -a {{array}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_7957361: how to read line by line from file in bash script?",
        "ul_374957: Reading set of lines from a file",
        "so_30517554: Read line by line from two files simultaneously in shell script"
      ],
      "Top-3 Scripts": [
        "so_7957361: while IFS= read line ; do\n   something \"$line\"\ndone <\"$file\"\n\nwhile IFS= read line ; do echo \"$line\"; done <<<\"$(echo -e \"a b\\nc d\")\"\na b\nc d",
        "ul_374957: ",
        "so_30517554: while read range\ndo \n    sed -n \"${range}p\" file\ndone < <(paste -d, starting ending)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "seq",
      "MP Summary": "print a sequence of numbers",
      "Most Similar TLDR Task": "Every 3rd number from 5 to 20",
      "Most Similar TLDR Script": "seq 5 3 20",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_35308692: Print numbers 1 to 100 in 10 columns",
        "so_22385902: Get a list of lines from a file"
      ],
      "Top-3 Scripts": [
        "so_35308692: paste <(seq 1 10) <(seq 11 20) <(seq 21 30) <(seq 31 40) <(seq 41 50) <(seq 51 60) <(seq 61 70)  <(seq 71 80) <(seq 81 90) <(seq 91 100)\n\nseq 1 100 | paste - - - - - - - - - -",
        "so_22385902: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Most Similar TLDR Task": "Sum the values in the first column of a file and print the total",
      "Most Similar TLDR Script": "awk '{s+=$1} END {print s}' {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_220855: how to make awk print 3 items on the same line then switch to a new line",
        "nl2bash_9501: Print every 4th line from 10 lines of \"y\" with line numbers",
        "so_62904991: How to delete the last 3 lines of every 10 lines in a 100 line text file?"
      ],
      "Top-3 Scripts": [
        "ul_220855: $ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k 0k\n\nman awk\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%i, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508, 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36 9594508k 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36 9594508 0k",
        "nl2bash_9501: yes | cat -n | head -10 | awk 'NR % 4 == 1'",
        "so_62904991: awk '(NR - 1) % 10 < 7' file.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "paste",
      "MP Summary": "merge lines of files",
      "Most Similar TLDR Task": "Join all the lines into a single line, using TAB as delimiter",
      "Most Similar TLDR Script": "paste -s {{file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_35308692: Print numbers 1 to 100 in 10 columns",
        "so_30517554: Read line by line from two files simultaneously in shell script"
      ],
      "Top-3 Scripts": [
        "so_35308692: paste <(seq 1 10) <(seq 11 20) <(seq 21 30) <(seq 31 40) <(seq 41 50) <(seq 51 60) <(seq 61 70)  <(seq 71 80) <(seq 81 90) <(seq 91 100)\n\nseq 1 100 | paste - - - - - - - - - -",
        "so_30517554: $ paste -d, starting ending\n15,22\n30,35\n45,50\n\nwhile read range\ndo \n    sed -n \"${range}p\" file\ndone < <(paste -d, starting ending)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Most Similar TLDR Task": "Don't stop at first file type match; keep going until the end of the file",
      "Most Similar TLDR Script": "file -k {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_30667458: Write first 10 characters of each line to new file using bash",
        "so_40689719: Get the line count from 2nd line of the file",
        "so_39598792: How do I grab the first 10% of lines in a text file?"
      ],
      "Top-3 Scripts": [
        "so_30667458: $ cut -c-10 file\n@MSQ-M0124\nCCCCCTCTTC\n+\n##########",
        "so_40689719: tail -n +2 file | wc -l",
        "so_39598792: sort -nk8 file | awk '{ a[NR] = $0 } END { \n  for (i = 1; i <= NR / 10; ++i) print a[i] \n}'\n\nawk '{ a[NR] = $0 } END { \n  asort(a, b, \"@val_num_asc\"); for (i = 1; i <= NR / 10; ++i) print b[i] \n}' file\n\nhead -n $(( $(wc -l < file) / 10 )) file"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Print the first 11 lines of a file",
      "Most Similar TLDR Script": "sed 11q {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9584: Print new line separated numbers from \"001\" to \"100\"",
        "so_31853041: Bash get lines from text file by reading line numbers from another file",
        "ul_487764: How can I add 10 lines from a file (file2) to another one after 2 lines (file1)?"
      ],
      "Top-3 Scripts": [
        "nl2bash_9584: yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6",
        "so_31853041: for line in `cat lines.txt`\ndo\n  sed -n \"${line}p\" text.txt\ndone",
        "ul_487764: sed -i '3e head -10 file2' file1"
      ],
      "Explanations about Options": {
        "-i": "edit files in place (makes backup if SUFFIX supplied)"
      }
    },
    {
      "Command": "printf",
      "MP Summary": "format and print data",
      "Most Similar TLDR Task": "Print a text message",
      "Most Similar TLDR Script": "printf \"{{%s\\n}}\" \"{{Hello world}}\"",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_35308692: Print numbers 1 to 100 in 10 columns",
        "ul_220855: how to make awk print 3 items on the same line then switch to a new line",
        "ul_487764: How can I add 10 lines from a file (file2) to another one after 2 lines (file1)?"
      ],
      "Top-3 Scripts": [
        "so_35308692: for ((i=1;i<=10;i++)); do\n    for ((j=i;j<=(i+90);j+=10)); do\n        printf \"%2d  \" $j\n    done\n    echo\ndone\n\nfor ((i=0;i<10;i++)); do\n    for ((j=1;j<=10;j++)); do\n        printf \"%2d  \" $[$i*10+$j]\n    done\n    echo\ndone",
        "ul_220855: $ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%i, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508, 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36 9594508k 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36 9594508 0k",
        "ul_487764: # how many times we need to insert blocks\ntimes=$(grep -c transcr_ file1)\nfor((index=1;index <= times; index++));\ndo\n  printf \"%dr !sed -n %d,%dp file2\\nw\\nq\\n\" $((12 * index - 10)) $((10 * index - 9)) $(( 10 * index ))  |\n    ed -s file1\ndone"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "xargs",
      "MP Summary": "build and execute command lines from standard input",
      "Most Similar TLDR Task": "Parallel runs of up to `max-procs` processes at a time; the default is 1. If `max-procs` is 0, xargs will run as many processes as possible at a time",
      "Most Similar TLDR Script": "{{arguments_source}} | xargs -P {{max-procs}} {{command}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65176144: Extracting 200 lines from all the files in a folder",
        "ul_618119: How to get a line with a string from multiple files by file orders?"
      ],
      "Top-3 Scripts": [
        "so_65176144: find . -type f -name \"*.csv\" -print|xargs -I@ sh -c 'head -n200 @ > @.headed'",
        "ul_618119: printf '%s\\0' File_* | sort -zV | xargs -r0 grep -h '^kgf' > Output_file"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "nl",
      "MP Summary": "number lines of files",
      "Most Similar TLDR Task": "Number non-blank lines in a file",
      "Most Similar TLDR Script": "nl {{file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9584: Print new line separated numbers from \"001\" to \"100\""
      ],
      "Top-3 Scripts": [
        "nl2bash_9584: yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6"
      ],
      "Explanations about Options": {
        "-b": "use STYLE for numbering body lines"
      }
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Find files modified in the last 7 days, and delete them",
      "Most Similar TLDR Script": "find {{root_path}} -mtime {{-7}} -delete",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65176144: Extracting 200 lines from all the files in a folder",
        "nl2bash_4497: Find all the files in entire file system  which are modified more than 50 days back and less than 100 days and show a few lines of output from the beginning"
      ],
      "Top-3 Scripts": [
        "so_65176144: find . -type f -name \"*.csv\" -print|xargs -I@ sh -c 'head -n200 @ > @.headed'",
        "nl2bash_4497: find / -mtime +50 -mtime -100 | head"
      ],
      "Explanations about Options": {
        "-name": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils.",
        "-mtime": "File's data was last modified n*24 hours ago. See the comments for -atime to\n understand how rounding affects the interpretation of file modification times.",
        "-type": "File is of type c:",
        "-print": "Quoting is handled in the same way as for -printf and -fprintf. If you are using\n find in a script or in a situation where the matched files might have arbitrary\n names, you should consider using -print0 instead of -print."
      }
    },
    {
      "Command": "comm",
      "MP Summary": "select or reject lines common to two files",
      "Most Similar TLDR Task": "Get lines only found in first file, saving the result to a third file",
      "Most Similar TLDR Script": "comm -23 {{file1}} {{file2}} > {{file1_only}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "tldr_127: Get lines only found in first file, saving the result to a third file"
      ],
      "Top-3 Scripts": [
        "tldr_127: comm -23 {{file1}} {{file2}} > {{file1_only}}"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "truncate",
      "MP Summary": "shrink or extend the size of a file to the specified size",
      "Most Similar TLDR Task": "Set a size of 10 GB to an exsting file, or create a new file with the specified size",
      "Most Similar TLDR Script": "truncate -s {{10G}} {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "tldr_1950: Set a size of 10 GB to an exsting file, or create a new file with the specified size"
      ],
      "Top-3 Scripts": [
        "tldr_1950: truncate -s {{10G}} {{filename}}"
      ],
      "Explanations about Options": {
        "-s": "set or adjust the file size by SIZE bytes"
      }
    },
    {
      "Command": "print",
      "MP Summary": "execute programs via entries in the mailcap file",
      "Most Similar TLDR Task": "Print action can be used to print any file on default run-mailcap tool",
      "Most Similar TLDR Script": "print {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_220855: how to make awk print 3 items on the same line then switch to a new line",
        "so_39598792: How do I grab the first 10% of lines in a text file?",
        "so_36044118: bash move groups of lines to a new file"
      ],
      "Top-3 Scripts": [
        "ul_220855: $ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%i, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508, 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36 9594508k 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36 9594508 0k",
        "so_39598792: sort -nk8 file | awk '{ a[NR] = $0 } END { \n  for (i = 1; i <= NR / 10; ++i) print a[i] \n}'\n\nawk '{ a[NR] = $0 } END { \n  asort(a, b, \"@val_num_asc\"); for (i = 1; i <= NR / 10; ++i) print b[i] \n}' file",
        "so_36044118: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "yes",
      "MP Summary": "output a string repeatedly until killed",
      "Most Similar TLDR Task": "Repeatedly output \"y\"",
      "Most Similar TLDR Script": "yes",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9584: Print new line separated numbers from \"001\" to \"100\"",
        "nl2bash_10239: Write 200 lines of \"this is the text I want to add to a file\" to myFile.txt",
        "nl2bash_9501: Print every 4th line from 10 lines of \"y\" with line numbers"
      ],
      "Top-3 Scripts": [
        "nl2bash_9584: yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6",
        "nl2bash_10239: yes \"this is the text I want to add to a file\"|head -200>myFile.txt",
        "nl2bash_9501: yes | cat -n | head -10 | awk 'NR % 4 == 1'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mv",
      "MP Summary": "move (rename) files",
      "Most Similar TLDR Task": "Move files in verbose mode, showing files after they are moved",
      "Most Similar TLDR Script": "mv -v {{source}} {{target}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_527917: Renaming 100 files in a directory to new file names stored in a text file",
        "ul_561600: How do I keep the first 200 lines of all the csv files in a directory using bash?"
      ],
      "Top-3 Scripts": [
        "ul_527917: tr -d '\\r' <new_name_4.1.txt >tmp && mv -f tmp new_name_4.1.txt",
        "ul_561600: for file in ./*.csv; do\n    head -n 200 \"$file\" >\"$file.200\" &&\n    mv \"$file.200\" \"$file\"\ndone\n\nfor file in ./*.csv; do\n    csvjson -H \"$file\" | jq -r '.[:200][] | map(values) | @csv' >\"$file.200\" &&\n    mv \"$file.200\" \"$file\"\ndone"
      ],
      "Explanations about Options": {
        "-f": "do not prompt before overwriting"
      }
    },
    {
      "Command": "tr",
      "MP Summary": "translate or delete characters",
      "Most Similar TLDR Task": "Replace all occurrences of a character in a file, and print the result",
      "Most Similar TLDR Script": "tr {{find_character}} {{replace_character}} < {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9584: Print new line separated numbers from \"001\" to \"100\"",
        "ul_527917: Renaming 100 files in a directory to new file names stored in a text file",
        "so_34391895: How to get a single output file with N lines from N multiline files?"
      ],
      "Top-3 Scripts": [
        "nl2bash_9584: yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6",
        "ul_527917: tr -d '\\r' <new_name_4.1.txt >tmp && mv -f tmp new_name_4.1.txt",
        "so_34391895: for i in [0-9]*.txt; do tr '\\n' ' ' < \"$i\"; echo; done > output.txt\n\ncat output.txt\na b c d\ne f g h\nijklmn\n\nfor i in [0-9]*.txt; do tr '\\n' ' ' < \"$i\"; echo; done | sed 's/ *$//' > output.txt"
      ],
      "Explanations about Options": {
        "-d": "delete characters in SET1, do not translate"
      }
    },
    {
      "Command": "perl",
      "MP Summary": "The Perl 5 language interpreter",
      "Most Similar TLDR Task": "Run a regular expression on `stdin`, printing out the first capture group for each line",
      "Most Similar TLDR Script": "cat {{path/to/input_file}} | perl -nle 'if (/.*({{foo}}).*/) {print \"$1\"; last;}'",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_36044118: bash move groups of lines to a new file"
      ],
      "Top-3 Scripts": [
        "so_36044118: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "shuf",
      "MP Summary": "generate random permutations",
      "Most Similar TLDR Task": "Randomize the order of lines in a file and output the result",
      "Most Similar TLDR Script": "shuf {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_22385902: Get a list of lines from a file"
      ],
      "Top-3 Scripts": [
        "so_22385902: shuf -n NUMBER_OF_LINES file\n\nshuf -i 1-1000 -n 5 > rand_numbers # store the list of numbers\nawk 'FNR==NR {a[$1]; next} {if (FNR in a) print}' list_of_numbers a #print those lines"
      ],
      "Explanations about Options": {
        "-i": "treat each number LO through HI as an input line",
        "-n": "output at most COUNT lines"
      }
    },
    {
      "Command": "dos2unix",
      "MP Summary": "DOS/Mac to Unix and vice versa text file format converter",
      "Most Similar TLDR Task": "Change the line endings of a file",
      "Most Similar TLDR Script": "dos2unix {{filename}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_527917: Renaming 100 files in a directory to new file names stored in a text file",
        "so_2198263: reading a file line by line from a shell script"
      ],
      "Top-3 Scripts": [
        "ul_527917: dos2unix new_name_4.1.txt",
        "so_2198263: dos2unix ./script"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ed",
      "MP Summary": "line-oriented text editor",
      "Most Similar TLDR Task": "Add text to the current document. Mark completion by entering a period by itself in a new line",
      "Most Similar TLDR Script": "a<Enter>{{text_to_insert}}<Enter>.",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_487764: How can I add 10 lines from a file (file2) to another one after 2 lines (file1)?"
      ],
      "Top-3 Scripts": [
        "ul_487764: ed -s file1 <<< $'2r !head -10 file2\\nw\\nq'\n\n# how many times we need to insert blocks\ntimes=$(grep -c transcr_ file1)\nfor((index=1;index <= times; index++));\ndo\n  printf \"%dr !sed -n %d,%dp file2\\nw\\nq\\n\" $((12 * index - 10)) $((10 * index - 9)) $(( 10 * index ))  |\n    ed -s file1\ndone"
      ],
      "Explanations about Options": {
        "-s": "suppress diagnostics, byte counts and '!' prompt"
      }
    },
    {
      "Command": "script",
      "MP Summary": "make typescript of terminal session",
      "Most Similar TLDR Task": "Record a new session, appending to an existing file",
      "Most Similar TLDR Script": "script -a {{path/to/session.out}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_2198263: reading a file line by line from a shell script"
      ],
      "Top-3 Scripts": [
        "so_2198263: dos2unix ./script"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "man",
      "MP Summary": "an interface to the system reference manuals",
      "Most Similar TLDR Task": "Display the man page for a command from section 7",
      "Most Similar TLDR Script": "man {{command}}.{{7}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_220855: how to make awk print 3 items on the same line then switch to a new line",
        "au_1084270: Save 10 lines from Help into txt file"
      ],
      "Top-3 Scripts": [
        "ul_220855: man awk",
        "au_1084270: man man | head -10 > file.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "zsh",
      "MP Summary": "the Z shell",
      "Most Similar TLDR Task": "Run commands from file and print them as they are executed",
      "Most Similar TLDR Script": "zsh -x {{file}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_618119: How to get a line with a string from multiple files by file orders?"
      ],
      "Top-3 Scripts": [
        "ul_618119: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "top",
      "MP Summary": "display Linux processes",
      "Most Similar TLDR Task": "Sort processes by a field",
      "Most Similar TLDR Script": "top -o {{field_name}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_220855: how to make awk print 3 items on the same line then switch to a new line"
      ],
      "Top-3 Scripts": [
        "ul_220855: $ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%i, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508, 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36 9594508k 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36 9594508 0k"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "type",
      "MP Summary": "write a description of command type",
      "Most Similar TLDR Task": "Display the name of the disk file that would be executed",
      "Most Similar TLDR Script": "type -p {{command}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_36662883: Read lines from text file and if a specific word == 100, print the line"
      ],
      "Top-3 Scripts": [
        "so_36662883: line = \"rt=3.878\"\nprint line.split(\"=\")[0] # rt\nprint line.split(\"=\")[1] # 3.878\nprint type(line.split(\"=\")[1]) # type 'str'\nprint type(float(line.split(\"=\")[1])) # type 'float'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Most Similar TLDR Task": "Output the first element in a JSON file",
      "Most Similar TLDR Script": "jq '.[0]' {{file.json}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_561600: How do I keep the first 200 lines of all the csv files in a directory using bash?"
      ],
      "Top-3 Scripts": [
        "ul_561600: for file in ./*.csv; do\n    csvjson -H \"$file\" | jq -r '.[:200][] | map(values) | @csv' >\"$file.200\" &&\n    mv \"$file.200\" \"$file\"\ndone"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Assemble a file, writing the output to a.out",
      "Most Similar TLDR Script": "as {{file.s}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_36662883: Read lines from text file and if a specific word == 100, print the line"
      ],
      "Top-3 Scripts": [
        "so_36662883: with open(\"file.txt\", \"r\") as f:\n    for line in f.readlines():\n        if float(line.split(\"=\")[1]) == 3.878:\n            print line\n\nwith open(\"file.txt\", \"r\") as f:\n    for line in f.readlines():\n        if line.split(\"=\")[0] == \"rt\":\n            if float(line.split(\"=\")[1]) == 3.878:\n                print line"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bc",
      "MP Summary": "An arbitrary precision calculator language",
      "Most Similar TLDR Task": "Calculate expression and force number of decimal places to 10",
      "Most Similar TLDR Script": "bc <<< \"scale=10; 5 / 3\"",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_10111: Prints the size in kb of the first 100 lines of a file"
      ],
      "Top-3 Scripts": [
        "nl2bash_10111: echo `cat $FILE | head -n 100 | wc -c` / 1024 | bc -l"
      ],
      "Explanations about Options": {
        "-l": "Define the standard math library."
      }
    },
    {
      "Command": "command",
      "MP Summary": "execute a simple command",
      "Most Similar TLDR Task": "Display the path to the executable or the alias definition of a specific command",
      "Most Similar TLDR Script": "command -v {{command_name}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_479679: How can I use grep in a loop and add new line of text each time to the same file?"
      ],
      "Top-3 Scripts": [
        "ul_479679: command | grep sth >> test.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "csvpy",
      "MP Summary": "manual page for csvpy 1.0.2",
      "Most Similar TLDR Task": "Load a CSV file into a `CSVKitDictReader` object",
      "Most Similar TLDR Script": "csvpy --dict {{data.csv}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_561600: How do I keep the first 200 lines of all the csv files in a directory using bash?"
      ],
      "Top-3 Scripts": [
        "ul_561600: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sh",
      "MP Summary": "MirBSD Korn shell",
      "Most Similar TLDR Task": "Run commands from a file",
      "Most Similar TLDR Script": "sh {{file.sh}}",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_65176144: Extracting 200 lines from all the files in a folder"
      ],
      "Top-3 Scripts": [
        "so_65176144: find . -type f -name \"*.csv\" -print|xargs -I@ sh -c 'head -n200 @ > @.headed'"
      ],
      "Explanations about Options": {
        "-c": "Impose a size limit of n blocks on the size of core dumps."
      }
    },
    {
      "Command": "up",
      "MP Summary": "Recursively copy directories, preserving AFS metadata",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_220855: how to make awk print 3 items on the same line then switch to a new line"
      ],
      "Top-3 Scripts": [
        "ul_220855: $ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36, 9594508k 0k\n\n$ awk '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s, \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508k, 0k\n\n$ awk '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used\",\",$4;}' top-output\n3:36, 9594508, 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {printf \"%s \",$5;} $1 ~/Mem/ {printf \"%s \",$4;} $1 ~/Swap/  {print $4;}' top-output\n3:36 9594508k 0k\n\n$ awk -F'[,[:space:]]+' '$1 ~/top/ {up=$5;} $1 ~/Mem/ {used=$4+0;} $1 ~/Swap/  {print up,used,$4;}' top-output\n3:36 9594508 0k"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "to",
      "MP Summary": "as the filename. --logdir <name> Writes each synchronization log output in a new file in the specified directory. --logexpire <hours> Removes logs older than the value specified (in hours). This command is  used  with --logdir. --logflush Clears (flushes) the log file after each write action. --logdebug Also  output  debug-level  messages  in  the log (equivalent to setting the env var QT_LOGGING_RULES=\"qt.*=true;*.debug=true\"). ) --confdir <dirname> Uses the specified configuration directory. The ownCloud Client reads a configuration file.  You can locate this configuration file as follows: On Linux distributions: $HOME/.config/ownCloud/owncloud.cfg On Microsoft Windows systems: %APPDATA%\\ownCloud\\owncloud.cfg On MAC OS X systems: $HOME/Library/Preferences/ownCloud/owncloud.cfg The configuration file contains settings using the Microsoft Windows .ini file format. You can overwrite changes using the ownCloud configuration dialog. NOTE: Use caution when making changes to the ownCloud Client configuration  file.   Incorrect settings can produce unintended results. Some interesting values that can be set on the configuration file are: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[ownCloud] section          \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                    \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502remotePollInterval          \u2502 30000   \u2502 Specifies  the poll time \u2502 \u2502                            \u2502         \u2502 for      the      remote \u2502 \u2502                            \u2502         \u2502 repository            in \u2502 \u2502                            \u2502         \u2502 milliseconds.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502forceSyncInterval           \u2502 7200000 \u2502 The   duration   of   no \u2502 \u2502                            \u2502         \u2502 activity  after  which a \u2502 \u2502                            \u2502         \u2502 synchronization      run \u2502 \u2502                            \u2502         \u2502 shall    be    triggered \u2502 \u2502                            \u2502         \u2502 automatically.           \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502fullLocalDiscoveryInterval  \u2502 3600000 \u2502 The interval after which \u2502 \u2502                            \u2502         \u2502 the next synchronization \u2502 \u2502                            \u2502         \u2502 will   perform   a  full \u2502 \u2502                            \u2502         \u2502 local discovery.         \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502notificationRefreshInterval \u2502 300000  \u2502 Specifies   the  default \u2502 \u2502                            \u2502         \u2502 interval of checking for \u2502 \u2502                            \u2502         \u2502 new server notifications \u2502 \u2502                            \u2502         \u2502 in milliseconds.         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[General] section       \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502chunkSize               \u2502 5242880 \u2502 Specifies the chunk size \u2502 \u2502                        \u2502         \u2502 of   uploaded  files  in \u2502 \u2502                        \u2502         \u2502 bytes.                   \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502promptDeleteAllFiles    \u2502 true    \u2502 If a  UI  prompt  should \u2502 \u2502                        \u2502         \u2502 ask  for confirmation if \u2502 \u2502                        \u2502         \u2502 it was detected that all \u2502 \u2502                        \u2502         \u2502 files  and  folders were \u2502 \u2502                        \u2502         \u2502 deleted.                 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502maxLogLines             \u2502 20000   \u2502 Specifies  the   maximum \u2502 \u2502                        \u2502         \u2502 number   of   log  lines \u2502 \u2502                        \u2502         \u2502 displayed  in  the   log \u2502 \u2502                        \u2502         \u2502 window.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502timeout                 \u2502 300     \u2502 The  timeout for network \u2502 \u2502                        \u2502         \u2502 connections in seconds.  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502moveToTrash             \u2502 false   \u2502 If  non-locally  deleted \u2502 \u2502                        \u2502         \u2502 files should be moved to \u2502 \u2502                        \u2502         \u2502 trash     instead     of \u2502 \u2502                        \u2502         \u2502 deleting            them \u2502 \u2502                        \u2502         \u2502 completely.  This option \u2502 \u2502                        \u2502         \u2502 only works on linux      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502showExperimentalOptions \u2502 false   \u2502 Whether      to     show \u2502 \u2502                        \u2502         \u2502 experimental     options \u2502 \u2502                        \u2502         \u2502 that      are      still \u2502 \u2502                        \u2502         \u2502 undergoing  testing   in \u2502 \u2502                        \u2502         \u2502 the    user   interface. \u2502 \u2502                        \u2502         \u2502 Turning this on does not \u2502 \u2502                        \u2502         \u2502 enable      experimental \u2502 \u2502                        \u2502         \u2502 behavior on its own.  It \u2502 \u2502                        \u2502         \u2502 does     enable     user \u2502 \u2502                        \u2502         \u2502 inferface  options  that \u2502 \u2502                        \u2502         \u2502 can be used to opt in to \u2502 \u2502                        \u2502         \u2502 experimental features.   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[Proxy] section      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable             \u2502 Default   \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502host                 \u2502 127.0.0.1 \u2502 The address of the proxy \u2502 \u2502                     \u2502           \u2502 server.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502port                 \u2502 8080      \u2502 The  port were the proxy \u2502 \u2502                     \u2502           \u2502 is listening.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502type                 \u2502 2         \u2502 0 for System Proxy.      \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25021 for SOCKS5 Proxy.  \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25022 for No Proxy.      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25023 for HTTP(S) Proxy. \u2502           \u2502                          \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Please report bugs at https://github.com/owncloud/client/issues. owncloudcmd(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_10239: Write 200 lines of \"this is the text I want to add to a file\" to myFile.txt",
        "so_22385902: Get a list of lines from a file"
      ],
      "Top-3 Scripts": [
        "nl2bash_10239: yes \"this is the text I want to add to a file\"|head -200>myFile.txt",
        "so_22385902: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "times",
      "MP Summary": "write process times",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_487764: How can I add 10 lines from a file (file2) to another one after 2 lines (file1)?"
      ],
      "Top-3 Scripts": [
        "ul_487764: # how many times we need to insert blocks\ntimes=$(grep -c transcr_ file1)\nfor((index=1;index <= times; index++));\ndo\n  printf \"%dr !sed -n %d,%dp file2\\nw\\nq\\n\" $((12 * index - 10)) $((10 * index - 9)) $(( 10 * index ))  |\n    ed -s file1\ndone"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file2",
      "MP Summary": "kanji code checker.",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_487764: How can I add 10 lines from a file (file2) to another one after 2 lines (file1)?",
        "so_51208311: How can I get output of 2 files with no-duplicates of lines [from any file]?",
        "so_15570443: Removing line numbers (not entire line) from a file in unix"
      ],
      "Top-3 Scripts": [
        "ul_487764: head -10 file2",
        "so_51208311: awk 'FNR==1{delete a}!a[$0]++' file1 file2\n\nsort -u file1; sort -u file2",
        "so_15570443: sed 's/ *[0-9]*.//' file2 > file3"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "log",
      "MP Summary": "as the filename. --logdir <name> Writes each synchronization log output in a new file in the specified directory. --logexpire <hours> Removes logs older than the value specified (in hours). This command is  used  with --logdir. --logflush Clears (flushes) the log file after each write action. --logdebug Also  output  debug-level  messages  in  the log (equivalent to setting the env var QT_LOGGING_RULES=\"qt.*=true;*.debug=true\"). ) --confdir <dirname> Uses the specified configuration directory. The ownCloud Client reads a configuration file.  You can locate this configuration file as follows: On Linux distributions: $HOME/.config/ownCloud/owncloud.cfg On Microsoft Windows systems: %APPDATA%\\ownCloud\\owncloud.cfg On MAC OS X systems: $HOME/Library/Preferences/ownCloud/owncloud.cfg The configuration file contains settings using the Microsoft Windows .ini file format. You can overwrite changes using the ownCloud configuration dialog. NOTE: Use caution when making changes to the ownCloud Client configuration  file.   Incorrect settings can produce unintended results. Some interesting values that can be set on the configuration file are: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[ownCloud] section          \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                    \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502remotePollInterval          \u2502 30000   \u2502 Specifies  the poll time \u2502 \u2502                            \u2502         \u2502 for      the      remote \u2502 \u2502                            \u2502         \u2502 repository            in \u2502 \u2502                            \u2502         \u2502 milliseconds.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502forceSyncInterval           \u2502 7200000 \u2502 The   duration   of   no \u2502 \u2502                            \u2502         \u2502 activity  after  which a \u2502 \u2502                            \u2502         \u2502 synchronization      run \u2502 \u2502                            \u2502         \u2502 shall    be    triggered \u2502 \u2502                            \u2502         \u2502 automatically.           \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502fullLocalDiscoveryInterval  \u2502 3600000 \u2502 The interval after which \u2502 \u2502                            \u2502         \u2502 the next synchronization \u2502 \u2502                            \u2502         \u2502 will   perform   a  full \u2502 \u2502                            \u2502         \u2502 local discovery.         \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502notificationRefreshInterval \u2502 300000  \u2502 Specifies   the  default \u2502 \u2502                            \u2502         \u2502 interval of checking for \u2502 \u2502                            \u2502         \u2502 new server notifications \u2502 \u2502                            \u2502         \u2502 in milliseconds.         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[General] section       \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502chunkSize               \u2502 5242880 \u2502 Specifies the chunk size \u2502 \u2502                        \u2502         \u2502 of   uploaded  files  in \u2502 \u2502                        \u2502         \u2502 bytes.                   \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502promptDeleteAllFiles    \u2502 true    \u2502 If a  UI  prompt  should \u2502 \u2502                        \u2502         \u2502 ask  for confirmation if \u2502 \u2502                        \u2502         \u2502 it was detected that all \u2502 \u2502                        \u2502         \u2502 files  and  folders were \u2502 \u2502                        \u2502         \u2502 deleted.                 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502maxLogLines             \u2502 20000   \u2502 Specifies  the   maximum \u2502 \u2502                        \u2502         \u2502 number   of   log  lines \u2502 \u2502                        \u2502         \u2502 displayed  in  the   log \u2502 \u2502                        \u2502         \u2502 window.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502timeout                 \u2502 300     \u2502 The  timeout for network \u2502 \u2502                        \u2502         \u2502 connections in seconds.  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502moveToTrash             \u2502 false   \u2502 If  non-locally  deleted \u2502 \u2502                        \u2502         \u2502 files should be moved to \u2502 \u2502                        \u2502         \u2502 trash     instead     of \u2502 \u2502                        \u2502         \u2502 deleting            them \u2502 \u2502                        \u2502         \u2502 completely.  This option \u2502 \u2502                        \u2502         \u2502 only works on linux      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502showExperimentalOptions \u2502 false   \u2502 Whether      to     show \u2502 \u2502                        \u2502         \u2502 experimental     options \u2502 \u2502                        \u2502         \u2502 that      are      still \u2502 \u2502                        \u2502         \u2502 undergoing  testing   in \u2502 \u2502                        \u2502         \u2502 the    user   interface. \u2502 \u2502                        \u2502         \u2502 Turning this on does not \u2502 \u2502                        \u2502         \u2502 enable      experimental \u2502 \u2502                        \u2502         \u2502 behavior on its own.  It \u2502 \u2502                        \u2502         \u2502 does     enable     user \u2502 \u2502                        \u2502         \u2502 inferface  options  that \u2502 \u2502                        \u2502         \u2502 can be used to opt in to \u2502 \u2502                        \u2502         \u2502 experimental features.   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[Proxy] section      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable             \u2502 Default   \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502host                 \u2502 127.0.0.1 \u2502 The address of the proxy \u2502 \u2502                     \u2502           \u2502 server.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502port                 \u2502 8080      \u2502 The  port were the proxy \u2502 \u2502                     \u2502           \u2502 is listening.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502type                 \u2502 2         \u2502 0 for System Proxy.      \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25021 for SOCKS5 Proxy.  \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25022 for No Proxy.      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25023 for HTTP(S) Proxy. \u2502           \u2502                          \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Please report bugs at https://github.com/owncloud/client/issues. owncloudcmd(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_9837: Print the last 10 lines of '/var/log/syslog', printing out any additional data appended to the file"
      ],
      "Top-3 Scripts": [
        "nl2bash_9837: tail -f /var/log/syslog"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "input",
      "MP Summary": "Yagi-Uda project antenna defining program",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_801004: Move top 1000 lines from text file to a new file using Unix shell commands"
      ],
      "Top-3 Scripts": [
        "so_801004: head -1000 input > output && sed -i '1,+999d' input"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "output",
      "MP Summary": "as the filename. --logdir <name> Writes each synchronization log output in a new file in the specified directory. --logexpire <hours> Removes logs older than the value specified (in hours). This command is  used  with --logdir. --logflush Clears (flushes) the log file after each write action. --logdebug Also  output  debug-level  messages  in  the log (equivalent to setting the env var QT_LOGGING_RULES=\"qt.*=true;*.debug=true\"). ) --confdir <dirname> Uses the specified configuration directory. The ownCloud Client reads a configuration file.  You can locate this configuration file as follows: On Linux distributions: $HOME/.config/ownCloud/owncloud.cfg On Microsoft Windows systems: %APPDATA%\\ownCloud\\owncloud.cfg On MAC OS X systems: $HOME/Library/Preferences/ownCloud/owncloud.cfg The configuration file contains settings using the Microsoft Windows .ini file format. You can overwrite changes using the ownCloud configuration dialog. NOTE: Use caution when making changes to the ownCloud Client configuration  file.   Incorrect settings can produce unintended results. Some interesting values that can be set on the configuration file are: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[ownCloud] section          \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                    \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502remotePollInterval          \u2502 30000   \u2502 Specifies  the poll time \u2502 \u2502                            \u2502         \u2502 for      the      remote \u2502 \u2502                            \u2502         \u2502 repository            in \u2502 \u2502                            \u2502         \u2502 milliseconds.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502forceSyncInterval           \u2502 7200000 \u2502 The   duration   of   no \u2502 \u2502                            \u2502         \u2502 activity  after  which a \u2502 \u2502                            \u2502         \u2502 synchronization      run \u2502 \u2502                            \u2502         \u2502 shall    be    triggered \u2502 \u2502                            \u2502         \u2502 automatically.           \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502fullLocalDiscoveryInterval  \u2502 3600000 \u2502 The interval after which \u2502 \u2502                            \u2502         \u2502 the next synchronization \u2502 \u2502                            \u2502         \u2502 will   perform   a  full \u2502 \u2502                            \u2502         \u2502 local discovery.         \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502notificationRefreshInterval \u2502 300000  \u2502 Specifies   the  default \u2502 \u2502                            \u2502         \u2502 interval of checking for \u2502 \u2502                            \u2502         \u2502 new server notifications \u2502 \u2502                            \u2502         \u2502 in milliseconds.         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[General] section       \u2502         \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable                \u2502 Default \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502chunkSize               \u2502 5242880 \u2502 Specifies the chunk size \u2502 \u2502                        \u2502         \u2502 of   uploaded  files  in \u2502 \u2502                        \u2502         \u2502 bytes.                   \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502promptDeleteAllFiles    \u2502 true    \u2502 If a  UI  prompt  should \u2502 \u2502                        \u2502         \u2502 ask  for confirmation if \u2502 \u2502                        \u2502         \u2502 it was detected that all \u2502 \u2502                        \u2502         \u2502 files  and  folders were \u2502 \u2502                        \u2502         \u2502 deleted.                 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502maxLogLines             \u2502 20000   \u2502 Specifies  the   maximum \u2502 \u2502                        \u2502         \u2502 number   of   log  lines \u2502 \u2502                        \u2502         \u2502 displayed  in  the   log \u2502 \u2502                        \u2502         \u2502 window.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502timeout                 \u2502 300     \u2502 The  timeout for network \u2502 \u2502                        \u2502         \u2502 connections in seconds.  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502moveToTrash             \u2502 false   \u2502 If  non-locally  deleted \u2502 \u2502                        \u2502         \u2502 files should be moved to \u2502 \u2502                        \u2502         \u2502 trash     instead     of \u2502 \u2502                        \u2502         \u2502 deleting            them \u2502 \u2502                        \u2502         \u2502 completely.  This option \u2502 \u2502                        \u2502         \u2502 only works on linux      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502showExperimentalOptions \u2502 false   \u2502 Whether      to     show \u2502 \u2502                        \u2502         \u2502 experimental     options \u2502 \u2502                        \u2502         \u2502 that      are      still \u2502 \u2502                        \u2502         \u2502 undergoing  testing   in \u2502 \u2502                        \u2502         \u2502 the    user   interface. \u2502 \u2502                        \u2502         \u2502 Turning this on does not \u2502 \u2502                        \u2502         \u2502 enable      experimental \u2502 \u2502                        \u2502         \u2502 behavior on its own.  It \u2502 \u2502                        \u2502         \u2502 does     enable     user \u2502 \u2502                        \u2502         \u2502 inferface  options  that \u2502 \u2502                        \u2502         \u2502 can be used to opt in to \u2502 \u2502                        \u2502         \u2502 experimental features.   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502[Proxy] section      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Variable             \u2502 Default   \u2502 Meaning                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502host                 \u2502 127.0.0.1 \u2502 The address of the proxy \u2502 \u2502                     \u2502           \u2502 server.                  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502port                 \u2502 8080      \u2502 The  port were the proxy \u2502 \u2502                     \u2502           \u2502 is listening.            \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502type                 \u2502 2         \u2502 0 for System Proxy.      \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25021 for SOCKS5 Proxy.  \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25022 for No Proxy.      \u2502           \u2502                          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25023 for HTTP(S) Proxy. \u2502           \u2502                          \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Please report bugs at https://github.com/owncloud/client/issues. owncloudcmd(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_801004: Move top 1000 lines from text file to a new file using Unix shell commands"
      ],
      "Top-3 Scripts": [
        "so_801004: head -1000 input > output && sed -i '1,+999d' input"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "dir",
      "MP Summary": "list directory contents",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_36044118: bash move groups of lines to a new file",
        "so_24353591: List All Text Files in a Directory with more than 100 Lines using PowerShell"
      ],
      "Top-3 Scripts": [
        "so_36044118: ",
        "so_24353591: dir . -filter \"*.txt\" -Recurse | ? {(gc $_.FullName | Measure -Line | Select -Expand Lines) -gt 100 }"
      ],
      "Explanations about Options": {
        "-s": "print the allocated size of each file, in blocks",
        "-c": "with -lt: sort by , and show , ctime (time of last modification of file status\n information); with -l: show ctime and sort by name; otherwise: sort by ctime,\n newest first",
        "-u": "with -lt: sort by , and show , access time; with -l: show access time and sort by\n name; otherwise: sort by access time, newest first",
        "-r": "reverse order while sorting",
        "-t": "sort by modification time , newest first",
        "-R": "list subdirectories recursively",
        "-f": "do not sort , enable -aU , disable -ls --color",
        "-l": "use a long listing format",
        "-i": "print the index number of each file"
      }
    },
    {
      "Command": "rt",
      "MP Summary": "Command-line interface to Request Tracker",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Split \"file\" into 10 files of about equal size without splitting lines",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "split -n l/10 file\n",
          "command-options": {
            "split": {
              "mpsum": "split a file into pieces",
              "-n": "generate CHUNKS output files; see explanation below"
            },
            "file": {
              "mpsum": "determine file type"
            }
          },
          "TLDR_inform": {
            "split": {
              "man1_split_32175": "split file piec split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split"
            },
            "file": {
              "man1_file_10007": "determin file type allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_36662883: Read lines from text file and if a specific word == 100, print the line"
      ],
      "Top-3 Scripts": [
        "so_36662883: line = \"rt=3.878\"\nprint line.split(\"=\")[0] # rt\nprint line.split(\"=\")[1] # 3.878\nprint type(line.split(\"=\")[1]) # type 'str'\nprint type(float(line.split(\"=\")[1])) # type 'float'"
      ],
      "Explanations about Options": {}
    }
  ]
}