{
  "Query": "What is a command to compile and run C++ programs?",
  "Answers": [
    {
      "Command": "env",
      "MP Summary": "run a program in a modified environment",
      "Most Similar TLDR Task": "Set a variable and run a program",
      "Most Similar TLDR Script": "env {{variable}}={{value}} {{program}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "tldr_1751: Set a variable and run a program",
        "tldr_1750: Set a variable and run a program",
        "tldr_1753: Set multiple variables and run a program"
      ],
      "Top-3 Scripts": [
        "tldr_1751: env {{variable}}={{value}} {{program}}",
        "tldr_1750: env {{variable}}={{value}} {{program}}",
        "tldr_1753: env {{variable1}}={{value}} {{variable2}}={{value}} {{variable3}}={{value}} {{program}}"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bash",
      "MP Summary": "GNU Bourne-Again SHell",
      "Most Similar TLDR Task": "Run commands from a file, logging all commands executed to the terminal",
      "Most Similar TLDR Script": "bash -x {{file.sh}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_15557585: How I should make a bash script to run a C++ program?",
        "so_62469972: Cannot run compiled go files",
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "so_15557585: ",
        "so_62469972: ",
        "su_1186450: find . -type f -name 'abc' | xargs -p -I '{}' bash -c \"'{}' -p\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "gcc",
      "MP Summary": "GNU project C and C++ compiler",
      "Most Similar TLDR Task": "Compile multiple source files into executable",
      "Most Similar TLDR Script": "gcc {{source1.c}} {{source2.c}} -o {{executable}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_53358: How to compile c & c++ programs?",
        "so_15717353: Unable to compile C++ program",
        "au_693650: How do I run my C program?"
      ],
      "Top-3 Scripts": [
        "au_53358: ",
        "so_15717353: ",
        "au_693650: sudo apt-get install gcc\n\ngcc -Wall -o file file.c"
      ],
      "Explanations about Options": {
        "-o": "Place output in file file. This applies to whatever sort of output is being produced,\n whether it be an executable file, an object file, an assembler file or preprocessed C\n code.",
        "-Wall": "turns on the following warning flags:"
      }
    },
    {
      "Command": "gdb",
      "MP Summary": "The GNU Debugger",
      "Most Similar TLDR Task": "Start gdb and pass arguments to the executable",
      "Most Similar TLDR Script": "gdb --args {{executable}} {{argument1}} {{argument2}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_50530121: My PowerShell Script Not Working As Expected (for compiling C++ files)",
        "so_26949854: Command not found, c++ application"
      ],
      "Top-3 Scripts": [
        "so_50530121: ",
        "so_26949854: gdb ./Bingo"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sudo",
      "MP Summary": "execute a command as another user",
      "Most Similar TLDR Task": "Run a command as another user and/or group",
      "Most Similar TLDR Script": "sudo -u {{user}} -g {{group}} {{id -a}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1350491: I Can't Compile C++ Program",
        "so_68352968: Compile a C++ program (LANShare)",
        "au_693650: How do I run my C program?"
      ],
      "Top-3 Scripts": [
        "au_1350491: sudo apt-get install g++\n\nmv CCC.Cpp CCC.cpp\ng++ CCC.cpp -o CCC\n./CCC",
        "so_68352968: sudo apt install qt5-qmake qt5-default",
        "au_693650: sudo apt-get install gcc"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "apt-get",
      "MP Summary": "APT package handling utility - command-line interface",
      "Most Similar TLDR Task": "Update the list of available packages and versions (it's recommended to run this before other `apt-get` commands)",
      "Most Similar TLDR Script": "apt-get update",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1350491: I Can't Compile C++ Program",
        "au_693650: How do I run my C program?",
        "au_30996: Can I use a C/C++ compiler?"
      ],
      "Top-3 Scripts": [
        "au_1350491: sudo apt-get install g++\n\nmv CCC.Cpp CCC.cpp\ng++ CCC.cpp -o CCC\n./CCC",
        "au_693650: sudo apt-get install gcc",
        "au_30996: sudo apt-get install gcc g++"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "nim",
      "MP Summary": "Nim Language Compiler",
      "Most Similar TLDR Task": "Compile and run a source file",
      "Most Similar TLDR Script": "nim compile -r {{file.nim}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "tldr_7679: Compile and run a source file"
      ],
      "Top-3 Scripts": [
        "tldr_7679: nim compile -r {{file.nim}}"
      ],
      "Explanations about Options": {
        "-r": "run the compiled program with given arguments"
      }
    },
    {
      "Command": "make",
      "MP Summary": "GNU make utility to maintain groups of programs",
      "Most Similar TLDR Task": "Use a specific Makefile",
      "Most Similar TLDR Script": "make --file {{file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_68352968: Compile a C++ program (LANShare)",
        "so_50530121: My PowerShell Script Not Working As Expected (for compiling C++ files)",
        "so_51161295: I' can't compile the next program"
      ],
      "Top-3 Scripts": [
        "so_68352968: qmake -o Makefile LANShare.pro\nmake",
        "so_50530121: make run\n\nmake debug\n\nmake clean\n\n$env:CPPFLAGS = '-g'\nmake",
        "so_51161295: make\nmake install"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the exit code of the last command executed",
      "Most Similar TLDR Script": "exit",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_9550488: How do I run an external program?",
        "so_29090372: Creating a bash script to compile a c++",
        "so_15557585: How I should make a bash script to run a C++ program?"
      ],
      "Top-3 Scripts": [
        "so_9550488: ",
        "so_29090372: #!/bin/bash\n#Run this in terminal\n#+ Command to compile c++ program. here i used common one\ng++ filename.cpp -o anyname\nexit 0",
        "so_15557585: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "yum",
      "MP Summary": "Yellowdog Updater Modified",
      "Most Similar TLDR Task": "Find the package that provides a particular command",
      "Most Similar TLDR Script": "yum provides {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_18348726: not able to compile GTK program"
      ],
      "Top-3 Scripts": [
        "so_18348726: yum update mesa-libglapi"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "command",
      "MP Summary": "execute a simple command",
      "Most Similar TLDR Task": "Display the path to the executable or the alias definition of a specific command",
      "Most Similar TLDR Script": "command -v {{command_name}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_29306: Error when trying to compile abgx360: C++ compiler cannot create executables"
      ],
      "Top-3 Scripts": [
        "au_29306: /home/eric/Desktop/abgx360gui-1.0.2/configure: line 2441: g++: command not found"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "uname",
      "MP Summary": "print system information",
      "Most Similar TLDR Task": "Print all available system information (hardware, software, nodename)",
      "Most Similar TLDR Script": "uname -a",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_15054317: Program cannot be run in Linux",
        "ul_67579: Use of ./ in running the compiled code"
      ],
      "Top-3 Scripts": [
        "so_15054317: uname -a",
        "ul_67579: /home/uname/code"
      ],
      "Explanations about Options": {
        "-a": "print all information, in the following order, except omit -p and -i if unknown:"
      }
    },
    {
      "Command": "xargs",
      "MP Summary": "build and execute command lines from standard input",
      "Most Similar TLDR Task": "Run multiple chained commands on the input data",
      "Most Similar TLDR Script": "{{arguments_source}} | xargs sh -c \"{{command1}} && {{command2}} | {{command3}}\"",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: find . -type f -name 'abc' | xargs -I '{}' nohup '{}' -p\n\nxargs -p\n\nfind . -type f -name 'abc' | xargs -p -I '{}' nohup '{}' -p\n\nfind . -type f -name 'abc' | xargs -I '{}' sudo -u $USER '{}' -p\n\nfind . -type f -name 'abc' | xargs -p -I '{}' bash -c \"'{}' -p\"\n\nfind . -type f -name 'abc' | xargs -I '{}' echo '{}' -p | at now"
      ],
      "Explanations about Options": {
        "-I": "Replace occurrences of replace-str in the initial-arguments with names read from\n standard input. Also, unquoted blanks do not terminate input items; instead the\n separator is the newline character. Implies -x and -L 1."
      }
    },
    {
      "Command": "exec",
      "MP Summary": "execute commands and open, close, or copy file descriptors",
      "Most Similar TLDR Task": "Replace with the specified command and change the process name",
      "Most Similar TLDR Script": "exec -a {{process_name}} {{command -with -flags}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_12285763: control linux terminal using c++ program"
      ],
      "Top-3 Scripts": [
        "so_12285763: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "kill",
      "MP Summary": "send a signal to a process",
      "Most Similar TLDR Task": "Terminate a program using the default SIGTERM (terminate) signal",
      "Most Similar TLDR Script": "kill {{process_id}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_12285763: control linux terminal using c++ program"
      ],
      "Top-3 Scripts": [
        "so_12285763: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "nohup",
      "MP Summary": "run a command immune to hangups, with output to a non-tty",
      "Most Similar TLDR Task": "Run process that can live beyond the terminal",
      "Most Similar TLDR Script": "nohup {{command options}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: find . -type f -name 'abc' | xargs -I '{}' nohup '{}' -p\n\nnohup ./abc -p\nnohup ./sub/abc -p\n\nfind . -type f -name 'abc' | xargs -p -I '{}' nohup '{}' -p"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "parallel",
      "MP Summary": "run programs in parallel",
      "Most Similar TLDR Task": "Run on multiple machines via SSH",
      "Most Similar TLDR Script": "parallel -S {{machine1}},{{machine2}} {{command}} ::: {{arg1}} {{arg2}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: find . -type f -name 'abc' | parallel --no-notice -I '{}' \"'{}' -p\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Most Similar TLDR Task": "Look inside a zipped file and determine the file type(s) inside",
      "Most Similar TLDR Script": "file -z {{foo.zip}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_15717353: Unable to compile C++ program",
        "au_693650: How do I run my C program?",
        "so_55037943: How should C++ execute the PowerShell command?"
      ],
      "Top-3 Scripts": [
        "so_15717353: ",
        "au_693650: gcc -Wall -o file file.c\n\n./file",
        "so_55037943: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sh",
      "MP Summary": "MirBSD Korn shell",
      "Most Similar TLDR Task": "Execute a command",
      "Most Similar TLDR Script": "sh -c {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "nice",
      "MP Summary": "run a program with modified scheduling priority",
      "Most Similar TLDR Task": "Launch a program with altered priority",
      "Most Similar TLDR Script": "nice -n {{niceness_value}} {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_14371257: Make a program run slowly"
      ],
      "Top-3 Scripts": [
        "so_14371257: nice()"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "install",
      "MP Summary": "copy files and set attributes",
      "Most Similar TLDR Task": "Copy files and apply access/modification times of source to destination",
      "Most Similar TLDR Script": "install -p {{path/to/source}} {{path/to/destination}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1350491: I Can't Compile C++ Program",
        "so_68352968: Compile a C++ program (LANShare)",
        "au_693650: How do I run my C program?"
      ],
      "Top-3 Scripts": [
        "au_1350491: sudo apt-get install g++\n\nmv CCC.Cpp CCC.cpp\ng++ CCC.cpp -o CCC\n./CCC",
        "so_68352968: sudo apt install qt5-qmake qt5-default",
        "au_693650: sudo apt-get install gcc"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "print",
      "MP Summary": "execute programs via entries in the mailcap file",
      "Most Similar TLDR Task": "Print action can be used to print any file on default run-mailcap tool",
      "Most Similar TLDR Script": "print {{filename}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_49458509: Creating a python script to compile and run a c++ file"
      ],
      "Top-3 Scripts": [
        "so_49458509: if os.system(\"g++ foo.c\") == 0:\n    print (\"Worked\")\nelse:\n    print (\"Failed\")"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "gnome-terminal",
      "MP Summary": "is a terminal emulation application.",
      "Most Similar TLDR Task": "Run a specific command in a new terminal window",
      "Most Similar TLDR Script": "gnome-terminal -- {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_502225: Run command don't run command line programs"
      ],
      "Top-3 Scripts": [
        "au_502225: gnome-terminal -x vim test.txt"
      ],
      "Explanations about Options": {
        "-x": "Execute the remainder of the command line inside the terminal."
      }
    },
    {
      "Command": "zsh",
      "MP Summary": "the Z shell",
      "Most Similar TLDR Task": "Run commands from file and print them as they are executed",
      "Most Similar TLDR Script": "zsh -x {{file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Assemble a file, writing the output to a.out",
      "Most Similar TLDR Script": "as {{file.s}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_15717353: Unable to compile C++ program"
      ],
      "Top-3 Scripts": [
        "so_15717353: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mv",
      "MP Summary": "move (rename) files",
      "Most Similar TLDR Task": "Move files in arbitrary locations",
      "Most Similar TLDR Script": "mv {{source}} {{target}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_1350491: I Can't Compile C++ Program",
        "so_26000513: Bash shell script for compiling C++ and manipulating the output"
      ],
      "Top-3 Scripts": [
        "au_1350491: sudo apt-get install g++\n\nmv CCC.Cpp CCC.cpp\ng++ CCC.cpp -o CCC\n./CCC",
        "so_26000513: #!/bin/sh\n\nmkdir Output\ng++ -o run run.cpp\n./run\nmv output*.txt Output"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "task",
      "MP Summary": "A command line todo manager.",
      "Most Similar TLDR Task": "Delete task",
      "Most Similar TLDR Script": "task {{task_id}} delete",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_55037943: How should C++ execute the PowerShell command?"
      ],
      "Top-3 Scripts": [
        "so_55037943: $task = Get-ScheduledTask \"Test\"\n$items = @{}\nif ($task.Actions.Execute -ne $null) {$items.Add('Execute', \"$($task.Actions.Execute)\")} \n$items.Add('Argument', \"$($task.Actions.Arguments) -auto\") \nif ($task.Actions.WorkingDirectory -ne $null) {$items.Add('WorkingDirectory',\"$($task.Actions.WorkingDirectory)\")} \n$action = New-ScheduledTaskAction @items\n$task.Actions = $action\nSet-ScheduledTask -InputObject $task"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "apt",
      "MP Summary": "command-line interface",
      "Most Similar TLDR Task": "Update the list of available packages and versions (it's recommended to run this before other `apt` commands)",
      "Most Similar TLDR Script": "sudo apt update",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_68352968: Compile a C++ program (LANShare)"
      ],
      "Top-3 Scripts": [
        "so_68352968: sudo apt install qt5-qmake qt5-default"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "renice",
      "MP Summary": "alter priority of running processes",
      "Most Similar TLDR Task": "Change priority of a running process",
      "Most Similar TLDR Script": "renice -n {{niceness_value}} -p {{pid}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_14371257: Make a program run slowly"
      ],
      "Top-3 Scripts": [
        "so_14371257: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "at",
      "MP Summary": "queue, examine, or delete jobs for later execution",
      "Most Similar TLDR Task": "Execute the commands and email the result using a local mailing program such as sendmail",
      "Most Similar TLDR Script": "at {{hh:mm}} -m",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: find . -type f -name 'abc' | xargs -I '{}' echo '{}' -p | at now"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "opt",
      "MP Summary": "LLVM optimizer",
      "Most Similar TLDR Task": "Optimize the program at level 2 and output the result to another file",
      "Most Similar TLDR Script": "opt -O2 {{path/to/file.bc}} -S -o {{path/to/output_file.bc}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_62469972: Cannot run compiled go files"
      ],
      "Top-3 Scripts": [
        "so_62469972: /opt/SP/executable/hello"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "man",
      "MP Summary": "an interface to the system reference manuals",
      "Most Similar TLDR Task": "Display the location of a manpage rather than the manpage itself",
      "Most Similar TLDR Script": "man -w {{command}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_12285763: control linux terminal using c++ program",
        "so_32361246: Terminal messed up after running ncurses program"
      ],
      "Top-3 Scripts": [
        "so_12285763: man 3 system",
        "so_32361246: man initscr"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "set",
      "MP Summary": "set or unset options and positional parameters",
      "Most Similar TLDR Task": "Notify of job termination immediately",
      "Most Similar TLDR Script": "set -b",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_15557585: How I should make a bash script to run a C++ program?"
      ],
      "Top-3 Scripts": [
        "so_15557585: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "vim",
      "MP Summary": "Vi IMproved, a programmer's text editor",
      "Most Similar TLDR Task": "Open a file at a specified line number",
      "Most Similar TLDR Script": "vim +{{line_number}} {{path/to/file}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_502225: Run command don't run command line programs"
      ],
      "Top-3 Scripts": [
        "au_502225: gnome-terminal -x vim test.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "cpufreq-set",
      "MP Summary": "A small tool which allows to modify cpufreq settings.",
      "Most Similar TLDR Task": "Set the CPU frequency policy of CPU 1 to \"userspace\"",
      "Most Similar TLDR Script": "sudo cpufreq-set -c {{1}} -g {{userspace}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_14371257: Make a program run slowly"
      ],
      "Top-3 Scripts": [
        "so_14371257: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "hello",
      "MP Summary": "friendly greeting program",
      "Most Similar TLDR Task": "Print a text message",
      "Most Similar TLDR Script": "hello --greeting=\"{{greeting_text}}\"",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_62469972: Cannot run compiled go files"
      ],
      "Top-3 Scripts": [
        "so_62469972: ./hello\n\n/opt/SP/executable/hello"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "test",
      "MP Summary": "check file types and compare values",
      "Most Similar TLDR Task": "Test if given variable is empty",
      "Most Similar TLDR Script": "test -z $GIT_BRANCH",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_38405964: Cannot run g++ compiled program Ubuntu"
      ],
      "Top-3 Scripts": [
        "so_38405964: ./test\n\n~/Programs/test/bin/Release/test"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Run a command for each file (use `{}` within the command to access the filename)",
      "Most Similar TLDR Script": "find {{root_path}} -name '{{*.ext}}' -exec {{wc -l {} }}\\;",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: find . -type f -name 'abc' | xargs -I '{}' nohup '{}' -p\n\nfind . -type f -name 'abc' | xargs -p -I '{}' nohup '{}' -p\n\nfind . -type f -name 'abc' | xargs -I '{}' sudo -u $USER '{}' -p\n\nfind . -type f -name 'abc' | xargs -p -I '{}' bash -c \"'{}' -p\"\n\nfind . -type f -name 'abc' | parallel --no-notice -I '{}' \"'{}' -p\"\n\nfind . -type f -name 'abc' | xargs -I '{}' echo '{}' -p | at now"
      ],
      "Explanations about Options": {
        "-name": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils.",
        "-type": "File is of type c:"
      }
    },
    {
      "Command": "free",
      "MP Summary": "Display amount of free and used memory in the system",
      "Most Similar TLDR Task": "Display system memory",
      "Most Similar TLDR Script": "free",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_14371257: Make a program run slowly"
      ],
      "Top-3 Scripts": [
        "so_14371257: free()"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sa",
      "MP Summary": "summarizes accounting information",
      "Most Similar TLDR Task": "Display executable invocations per user, showing responsible usernames",
      "Most Similar TLDR Script": "sudo sa --print-users",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_865389: Program/command has been run most times",
        "so_43609283: C: How can I exec() my program with the same command line arguments as my running program"
      ],
      "Top-3 Scripts": [
        "au_865389: ",
        "so_43609283: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Append a message to the file",
      "Most Similar TLDR Script": "echo \"{{Hello World}}\" >> {{file.txt}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "su_1186450: Linux command: find a program name and run the programs"
      ],
      "Top-3 Scripts": [
        "su_1186450: find . -type f -name 'abc' | xargs -I '{}' echo '{}' -p | at now"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "line",
      "MP Summary": "cache line size",
      "Most Similar TLDR Task": "Read input",
      "Most Similar TLDR Script": "line",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_29306: Error when trying to compile abgx360: C++ compiler cannot create executables"
      ],
      "Top-3 Scripts": [
        "au_29306: /home/eric/Desktop/abgx360gui-1.0.2/configure: line 2441: g++: command not found"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "mkdir",
      "MP Summary": "make directories",
      "Most Similar TLDR Task": "Create directories recursively (useful for creating nested dirs)",
      "Most Similar TLDR Script": "mkdir -p {{path/to/directory}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_26000513: Bash shell script for compiling C++ and manipulating the output"
      ],
      "Top-3 Scripts": [
        "so_26000513: #!/bin/sh\n\nmkdir Output\ng++ -o run run.cpp\n./run\nmv output*.txt Output"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "printf",
      "MP Summary": "format and print data",
      "Most Similar TLDR Task": "Print a text message composed with environment variables",
      "Most Similar TLDR Script": "printf \"{{var1: %s\\tvar2: %s\\n}}\" \"{{$VAR1}}\" \"{{$VAR2}}\"",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_9550488: How do I run an external program?"
      ],
      "Top-3 Scripts": [
        "so_9550488: #include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv)\n{\n    system(\"/usr/share/application/firefox\");\n    printf(\"Command done!\");\n    return 0;\n}"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "youtube-dl",
      "MP Summary": "download videos from youtube.com or other video platforms",
      "Most Similar TLDR Task": "Download a video or playlist at a specific quality",
      "Most Similar TLDR Script": "youtube-dl --format \"{{best[height<=480]}}\" '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_865389: Program/command has been run most times"
      ],
      "Top-3 Scripts": [
        "au_865389: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ac",
      "MP Summary": "print statistics about users' connect time",
      "Most Similar TLDR Task": "Also display additional details",
      "Most Similar TLDR Script": "ac --compatibility",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "au_865389: Program/command has been run most times"
      ],
      "Top-3 Scripts": [
        "au_865389: susan ~ # ac -d\nDec  2  total       22.52\nDec  3  total       77.76\nDec  4  total       48.39\n(...)\nDec 25  total       30.66\nDec 27  total        5.77\nToday   total       53.96"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "basename",
      "MP Summary": "strip directory and suffix from filenames",
      "Most Similar TLDR Task": "Show only the file name from a path, with a suffix removed",
      "Most Similar TLDR Script": "basename {{path/to/file}} {{suffix}}",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_50530121: My PowerShell Script Not Working As Expected (for compiling C++ files)"
      ],
      "Top-3 Scripts": [
        "so_50530121: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sleep",
      "MP Summary": "delay for a specified amount of time",
      "Most Similar TLDR Task": "Delay in minutes",
      "Most Similar TLDR Script": "sleep {{minutes}}m",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_43609283: C: How can I exec() my program with the same command line arguments as my running program"
      ],
      "Top-3 Scripts": [
        "so_43609283: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ls",
      "MP Summary": "list directory contents",
      "Most Similar TLDR Task": "List all files, including hidden files",
      "Most Similar TLDR Script": "ls -a",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "so_26949854: Command not found, c++ application"
      ],
      "Top-3 Scripts": [
        "so_26949854: ls -l Bingo Bingo.cpp main.cpp"
      ],
      "Explanations about Options": {
        "-l": "use a long listing format"
      }
    },
    {
      "Command": "cc",
      "MP Summary": "front-end to the C compiler",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Run command \"program\" as the current user",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "/usr/bin/sudo -u `whoami` `which program`\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            },
            "sudo": {
              "mpsum": "execute a command as another user"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            },
            "sudo": {
              "man8_sudo_4867": "execut singl command superus anoth user edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus"
            }
          }
        }
      },
      "Top-3 Similar Questions": [
        "ul_45340: Why can't I run this C program?"
      ],
      "Top-3 Scripts": [
        "ul_45340: cc -o fork fork.c"
      ],
      "Explanations about Options": {
        "-o": "Save result to outfile."
      }
    }
  ]
}