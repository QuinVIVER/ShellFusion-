{
  "Query": "PowerShell   retrieve JSON object by field value",
  "Answers": [
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Most Similar TLDR Task": "Output all elements from arrays (or all the values from objects) in a JSON file",
      "Most Similar TLDR Script": "jq '.[]' {{file.json}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "ul_588098: Merging multiple JSON files removing duplicate objects by a field",
        "so_69509122: jq compare 2 json files and delete duplicate objects by key value",
        "so_52205484: Get json field value by variable with jq"
      ],
      "Top-3 Scripts": [
        "ul_588098: jq -n '[ inputs[] ] | unique_by(.\"value 1\")'\n\njq -n '[ [inputs[]] | unique_by(.\"value 1\")[] | select( has(\"value 6\") | not )]  '",
        "so_69509122: ",
        "so_52205484: itVersion=$(jq --arg test \"${it}\" '.[$test]' test-config.json)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_54309985: Get JSON Object by property with jq / bash",
        "so_22807666: AWK print field by variable value"
      ],
      "Top-3 Scripts": [
        "so_54309985: echo \"$objects\" | jq 'select(.name == \"thing2\")'",
        "so_22807666: echo $i\n\n# Construct the string of fields\n    for i in $( seq 10 8 130 ); do\n       fields=\"$fields,\\$$i\"\n    done\n    fields=$( echo \"$fields\" | sed 's/^,//' ) # Remove the leading comma\n    ...curl command... | awk '{print '$fields'}'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Replace only on lines matching the line pattern",
      "Most Similar TLDR Script": "sed '/{{line_pattern}}/s/{{find}}/{{replace}}/' {{filename}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_22807666: AWK print field by variable value",
        "so_67836241: Retrieve JSON Object Key Values using SED command"
      ],
      "Top-3 Scripts": [
        "so_22807666: # Construct the string of fields\n    for i in $( seq 10 8 130 ); do\n       fields=\"$fields,\\$$i\"\n    done\n    fields=$( echo \"$fields\" | sed 's/^,//' ) # Remove the leading comma\n    ...curl command... | awk '{print '$fields'}'",
        "so_67836241: sed -n 's/^[[:space:]]*\"name\": \"\\(.*\\)\",/\\1/p' output.txt\n# With GNU sed:\nsed -n 's/^\\s*\"name\":\\s*\"\\(.*\\)\",/\\1/p' output.txt\n\nsed -z 's/.*\"fields\":\\s*{\\s*\"status\": {.*\\s*name\": \"\\([^\"]*\\)\".*/\\1/' output.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Most Similar TLDR Task": "Print the last column of each line in a file, using a comma (instead of space) as a field separator",
      "Most Similar TLDR Script": "awk -F ',' '{print $NF}' {{filename}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_22807666: AWK print field by variable value"
      ],
      "Top-3 Scripts": [
        "so_22807666: # Construct the string of fields\n    for i in $( seq 10 8 130 ); do\n       fields=\"$fields,\\$$i\"\n    done\n    fields=$( echo \"$fields\" | sed 's/^,//' ) # Remove the leading comma\n    ...curl command... | awk '{print '$fields'}'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "id",
      "MP Summary": "print real and effective user and group IDs",
      "Most Similar TLDR Task": "Display the current group identity as a number",
      "Most Similar TLDR Script": "id -g",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_61782147: How to retrieve field from json file",
        "so_60390327: How to get all child recursively in powershell"
      ],
      "Top-3 Scripts": [
        "so_61782147: ",
        "so_60390327: id name          status\n-- ----          ------\n 1 post question FAILED\n10 post answer   PLANNED\n20 post answer   FAILED\n50 any text      PASS\n 2 Load question SUCCESS\n30 post answer   PLANNED"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "test",
      "MP Summary": "check file types and compare values",
      "Most Similar TLDR Task": "Test if given variable is empty",
      "Most Similar TLDR Script": "test -z $GIT_BRANCH",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_52205484: Get json field value by variable with jq"
      ],
      "Top-3 Scripts": [
        "so_52205484: itVersion=$(jq --arg test \"${it}\" '.[$test]' test-config.json)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "strings",
      "MP Summary": "print the strings of printable characters in files.",
      "Most Similar TLDR Task": "Print all strings in a binary",
      "Most Similar TLDR Script": "strings {{file}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_57821266: Remove powershell object from objects array"
      ],
      "Top-3 Scripts": [
        "so_57821266: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort a file preserving only unique lines",
      "Most Similar TLDR Script": "sort -u {{path/to/file}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_23644536: how to sort objects by value length in powershell"
      ],
      "Top-3 Scripts": [
        "so_23644536: $a | sort { $_.value.length }  | select -expand value -first 1"
      ],
      "Explanations about Options": {
        "-d": "consider only blanks and alphanumeric characters",
        "-t": "use SEP instead of non-blank to blank transition",
        "-s": "stabilize sort by disabling last-resort comparison",
        "-f": "fold lower case to upper case characters",
        "-i": "consider only printable characters",
        "-r": "reverse the result of comparisons",
        "-n": "compare according to string numerical value"
      }
    },
    {
      "Command": "seq",
      "MP Summary": "print a sequence of numbers",
      "Most Similar TLDR Task": "Separate the output with a space instead of a newline",
      "Most Similar TLDR Script": "seq -s \" \" 5 3 20",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_22807666: AWK print field by variable value"
      ],
      "Top-3 Scripts": [
        "so_22807666: man seq\n\n$( seq 10 8 130 )\n\n# Construct the string of fields\n    for i in $( seq 10 8 130 ); do\n       fields=\"$fields,\\$$i\"\n    done\n    fields=$( echo \"$fields\" | sed 's/^,//' ) # Remove the leading comma\n    ...curl command... | awk '{print '$fields'}'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Include a given path to the list of directories to search for files specified in .include directives",
      "Most Similar TLDR Script": "as -I {{path/to/directory}} {{file.s}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_69509122: jq compare 2 json files and delete duplicate objects by key value"
      ],
      "Top-3 Scripts": [
        "so_69509122: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "type",
      "MP Summary": "write a description of command type",
      "Most Similar TLDR Task": "Display all locations containing the specified executable",
      "Most Similar TLDR Script": "type -a {{command}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_58768067: add a placeholder into all objects by specific key",
        "so_62564201: How to remove an empty object from a json file"
      ],
      "Top-3 Scripts": [
        "so_58768067: jq 'walk(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } else . end)'\n\njq 'def addNewKey: map_values(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } elif type==\"array\" or type==\"object\" then addNewKey else . end); addNewKey'",
        "so_62564201: walk(if type == \"object\" \n     then with_entries(if .value == {} or .value == [] then empty else . end) \n     else . end)\n\nwalk(if type == \"object\" then with_entries(select(.value | (. != {} and . != []))) else . end)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "cat",
      "MP Summary": "concatenate files and print on the standard output",
      "Most Similar TLDR Task": "Concatenate several files into the target file",
      "Most Similar TLDR Script": "cat {{file1}} {{file2}} > {{target_file}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_59521221: How to update values from a JSON input"
      ],
      "Top-3 Scripts": [
        "so_59521221: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Most Similar TLDR Task": "Look inside a zipped file and determine the file type(s) inside",
      "Most Similar TLDR Script": "file -z {{foo.zip}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_22717018: Get Object Properties One by One in powershell"
      ],
      "Top-3 Scripts": [
        "so_22717018: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "diff",
      "MP Summary": "compare two files",
      "Most Similar TLDR Task": "Compare files, ignoring white spaces",
      "Most Similar TLDR Script": "diff -w {{old_file}} {{new_file}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_66133565: Reading JSON objects in Powershell"
      ],
      "Top-3 Scripts": [
        "so_66133565: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "print",
      "MP Summary": "execute programs via entries in the mailcap file",
      "Most Similar TLDR Task": "Print action can be used to print any file on default run-mailcap tool",
      "Most Similar TLDR Script": "print {{filename}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_22807666: AWK print field by variable value"
      ],
      "Top-3 Scripts": [
        "so_22807666: # Construct the string of fields\n    for i in $( seq 10 8 130 ); do\n       fields=\"$fields,\\$$i\"\n    done\n    fields=$( echo \"$fields\" | sed 's/^,//' ) # Remove the leading comma\n    ...curl command... | awk '{print '$fields'}'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "man",
      "MP Summary": "an interface to the system reference manuals",
      "Most Similar TLDR Task": "Display the location of a manpage rather than the manpage itself",
      "Most Similar TLDR Script": "man -w {{command}}",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_22807666: AWK print field by variable value"
      ],
      "Top-3 Scripts": [
        "so_22807666: man seq"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file2",
      "MP Summary": "kanji code checker.",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_69509122: jq compare 2 json files and delete duplicate objects by key value"
      ],
      "Top-3 Scripts": [
        "so_69509122: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "req",
      "MP Summary": "PKCS#10 certificate request and certificate generating utility",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_48705317: Reading powershell objects returned by Invoke-RestMethod"
      ],
      "Top-3 Scripts": [
        "so_48705317: $req = Invoke-RestMethod $request\n$warranties = $req.AssetWarrantyResponse.AssetEntitlementData[0]\n$dellasset  = $req.AssetWarrantyResponse.productheaderdata"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "and",
      "MP Summary": "auto nice daemon",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_58768067: add a placeholder into all objects by specific key",
        "so_62564201: How to remove an empty object from a json file"
      ],
      "Top-3 Scripts": [
        "so_58768067: jq 'walk(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } else . end)'\n\njq 'def addNewKey: map_values(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } elif type==\"array\" or type==\"object\" then addNewKey else . end); addNewKey'",
        "so_62564201: walk(if type == \"object\" then with_entries(select(.value | (. != {} and . != []))) else . end)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "then",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_58768067: add a placeholder into all objects by specific key",
        "so_62564201: How to remove an empty object from a json file"
      ],
      "Top-3 Scripts": [
        "so_58768067: jq 'walk(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } else . end)'\n\njq 'def addNewKey: map_values(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } elif type==\"array\" or type==\"object\" then addNewKey else . end); addNewKey'",
        "so_62564201: walk(if type == \"object\" \n     then with_entries(if .value == {} or .value == [] then empty else . end) \n     else . end)\n\nwalk(if type == \"object\" then with_entries(select(.value | (. != {} and . != []))) else . end)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "or",
      "MP Summary": "A user friendly system monitoring program.",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_58768067: add a placeholder into all objects by specific key",
        "so_62564201: How to remove an empty object from a json file"
      ],
      "Top-3 Scripts": [
        "so_58768067: jq 'def addNewKey: map_values(if type == \"object\" and has(\"key\") then . + { \"new key\" : null } elif type==\"array\" or type==\"object\" then addNewKey else . end); addNewKey'",
        "so_62564201: walk(if type == \"object\" \n     then with_entries(if .value == {} or .value == [] then empty else . end) \n     else . end)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "config",
      "MP Summary": "build system configuration files",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_66133565: Reading JSON objects in Powershell"
      ],
      "Top-3 Scripts": [
        "so_66133565: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "error",
      "MP Summary": "Postfix error/retry mail delivery agent",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_24620522: Formatting Json Object values in Json File"
      ],
      "Top-3 Scripts": [
        "so_24620522: undefined error in w3wp"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "next",
      "MP Summary": "show the next nmh message",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_35970042: create object in powershell"
      ],
      "Top-3 Scripts": [
        "so_35970042: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "get",
      "MP Summary": "symbolic link to as_run command",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_35970042: create object in powershell"
      ],
      "Top-3 Scripts": [
        "so_35970042: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "val",
      "MP Summary": "validate SCCS files (DEVELOPMENT)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_18034689: In Powershell, how to store an object in array, by \"value\" and not by \"reference\"?"
      ],
      "Top-3 Scripts": [
        "so_18034689: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "Test",
      "MP Summary": "Test display patch window, Set Video LUTs, Install profiles.",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_61294611: Parsing JSON array with PowerShell"
      ],
      "Top-3 Scripts": [
        "so_61294611: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "Table",
      "MP Summary": "read and write ASCII and FITS tables",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_54247698: How do I select specific data from a PowerShell object sourced from JSON data?"
      ],
      "Top-3 Scripts": [
        "so_54247698: Table\n  Users\n    Columns\n    data\n  Roles\n    Columns\n    data"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "jo",
      "MP Summary": "JSON output from a shell",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "ul_628855: Add key/value to json object"
      ],
      "Top-3 Scripts": [
        "ul_628855: jq --argjson newval \"$( jo new_key=\"$somevalue\" )\" '.array[] += $newval' <<<\"$json\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "main",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_42772504: Adding array as HashTable value"
      ],
      "Top-3 Scripts": [
        "so_42772504: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "post",
      "MP Summary": "deliver an nmh message",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_60390327: How to get all child recursively in powershell"
      ],
      "Top-3 Scripts": [
        "so_60390327: id name          status\n-- ----          ------\n 1 post question FAILED\n10 post answer   PLANNED\n20 post answer   FAILED\n50 any text      PASS\n 2 Load question SUCCESS\n30 post answer   PLANNED"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "version",
      "MP Summary": "Web interface for the double-entry accounting tool Beancount",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "None",
      "Most Similar NL2Bash Script": "None",
      "Top-3 Similar Questions": [
        "so_64911766: trouble parsing json in powershell"
      ],
      "Top-3 Scripts": [
        "so_64911766: # This one returns the version number\n$version = ($myJson.profile.properties | Where {$_.name -eq \"SavedPlayerDataVersion\"}).value\n\n# This one checks whether version is 8\n$isVersion8 = $NULL -ne `\n($myJson.profile.properties | Where {$_.name -eq \"SavedPlayerDataVersion\" -and $_.value -eq 8})"
      ],
      "Explanations about Options": {
        "-e": "ENGINESDIR setting."
      }
    }
  ]
}