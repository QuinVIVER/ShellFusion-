{
  "Query": "Installing software center ubuntu",
  "Answers": [
    {
      "Command": "apt-get",
      "MP Summary": "APT package handling utility - command-line interface",
      "Most Similar TLDR Task": "Install a package, or update it to the latest available version",
      "Most Similar TLDR Script": "apt-get install {{package}}",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "au_622897: How do I get Software Updater to update?"
      ],
      "Top-3 Scripts": [
        "au_622897: sudo apt-get update\nsudo apt-get install linux-generic\nsudo apt-get dist-upgrade\n\nsudo apt-get update\nsudo apt-get dist-upgrade"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ifconfig",
      "MP Summary": "configure network interfaces",
      "Most Similar TLDR Task": "Display details of all interfaces, including disabled interfaces",
      "Most Similar TLDR Script": "ifconfig -a",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_588: Shows MAC address of network interface eth0."
      ],
      "Top-3 Scripts": [
        "nl2bash_588: ifconfig eth0 | grep HWaddr |cut -dH -f2|cut -d\\  -f2"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "install",
      "MP Summary": "copy files and set attributes",
      "Most Similar TLDR Task": "Copy files and apply access/modification times of source to destination",
      "Most Similar TLDR Script": "install -p {{path/to/source}} {{path/to/destination}}",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "au_622897: How do I get Software Updater to update?"
      ],
      "Top-3 Scripts": [
        "au_622897: sudo apt-get update\nsudo apt-get install linux-generic\nsudo apt-get dist-upgrade"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Find files modified in the last 7 days, and delete them",
      "Most Similar TLDR Script": "find {{root_path}} -mtime {{-7}} -delete",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_867: display all the directories in the current folder which are atleast one level deep",
        "nl2bash_3785: Find all files/directories named 'findcommandexamples.txt' (case insensitive) in the entire filesystem",
        "nl2bash_4969: Find files that are orphaned"
      ],
      "Top-3 Scripts": [
        "nl2bash_867: find . -mindepth 1 -type d -print0",
        "nl2bash_3785: find  / -iname findcommandexamples.txt",
        "nl2bash_4969: find -nouser"
      ],
      "Explanations about Options": {
        "-print0": "Always print the exact filename, unchanged, even if the output is going to a\n terminal.",
        "-type": "File is of type c:",
        "-iname": "Like -name, but the match is case insensitive. For example, the patterns `fo*' and\n `F??' match the file names `Foo', `FOO', `foo', `fOo', etc. The pattern `*foo*`\n will also match a file called '.foobar'.",
        "-mindepth": "Do not apply any tests or actions at levels less than levels (a non-negative\n integer). -mindepth 1 means process all files except the starting-points.",
        "-nouser": "No user corresponds to file's numeric user ID."
      }
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Apply multiple find-replace expressions to a file",
      "Most Similar TLDR Script": "sed -e 's/{{find}}/{{replace}}/' -e 's/{{find}}/{{replace}}/' {{filename}}",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_11626: Remove trailing spaces from the output of 'hg st -R \"$path\"' and save the result in variable \"var\""
      ],
      "Top-3 Scripts": [
        "nl2bash_11626: var=`hg st -R \"$path\" | sed -e 's/  *$//'`"
      ],
      "Explanations about Options": {
        "-e": "add the script to the commands to be executed"
      }
    },
    {
      "Command": "sudo",
      "MP Summary": "execute a command as another user",
      "Most Similar TLDR Task": "Launch the default shell with superuser privileges",
      "Most Similar TLDR Script": "sudo -i",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "au_622897: How do I get Software Updater to update?"
      ],
      "Top-3 Scripts": [
        "au_622897: sudo apt-get update\nsudo apt-get install linux-generic\nsudo apt-get dist-upgrade\n\nsudo apt-get update\nsudo apt-get dist-upgrade"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "xargs",
      "MP Summary": "build and execute command lines from standard input",
      "Most Similar TLDR Task": "Parallel runs of up to `max-procs` processes at a time; the default is 1. If `max-procs` is 0, xargs will run as many processes as possible at a time",
      "Most Similar TLDR Script": "{{arguments_source}} | xargs -P {{max-procs}} {{command}}",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_8622: search for the word \"damian\" in all the regular/normal files in the /etc folder and display only the matched file name"
      ],
      "Top-3 Scripts": [
        "nl2bash_8622: find /etc -type f | xargs grep -l -i \"damian\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Most Similar TLDR Task": "Invert match for excluding specific strings",
      "Most Similar TLDR Script": "grep -v {{search_pattern}}",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_588: Shows MAC address of network interface eth0.",
        "nl2bash_8622: search for the word \"damian\" in all the regular/normal files in the /etc folder and display only the matched file name"
      ],
      "Top-3 Scripts": [
        "nl2bash_588: ifconfig eth0 | grep HWaddr |cut -dH -f2|cut -d\\  -f2",
        "nl2bash_8622: find /etc -type f | xargs grep -l -i \"damian\""
      ],
      "Explanations about Options": {
        "-l": "Suppress normal output; instead print the name of each input file from which output\n would normally have been printed. The scanning will stop on the first match.",
        "-i": "Ignore case distinctions in patterns and input data, so that characters that differ\n only in case match each other."
      }
    },
    {
      "Command": "cut",
      "MP Summary": "remove sections from each line of files",
      "Most Similar TLDR Task": "Cut out everything from the 3rd character to the end of each line",
      "Most Similar TLDR Script": "cut -c {{3-}}",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_588: Shows MAC address of network interface eth0."
      ],
      "Top-3 Scripts": [
        "nl2bash_588: ifconfig eth0 | grep HWaddr |cut -dH -f2|cut -d\\  -f2"
      ],
      "Explanations about Options": {
        "-d": "use DELIM instead of TAB for field delimiter"
      }
    },
    {
      "Command": "st",
      "MP Summary": "simple terminal",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_11626: Remove trailing spaces from the output of 'hg st -R \"$path\"' and save the result in variable \"var\""
      ],
      "Top-3 Scripts": [
        "nl2bash_11626: var=`hg st -R \"$path\" | sed -e 's/  *$//'`"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bin",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Most Similar TLDR Task": "",
      "Most Similar TLDR Script": "",
      "Most Similar NL2Bash Task": "Pushes current folder to the directory stack.",
      "Most Similar NL2Bash Script": {
        "0": {
          "script": "pushd $(/bin/pwd)\n",
          "command-options": {
            "bin": {
              "mpsum": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)"
            }
          },
          "TLDR_inform": {
            "bin": {
              "man1_bin_22728": ""
            }
          }
        },
        "1": {
          "script": "pushd $PWD\n",
          "command-options": {},
          "TLDR_inform": {}
        },
        "2": {
          "script": "pushd .\n",
          "command-options": {},
          "TLDR_inform": {}
        }
      },
      "Top-3 Similar Questions": [
        "nl2bash_1866: Pushes current folder to the directory stack."
      ],
      "Top-3 Scripts": [
        "nl2bash_1866: pushd $(/bin/pwd)"
      ],
      "Explanations about Options": {}
    }
  ]
}