{
  "Query": "How to parse JSON with shell scripting in Linux?",
  "Answers": [
    {
      "Command": "echo",
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "so_13912990: Parsing JSON in shell script with regex"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_31798477: echo '{\"710\":{\"sysKey\":\"ENTER\"},\"230\":{\"sysKey\":\"DELETE\"},\"804\":{\"sysKey\":\"ADD\"}}' | python -c 'import json,sys;obj=json.load(sys.stdin);obj=dict((z,x) for x, y in obj.items() for z in y.values());print obj[\"DELETE\"];'",
        "so_68486144: $ array=($(sed -nr 's/.*\"(.*)\".*\"(.*)\".*/\\1:\\2/p' json.file))\n$ echo ${array[*]}\nprice1:120.10 price2:110.30 price3:244.45"
      ]
    },
    {
      "Command": "jq",
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "ul_542603: Parsing JSON with jq to get firstname in below JSON"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "ul_542603: jq -r '.[]|select(.middlename|not).firstname'\n\njq -r '.[]|select(has(\"middlename\")|not).firstname'",
        "so_69047630: jq -n --stream '\n [fromstream( \n   inputs\n   | (.[0] | index(\"data\")) as $ix\n   | select($ix)\n   | .[0] |= .[$ix:] )]\n' input.json"
      ]
    },
    {
      "Command": "then",
      "Top-3 Similar Questions": [
        "so_2671300: Parsing result of Diff in Shell Script",
        "so_24644520: How to parse json response in the shell script?",
        "so_42678678: Parsing substrings into shell variables in bash"
      ],
      "Top-3 Scripts": [
        "so_2671300: if diff -q \"$source_file\" \"$dest_file\" > /dev/null; then\n    : # files are the same\nelse\n    : # files are different\nfi\n\nif cmp -s \"$source_file\" \"$dest_file\"; then\n    : # files are the same\nelse\n    : # files are different\nfi",
        "so_24644520: if [[ $KEY == success ]]; then\n    echo \"It was successful.\"\nelse\n    echo \"It wasn't.\"\nfi",
        "so_42678678: re='^\\[([[:digit:]:]+)\\] \\[Server thread/INFO\\]: ([^[:space:]]+) entered area ~ ([^[:space:]]+) - [(]PvP[)] ~'\nline='[18:51:10] [Server thread/INFO]: Tester121 entered area ~ Wilderness - (PvP) ~'\n\nif [[ $line =~ $re ]]; then\n  time=${BASH_REMATCH[1]}\n  player=${BASH_REMATCH[2]}\n  area=${BASH_REMATCH[3]}\nfi"
      ]
    },
    {
      "Command": "read",
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "so_53508885: How to parse JSON in shell script?"
      ],
      "Top-3 Scripts": [
        "so_62263081: declare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_53508885: {\n  IFS= read -r -d '' status1\n  IFS= read -r -d '' details1\n} < <(jq -r '.status + \"\\u0000\" + .details + \"\\u0000\"' <<<\"$response\")",
        "so_4731631: while read line\n do\n     # Check - which is HARD!\n     eval $line\n done"
      ]
    },
    {
      "Command": "line",
      "Top-3 Similar Questions": [
        "so_4731631: How to parse variables from a parameter file in a K Shell script",
        "so_24644520: How to parse json response in the shell script?",
        "so_42678678: Parsing substrings into shell variables in bash"
      ],
      "Top-3 Scripts": [
        "so_4731631: while read line\n do\n     # Check - which is HARD!\n     eval $line\n done",
        "so_24644520: IFS=\\\" read __ KEY __ MESSAGE __ <<< \"$DATA\"\necho \"$DATA\"  ## Your really need to show $DATA and not $MESSAGE right?\n[[ $KEY == success ]]\nexit  ## Exits with code based from current $?. Not necessary if you're on the last line of the script.",
        "so_42678678: re='^\\[([[:digit:]:]+)\\] \\[Server thread/INFO\\]: ([^[:space:]]+) entered area ~ ([^[:space:]]+) - [(]PvP[)] ~'\nline='[18:51:10] [Server thread/INFO]: Tester121 entered area ~ Wilderness - (PvP) ~'\n\nif [[ $line =~ $re ]]; then\n  time=${BASH_REMATCH[1]}\n  player=${BASH_REMATCH[2]}\n  area=${BASH_REMATCH[3]}\nfi"
      ]
    }
  ]
}