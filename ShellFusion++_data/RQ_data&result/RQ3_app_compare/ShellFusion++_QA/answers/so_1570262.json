{
  "Query": "Get exit code of a background process",
  "Answers": [
    {
      "Command": "echo",
      "Top-3 Similar Questions": [
        "so_55157581: bash - how to process exit code when using set -e and get output of command",
        "ul_116098: reliable return code of background process",
        "ul_14270: Get exit status of process that's piped to another"
      ],
      "Top-3 Scripts": [
        "so_55157581: if ! formoutput=$(yad ...); then \n          echo \"AAAA! yad failed! abort ship!\" >&2\nfi",
        "ul_116098: bash -c '(exit 12; foo) & pid=$!\n         while : bar & [ \"$pid\" != \"$!\" ]; do :;done\n         wait \"$pid\"; echo \"$?\"'",
        "ul_14270: $ false | true\n$ echo \"${PIPESTATUS[0]} ${PIPESTATUS[1]}\"\n1 0\n\n$ false | true\n$ echo \"${pipestatus[1]} ${pipestatus[2]}\"\n1 0\n\n$ false | true\n$ retval_bash=\"${PIPESTATUS[0]}\" retval_zsh=\"${pipestatus[1]}\" retval_final=$?\n$ echo $retval_bash $retval_zsh $retval_final\n1 0"
      ]
    },
    {
      "Command": "exit",
      "Top-3 Similar Questions": [
        "ul_116098: reliable return code of background process",
        "so_60589788: Capturing exit code of n child processes",
        "ul_486902: Capture exit code of exit command"
      ],
      "Top-3 Scripts": [
        "ul_116098: bash -c '(exit 12; foo) & pid=$!\n         while : bar & [ \"$pid\" != \"$!\" ]; do :;done\n         wait \"$pid\"; echo \"$?\"'",
        "so_60589788: for (int i = 0; i < 10; i++)\n{\n    p[i] = fork();\n    if (p[i] == 0) {\n        p_child = getpid();\n        exit(p_child % 10);\n    } else if (p[i] == -1) {\n            perror(\"fork\");\n    }        \n}",
        "ul_486902: (exit 3)"
      ]
    },
    {
      "Command": "wait",
      "Top-3 Similar Questions": [
        "so_44616562: Bash get exit code of a waiting process",
        "ul_116098: reliable return code of background process",
        "so_50580309: How to capture PID of a background process"
      ],
      "Top-3 Scripts": [
        "so_44616562: another_script.sh &\n# Do some other stuff\nwait\nexit_code=$?",
        "ul_116098: foo & pid=$!\n...\nbar &\nwait \"$pid\"\n\nwait \"$pid\"\n\nbash -c '(exit 12; foo) & pid=$!\n         while : bar & [ \"$pid\" != \"$!\" ]; do :;done\n         wait \"$pid\"; echo \"$?\"'",
        "so_60589788: for (int i = 0; i < 10; i++)\n{       \n        wait_p = wait(&status);\n        printf(\"Child with PID: %d\", wait_p);\n        if (WIFEXITED(status))\n                printf(\" terminated with STATUS: %d\\n\", WEXITSTATUS(status));\n}"
      ]
    },
    {
      "Command": "then",
      "Top-3 Similar Questions": [
        "so_55157581: bash - how to process exit code when using set -e and get output of command",
        "ul_116098: reliable return code of background process",
        "so_6736060: Return value of background process"
      ],
      "Top-3 Scripts": [
        "so_55157581: if ! formoutput=$(yad ...); then \n          echo \"AAAA! yad failed! abort ship!\" >&2\nfi\n\nif true; then\n    false\nfi",
        "so_6736060: #!/bin/sh\n\nfoo\n\nif [ $? ]\nthen \n    # do something here if process failed\nfi",
        "so_24757154: some_command\n. some_bash \"$?\"\n\nif [[ $1 -ne 0 ]]; then"
      ]
    },
    {
      "Command": "bash",
      "Top-3 Similar Questions": [
        "ul_116098: reliable return code of background process",
        "ul_14270: Get exit status of process that's piped to another",
        "ul_679783: Reliable way to get PID of piped background process"
      ],
      "Top-3 Scripts": [
        "ul_116098: bash -c '(exit 12; foo) & pid=$!\n         while : bar & [ \"$pid\" != \"$!\" ]; do :;done\n         wait \"$pid\"; echo \"$?\"'",
        "ul_679783: bash -c '{ sleep 123 | sleep 456; } & jobs -p; sleep 789'\n\nPID PPID CMD\n 268  265  |   \\_ bash -c { sleep 123 | sleep 456; } & sleep 789\n 269  268  |       \\_ bash -c { sleep 123 | sleep 456; } & sleep 789\n 270  269  |       |   \\_ sleep 123\n 271  269  |       |   \\_ sleep 456\n 272  268  |       \\_ sleep 789\n\nPID PPID CMD\n 392  389  |   \\_ bash -c sleep 123 | sleep 456 & jobs -p; sleep 789\n 393  392  |       \\_ sleep 123\n 394  392  |       \\_ sleep 456\n 395  392  |       \\_ sleep 789",
        "ul_131904: $ bash -c 'echo \"$$\"; echo \"$BASHPID\"; /bin/echo \"$BASHPID\"; /bin/echo $BASHPID &'\n3264\n3264\n3264\n3266"
      ]
    }
  ]
}