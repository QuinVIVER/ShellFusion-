{
  "Query": "How do I pause my shell script for a second before continuing?",
  "Answers": [
    {
      "Command": "to",
      "Top-3 Similar Questions": [
        "so_45107584: Pause for user input but continue after X seconds",
        "so_30697364: Pausing for input in vagrant shell script",
        "so_9171059: Vim pauses if echo in .vimrc file"
      ],
      "Top-3 Scripts": [
        "so_45107584: #!/bin/bash\n\necho \"Press Ctrl+C to cancel\"\nfor i in {5..1}; do\n    echo -n \"$i \"\n    sleep 1\ndone\necho\necho \"Continuing...\"",
        "so_30697364: Vagrant.configure(\"2\") do |config|\n  config.vm.provision \"shell\",\n    inline: \"/bin/sh /path/to/the/script/already/on/the/guest.sh\"\nend",
        "so_9171059: let colorScheme = \"evening\"\nsilent execute \"!echo setting color scheme to \" . colorScheme"
      ]
    },
    {
      "Command": "read",
      "Top-3 Similar Questions": [
        "so_35493539: Need to pause bash script for user examination",
        "ul_9237: How can I pause in a shell script?",
        "au_601270: Script is not pausing until I type soff"
      ],
      "Top-3 Scripts": [
        "so_35493539: #!/usr/bin/env bash\n\nexec 3< /path/to/inputfile.txt\n\nwhile read -u 3 newline; do\n  processed=$(tr '[a-z]' '[A-Z]' <<<\"$newline\")\n  printf '%s\\n' \"$processed\"\n  read go_ahead\ndone",
        "au_601270: read -t",
        "so_4633598: i=1\nfor f in `cat files`; do\n    echo $f\n    if (( i % 10 == 0 )); then  # pause every 10 iterations\n        read\n    fi\n    let \"i++\"\ndone\n\nfor i in `cat files`\ndo\n    echo $i\n    read\ndone\n\nfor i in `cat files`\ndo\n    echo $i\n    read -t 1\ndone"
      ]
    },
    {
      "Command": "echo",
      "Top-3 Similar Questions": [
        "so_45107584: Pause for user input but continue after X seconds",
        "so_16921885: Pausing a script that has been piped to sh",
        "au_601270: Script is not pausing until I type soff"
      ],
      "Top-3 Scripts": [
        "so_45107584: #!/bin/bash\n\necho \"Press Ctrl+C to cancel\"\nfor i in {5..1}; do\n    echo -n \"$i \"\n    sleep 1\ndone\necho\necho \"Continuing...\"",
        "so_16921885: . <(echo \"read -p test\")\n. <(curl \"$url\")",
        "au_601270: signoff () {\n    rm .running\n    # do other stuff\n}\n\necho \"You must type 'soff' to end this script.\"\nwhile ...\ndone\n\nsignoff   # this calls the function\n\n#!/bin/bash\n\nif [[ -f .running ]]; then\n    echo \"I'm already running (on pid $(<.running))\"\n    exit\nfi\n\n# put the current pid in the running file\necho $$ > .running"
      ]
    },
    {
      "Command": "sleep",
      "Top-3 Similar Questions": [
        "so_45107584: Pause for user input but continue after X seconds",
        "au_466373: How do I pause for the specific time between two commands in a script?",
        "so_59804759: Pause \u2018for\u2019 after every 5 loops"
      ],
      "Top-3 Scripts": [
        "so_45107584: #!/bin/bash\n\necho \"Press Ctrl+C to cancel\"\nfor i in {5..1}; do\n    echo -n \"$i \"\n    sleep 1\ndone\necho\necho \"Continuing...\"",
        "au_466373: command1; sleep 30; command2\n\n#!/bin/bash\ncommand1\nsleep 30\ncommand2\nexit",
        "so_59804759: for i in {1..52000}; do\n    wget -c \"download.hebrewbooks.org/downloadhandler.ashx?req=$i\"\n    ((i % 5)) || sleep $X\ndone"
      ]
    },
    {
      "Command": "set",
      "Top-3 Similar Questions": [
        "au_1317997: Screen freezes for about a second every 10-30 seconds",
        "ul_455076: How to pause command when it output some string?",
        "so_5027827: on the fly debug of BASH or SHELL scripts, pause inside loops"
      ],
      "Top-3 Scripts": [
        "au_1317997: sudo swapoff -a           # turn off swap\nsudo rm -i /swapfile      # remove old /swapfile\n\nsudo dd if=/dev/zero of=/swapfile bs=1M count=4096\n\nsudo chmod 600 /swapfile  # set proper file protections\nsudo mkswap /swapfile     # init /swapfile\nsudo swapon /swapfile     # turn on swap\nfree -h                   # confirm 4G RAM and 4G swap",
        "ul_455076: #!/usr/bin/env expect\nspawn -noecho ./mystery\nset spid [exp_pid]\nexpect -ex b { exec kill -STOP $spid; send_user \"STOP\\n\" }\nexpect_user -re . { exec kill -CONT $spid }\nexpect eof",
        "so_5027827: set -x"
      ]
    }
  ]
}