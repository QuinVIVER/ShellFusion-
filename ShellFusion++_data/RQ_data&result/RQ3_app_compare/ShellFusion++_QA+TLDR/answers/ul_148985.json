{
  "Query": "How to get a response from any URL?",
  "Answers": [
    {
      "Command": "curl",
      "MP Summary": "transfer a URL",
      "Most Similar TLDR Task": "Download a file, saving the output under the filename indicated by the URL",
      "Most Similar TLDR Script": "curl -O {{http://example.com/filename}}",
      "Top-3 Similar Questions": [
        "so_53144136: How do I get a string from a curl response for a variable in bash?",
        "so_38732398: How do get the stream urls from kinox.to?",
        "so_69346007: How to get original URL from the cURL output log entry?"
      ],
      "Top-3 Scripts": [
        "so_53144136: code=$(curl ... | jq -r '.code')",
        "so_38732398: $ sh -x curl_stream_ex.sh futurama 7 2\n++ curl -sL 'http://kinox.to/Search.html?q=futurama'\n++ pcregrep -M 'lng\\/2\\.png(\\n|.)+?class=\"Title\"'\ncurl_stream_ex.sh: line 8: pcregrep: command not found\n\n$ curl -sL 'http://kinox.to/aGET/Mirror/Futurama_Into_the_Wild_Green_Yonder&Hoster=52&Mirror=2'\n{\"Stream\":\"<a href=\\\"http:\\/\\/shared.sx\\/992ba73be8\\\" target=\\\"_blank\\\"><img src=\\\"\\/gr\\/sys\\/player\\/default.flash.png\\\" usemap=\\\"#Link\\\" width=\\\"752\\\" height=\\\"370\\\" border=\\\"52\\\" \\/><\\/a><map name=\\\"Link\\\"><area shape=\\\"rect\\\" coords=\\\"220,250,515,310\\\" target=\\\"_blank\\\" href=\\\"\\\" alt=\\\"Download This Movie\\\" title=\\\"Download This Movie\\\"><\\/map>\",\"Replacement\":\"<li id=\\\"Hoster_52\\\" class=\\\"MirBtn MirBtnA MirBaseStyleflv MirStyle52\\\" rel=\\\"Futurama_Into_the_Wild_Green_Yonder&amp;Hoster=52&amp;Mirror=3\\\">\\t<div class=\\\"Named\\\">Shared.sx<\\/div>\\t<div class=\\\"Data\\\"><b>Mirror<\\/b>: 3\\/3<br \\/><b>Vom<\\/b>: 25.10.2015<\\/div><\\/li>\",\"HosterName\":\"Shared.sx\",\"HosterHome\":\"http:\\/\\/shared.sx\"}",
        "so_69346007: while read LINE ; do\n    print \"REQUESTED URL: $LINE\" >> output.txt;\n    curl $LINE >> output.txt 2>&1;\ndone < url-list.txt"
      ],
      "Explanations about Options": {
        "-s": "Silent or quiet mode. Don't show progress meter or error messages. Makes Curl\n mute. It will still output the data you ask for, potentially even to the\n terminal/stdout unless you redirect it."
      }
    },
    {
      "Command": "tr",
      "MP Summary": "translate or delete characters",
      "Most Similar TLDR Task": "Replace all occurrences of a character in a file, and print the result",
      "Most Similar TLDR Script": "tr {{find_character}} {{replace_character}} < {{filename}}",
      "Top-3 Similar Questions": [
        "so_38732398: How do get the stream urls from kinox.to?",
        "so_50552963: bash: trouble getting file size from remote url"
      ],
      "Top-3 Scripts": [
        "so_38732398: tr -d '\\'\n\ntr -d '\\\\'",
        "so_50552963: | tr -d '\\r'"
      ],
      "Explanations about Options": {
        "-d": "delete characters in SET1, do not translate"
      }
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Top-3 Similar Questions": [
        "ul_347732: Extracting substring from environment variable",
        "au_887234: How to get the URL from a firefox tab from the terminal?",
        "so_32744303: bash: extract URLs from a string"
      ],
      "Top-3 Scripts": [
        "ul_347732: $ export FOO=http://unix.stackexchange.com/questions/ask\n$ tmp=\"${FOO#*//}\" # remove http://\n$ echo \"${tmp%%/*}\" # remove everything after the first /\nunix.stackexchange.com\n\n$ echo \"$FOO\" | python -c 'import urlparse; import sys;  print urlparse.urlparse(sys.stdin.read()).netloc' \nunix.stackexchange.com",
        "au_887234: printf \"\\n# CurrentSession:\\n\"; \\\ncat $HOME/.mozilla/firefox/*.default/sessionstore-backups/recovery.js | \\\nsed \"s/\\\\_closedTabs/\\{\\\"url\\\":\\\"# ClosedTabs:\\\"attributes/g\" | \\\nsed \"s/\\\\lastSessionState/\\{\\\"url\\\":\\\"# LastSession:\\\"attributes/\" | \\\nsed \"s/{/\\n{/g\" | \\\negrep -o 'url\":\"*.*attributes*' | \\\ncut -d\\\" -f3 | \\\nsed \"s/#/\\n#/\" \\\n; echo\n\n; echo\n\nprintf \"\\n# CurrentSession:\\n\"; \\\ncat $HOME/.mozilla/firefox/*.default/sessionstore-backups/recovery.js | \\\nsed \"s/\\\\_closedTabs/\\{\\\"url\\\":\\\"# ClosedTabs:/g\" | \\\nsed \"s/\\\\lastSessionState/\\{\\\"url\\\":\\\"# LastSession:/\" | \\\nsed \"s/entries/url\\\":\\\"# TAB:/g\" | \\\nsed \"s/{/\\n{/g\" | \\\negrep 'url\":\"*' | \\\ncut -d\\\" -f4 | \\\nsed \"s/#/\\n#/\" \\\n; echo",
        "so_32744303: #!/bin/bash\noutput='Array { Dict { Name = afp://or-fs-001/vol1 URL = afp://or-fs-001/vol1 } Dict { Name = smb://or-fs-001/vol1 URL = smb://or-fs-001/vol1 } Dict { Name = vnc://or-fs-001/vol1 URL = vnc://or-fs-001/vol1 } Dict { Name = ftp://or-fs-001/vol1 URL = ftp://or-fs-001/vol1 } }'\n\ncount=$(echo \"$output\" | grep -o 'Name =' | wc -l)\nnames=($(grep -o 'Name = [^ ]\\+' <<< \"$output\" | cut -f3- -d' '))\necho $count = ${#names[@]}\nfor name in \"${names[@]}\" ; do\n    echo \"$name\"\ndone"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "pip",
      "MP Summary": "A tool for installing and managing Python packages",
      "Most Similar TLDR Task": "Save installed packages to file",
      "Most Similar TLDR Script": "pip freeze > {{requirements.txt}}",
      "Top-3 Similar Questions": [
        "so_56819108: Get value from xml response in Python"
      ],
      "Top-3 Scripts": [
        "so_56819108: pip install lxml\n\npip install bs4"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "dig",
      "MP Summary": "DNS lookup utility",
      "Most Similar TLDR Task": "Perform iterative queries and display the entire trace path to resolve a domain name",
      "Most Similar TLDR Script": "dig +trace {{example.com}}",
      "Top-3 Similar Questions": [
        "ul_444630: Get the domain name from IP address"
      ],
      "Top-3 Scripts": [
        "ul_444630: dig -x 8.8.8.8 +short | awk -F '.' '{print $2\".\"$3}'"
      ],
      "Explanations about Options": {
        "-x": "Simplified reverse lookups, for mapping addresses to names. The addr is an IPv4\n address in dotted-decimal notation, or a colon-delimited IPv6 address. When the -x is\n used, there is no need to provide the name, class and type arguments. dig\n automatically performs a lookup for a name like 94.2.0.192.in-addr.arpa and sets the\n query type and class to PTR and IN respectively. IPv6 addresses are looked up using\n nibble format under the IP6.ARPA domain."
      }
    }
  ]
}