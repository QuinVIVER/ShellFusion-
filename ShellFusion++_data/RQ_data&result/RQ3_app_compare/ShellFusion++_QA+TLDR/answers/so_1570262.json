{
  "Query": "Get exit code of a background process",
  "Answers": [
    {
      "Command": "false",
      "MP Summary": "return false value",
      "Most Similar TLDR Task": "Return an exit code of 1",
      "Most Similar TLDR Script": "false",
      "Top-3 Similar Questions": [
        "so_55157581: bash - how to process exit code when using set -e and get output of command",
        "ul_14270: Get exit status of process that's piped to another",
        "so_3299502: How to return spawned process exit code in Expect script?"
      ],
      "Top-3 Scripts": [
        "so_55157581: if true; then\n    false\nfi",
        "ul_14270: $ false | true\n$ echo \"${PIPESTATUS[0]} ${PIPESTATUS[1]}\"\n1 0\n\n$ false | true\n$ echo \"${pipestatus[1]} ${pipestatus[2]}\"\n1 0\n\n$ false | true\n$ retval_bash=\"${PIPESTATUS[0]}\" retval_zsh=\"${pipestatus[1]}\" retval_final=$?\n$ echo $retval_bash $retval_zsh $retval_final\n1 0",
        "so_3299502: spawn false\nexpect eof\ncatch wait result\nexit [lindex $result 3]"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the exit code of the last command executed",
      "Most Similar TLDR Script": "exit",
      "Top-3 Similar Questions": [
        "ul_116098: reliable return code of background process",
        "so_60589788: Capturing exit code of n child processes",
        "ul_486902: Capture exit code of exit command"
      ],
      "Top-3 Scripts": [
        "ul_116098: bash -c '(exit 12; foo) & pid=$!\n         while : bar & [ \"$pid\" != \"$!\" ]; do :;done\n         wait \"$pid\"; echo \"$?\"'",
        "so_60589788: for (int i = 0; i < 10; i++)\n{\n    p[i] = fork();\n    if (p[i] == 0) {\n        p_child = getpid();\n        exit(p_child % 10);\n    } else if (p[i] == -1) {\n            perror(\"fork\");\n    }        \n}",
        "ul_486902: (exit 3)"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "true",
      "MP Summary": "do nothing, successfully",
      "Most Similar TLDR Task": "Return a successful exit code",
      "Most Similar TLDR Script": "true",
      "Top-3 Similar Questions": [
        "ul_14270: Get exit status of process that's piped to another",
        "so_17359779: Getting screenshot of background windows",
        "so_3299502: How to return spawned process exit code in Expect script?"
      ],
      "Top-3 Scripts": [
        "ul_14270: $ false | true\n$ echo \"${PIPESTATUS[0]} ${PIPESTATUS[1]}\"\n1 0\n\n$ false | true\n$ echo \"${pipestatus[1]} ${pipestatus[2]}\"\n1 0\n\n$ false | true\n$ retval_bash=\"${PIPESTATUS[0]}\" retval_zsh=\"${pipestatus[1]}\" retval_final=$?\n$ echo $retval_bash $retval_zsh $retval_final\n1 0",
        "so_17359779: window 2 where visible is true",
        "so_3299502: spawn true\nexpect eof\ncatch wait result\nexit [lindex $result 3]"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "wait",
      "MP Summary": "await process completion",
      "Most Similar TLDR Task": "Wait for a process to finish given its process ID (PID) and return its exit status",
      "Most Similar TLDR Script": "wait {{pid}}",
      "Top-3 Similar Questions": [
        "so_44616562: Bash get exit code of a waiting process",
        "ul_116098: reliable return code of background process",
        "so_50580309: How to capture PID of a background process"
      ],
      "Top-3 Scripts": [
        "so_44616562: another_script.sh &\n# Do some other stuff\nwait\nexit_code=$?",
        "ul_116098: foo & pid=$!\n...\nbar &\nwait \"$pid\"\n\nwait \"$pid\"\n\nbash -c '(exit 12; foo) & pid=$!\n         while : bar & [ \"$pid\" != \"$!\" ]; do :;done\n         wait \"$pid\"; echo \"$?\"'",
        "so_50580309: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "pgrep",
      "MP Summary": "look up or signal processes based on name and other attributes",
      "Most Similar TLDR Task": "Return PIDs of any running processes with a matching command string",
      "Most Similar TLDR Script": "pgrep {{process_name}}",
      "Top-3 Similar Questions": [
        "ul_67635: Elegantly get list of children processes"
      ],
      "Top-3 Scripts": [
        "ul_67635: pgrep -P 1234"
      ],
      "Explanations about Options": {
        "-P": "Only match processes whose parent process ID is listed."
      }
    }
  ]
}