{
  "Query": "Kill any service running at a specific port",
  "Answers": [
    {
      "Command": "fuser",
      "MP Summary": "identify processes using files or sockets",
      "Most Similar TLDR Task": "Kill all processes accessing a file or directory (sends the `SIGKILL` signal)",
      "Most Similar TLDR Script": "fuser --kill {{path/to/file_or_directory}}",
      "Top-3 Similar Questions": [
        "so_45399359: how to kill port 80 in ubuntu",
        "ul_244531: Kill process running on port 80"
      ],
      "Top-3 Scripts": [
        "so_45399359: fuser -k -n tcp 80",
        "ul_244531: sudo apt-get install psmisc\nsudo fuser 80/tcp\n\n80/tcp:               1858  1867  1868  1869  1871"
      ],
      "Explanations about Options": {
        "-n": "Select a different name space. The name spaces file (file names, the default), udp\n (local UDP ports), and tcp (local TCP ports) are supported. For ports, either the\n port number or the symbolic name can be specified. If there is no ambiguity, the\n shortcut notation name/space (e.g., 80/tcp) can be used.",
        "-k": "Kill processes accessing the file. Unless changed with -SIGNAL, SIGKILL is sent.\n An fuser process never kills itself, but may kill other fuser processes. The\n effective user ID of the process executing fuser is set to its real user ID before\n attempting to kill."
      }
    },
    {
      "Command": "nc",
      "MP Summary": "arbitrary TCP and UDP connections and listens",
      "Most Similar TLDR Task": "Listen on a specified port and print any data received",
      "Most Similar TLDR Script": "nc -l {{port}}",
      "Top-3 Similar Questions": [
        "ul_246903: Kill process on specific port"
      ],
      "Top-3 Scripts": [
        "ul_246903: # Start a process (nc) that listens on port 8080\n$ nc -l 8080 & bg\n[1] 17454\n[1] nc -l 8080\n\n# Get the process listening on port 8080:\n$ fstat | grep :8080\ncmihai   nc         17454    3* internet stream tcp 0x0 *:8080\n\n$ kill $(portpid 8080)\n[1] + Terminated           nc -l 8080"
      ],
      "Explanations about Options": {
        "-l": "Listen for an incoming connection rather than initiating a connection to a remote\n host. The destination and port to listen on can be specified either as non-optional\n arguments, or with options -s and -p respectively. Cannot be used together with -x\n or -z. Additionally, any timeouts specified with the -w option are ignored."
      }
    },
    {
      "Command": "firewall-cmd",
      "MP Summary": "firewalld command line client",
      "Most Similar TLDR Task": "Permanently close the port for a service in the specified zone (like port `80` when in the `public` zone)",
      "Most Similar TLDR Script": "firewall-cmd --permanent --zone={{public}} --remove-service={{http}}",
      "Top-3 Similar Questions": [
        "ul_508696: Firewalld: block outgoing connections on specific port"
      ],
      "Top-3 Scripts": [
        "ul_508696: firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p tcp -m tcp --dport=9000 -j DROP\nfirewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 1 -j ACCEPT\n\nfirewall-cmd --reload"
      ],
      "Explanations about Options": {
        "--reload": "Reload firewall rules and keep state information. Current permanent configuration will\n become new runtime configuration, i.e. all runtime only changes done until reload are\n lost with reload if they have not been also in permanent configuration."
      }
    },
    {
      "Command": "ssh",
      "MP Summary": "OpenSSH SSH client (remote login program)",
      "Most Similar TLDR Task": "Connect to a remote server using a specific port",
      "Most Similar TLDR Script": "ssh {{username}}@{{remote_host}} -p {{2222}}",
      "Top-3 Similar Questions": [
        "su_1283597: SSH disable port forward remotely instead of killing process on the server"
      ],
      "Top-3 Scripts": [
        "su_1283597: ssh -f \u2026\n\n#!/bin/sh\nport=12345\naddress=user@server\nwhile :; do\n  ssh $address '[ -f ~/.tunnel.pid ] && kill `cat ~/.tunnel.pid` && rm ~/.tunnel.pid'\n  ssh -o ExitOnForwardFailure=yes -R ${port}:localhost:22 $address 'echo $PPID > ~/.tunnel.pid; exec sleep infinity'\n  sleep 60\ndone"
      ],
      "Explanations about Options": {
        "-f": "Requests ssh to go to background just before command execution. This is useful if\n ssh is going to ask for passwords or passphrases, but the user wants it in the\n background. This implies -n. The recommended way to start X11 programs at a remote\n site is with something like ssh -f host xterm.",
        "-o": "Can be used to give options in the format used in the configuration file. This is\n useful for specifying options for which there is no separate command-line flag. For\n full details of the options listed below, and their possible values, see\n ssh_config(5)."
      }
    },
    {
      "Command": "autossh",
      "MP Summary": "monitor and restart ssh sessions",
      "Most Similar TLDR Task": "Run autossh in the background, with no monitoring port, no remote shell, exiting if the port forward fails",
      "Most Similar TLDR Script": "autossh -f -M 0 -N -o \"ServerAliveInterval 10\" -o \"ServerAliveCountMax 3\" -o ExitOnForwardFailure=yes -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}",
      "Top-3 Similar Questions": [
        "su_1283597: SSH disable port forward remotely instead of killing process on the server"
      ],
      "Top-3 Scripts": [
        "su_1283597: "
      ],
      "Explanations about Options": {}
    }
  ]
}