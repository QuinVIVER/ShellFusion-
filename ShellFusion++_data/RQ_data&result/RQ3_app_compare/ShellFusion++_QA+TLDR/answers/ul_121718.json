{
  "Query": "How to parse JSON with shell scripting in Linux?",
  "Answers": [
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Most Similar TLDR Task": "Output the value of multiple keys as a new JSON object (assuming the input JSON has the keys `key_name` and `other_key_name`)",
      "Most Similar TLDR Script": "cat {{file.json}} | jq '{{{my_new_key}}: .{{key_name}}, {{my_other_key}}: .{{other_key_name}}}'",
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "ul_542603: Parsing JSON with jq to get firstname in below JSON"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_65014334: ",
        "ul_542603: jq -r '.[]|select(.middlename|not).firstname'\n\njq -r '.[]|select(has(\"middlename\")|not).firstname'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the specified exit code",
      "Most Similar TLDR Script": "exit {{exit_code}}",
      "Top-3 Similar Questions": [
        "so_24644520: How to parse json response in the shell script?",
        "so_20662343: Parsing oracle SQLPLUS error message in shell script for emailing"
      ],
      "Top-3 Scripts": [
        "so_24644520: case \"$KEY\" in\nsuccess)\n    echo \"Success message: $MESSAGE\"\n    exit 0\n    ;;\nerror)\n    echo \"Error message: $MESSAGE\"\n    exit 1\n    ;;\nesac\n\nIFS=\\\" read __ KEY __ MESSAGE __ <<< \"$DATA\"\necho \"$DATA\"  ## Your really need to show $DATA and not $MESSAGE right?\n[[ $KEY == success ]]\nexit  ## Exits with code based from current $?. Not necessary if you're on the last line of the script.",
        "so_20662343: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ruby",
      "MP Summary": "Interpreted object-oriented scripting language",
      "Most Similar TLDR Task": "Execute a Ruby script",
      "Most Similar TLDR Script": "ruby {{script.rb}}",
      "Top-3 Similar Questions": [
        "so_33537039: Json parsing with Linux shell script"
      ],
      "Top-3 Scripts": [
        "so_33537039: ruby -e 'require \"json\"; puts JSON.parse(File.read(\"data.json\"))[\"entries\"][0][\"author\"][\"value\"]'"
      ],
      "Explanations about Options": {
        "-e": "Specifies script from command-line while telling Ruby not to search the rest\n of the arguments for a script file name."
      }
    },
    {
      "Command": "python",
      "MP Summary": "an interpreted, interactive, object-oriented programming language",
      "Most Similar TLDR Task": "Execute script as part of an interactive shell",
      "Most Similar TLDR Script": "python -i {{script.py}}",
      "Top-3 Similar Questions": [
        "so_31798477: How to parse parameter's name from JSON with python"
      ],
      "Top-3 Scripts": [
        "so_31798477: echo '{\"710\":{\"sysKey\":\"ENTER\"},\"230\":{\"sysKey\":\"DELETE\"},\"804\":{\"sysKey\":\"ADD\"}}' | python -c 'import json,sys;obj=json.load(sys.stdin);obj=dict((z,x) for x, y in obj.items() for z in y.values());print obj[\"DELETE\"];'"
      ],
      "Explanations about Options": {
        "-c": "Specify the command to execute (see next section). This terminates the option list\n (following options are passed as arguments to the command)."
      }
    },
    {
      "Command": "node",
      "MP Summary": "server-side JavaScript runtime",
      "Most Similar TLDR Task": "Activate inspector, pausing execution until a debugger is connected once source code is fully parsed",
      "Most Similar TLDR Script": "node --no-lazy --inspect-brk {{path/to/file}}",
      "Top-3 Similar Questions": [
        "so_33537039: Json parsing with Linux shell script"
      ],
      "Top-3 Scripts": [
        "so_33537039: node -e 'console.log(require(\"./data.json\").entries[0].author.value)'"
      ],
      "Explanations about Options": {
        "-e": "Evaluate string as JavaScript."
      }
    }
  ]
}