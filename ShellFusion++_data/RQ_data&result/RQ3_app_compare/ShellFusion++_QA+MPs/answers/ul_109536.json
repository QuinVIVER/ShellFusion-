{
  "Query": "If you ^Z from a process, it gets \"stopped\". How do you switch back in?",
  "Answers": [
    {
      "Command": "start-stop-daemon",
      "MP Summary": "start and stop system daemon programs",
      "Top-3 Similar Questions": [
        "so_14321829: UNIX - Stopping a custom service",
        "so_27187182: Stop Daemon not terminating child java process"
      ],
      "Top-3 Scripts": [
        "so_14321829: ",
        "so_27187182: start-stop-daemon -S -m -p $PIDFILE --name myapp --exec java -- -jar ./myapp.jar"
      ],
      "Explanations about Options": {
        "-a": "With --start, start the process specified by pathname. If not specified, defaults\n to the argument given to --exec.",
        "-p": "Check whether a process has created the file pid-file.",
        "--exec": "Check for processes that are instances of this executable. The executable argument\n should be an absolute pathname. Note: this might not work as intended with\n interpreted scripts, as the executable will point to the interpreter. Take into\n account processes running from inside a chroot will also be matched, so other match\n restrictions might be needed.",
        "-r": "Chdir and chroot to root before starting the process. Please note that the pidfile\n is also written after the chroot.",
        "--name": "Check for processes with the name process-name. The process-name is usually the\n process filename, but it could have been changed by the process itself. Note: on\n most systems this information is retrieved from the process comm name from the\n kernel, which tends to have a relatively short length limit (assuming more than 15\n characters is non-portable).",
        "-S": "Check for the existence of a specified process. If such a process exists,\n start-stop-daemon does nothing, and exits with error status 1 (0 if --oknodo is\n specified). If such a process does not exist, it starts an instance, using either\n the executable specified by --exec or, if specified, by --startas. Any arguments\n given after - on the command line are passed unmodified to the program being\n started."
      }
    },
    {
      "Command": "kill",
      "MP Summary": "send a signal to a process",
      "Top-3 Similar Questions": [
        "ul_116959: There are stopped jobs (on bash exit)",
        "ul_659634: Can not stop nohup process",
        "so_13131765: How do you stop two concurrent processes?"
      ],
      "Top-3 Scripts": [
        "ul_116959: user@mysystem:~$ ps\n  PID TTY          TIME CMD\n16174 pts/3    00:00:00 bash\n17781 pts/3    00:00:00 python\n18276 pts/3    00:00:00 ps\nuser@mysystem:~$ kill 17781\n[1]+  Killed                  python\nuser@mysystem:~$\n\nuser@mysystem:~$ kill %1\n[1]+  Terminated              python",
        "ul_659634: kill 1336769\n\n$ kill 1492051\n$ ps -ef | grep sleep\nljm      1492329 1492069  0 16:59 pts/1    00:00:00 grep sleep",
        "so_13131765: kill -$$"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "killall",
      "MP Summary": "kill processes by name",
      "Top-3 Similar Questions": [
        "so_28493878: c9.io stop apache to free up process.env.PORT"
      ],
      "Top-3 Scripts": [
        "so_28493878: sudo killall -9 apache2"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "fg",
      "MP Summary": "run jobs in the foreground",
      "Top-3 Similar Questions": [
        "ul_109536: If you ^Z from a process, it gets \"stopped\". How do you switch back in?",
        "ul_116959: There are stopped jobs (on bash exit)",
        "so_17621798: Linux process in background - \"Stopped\" in jobs?"
      ],
      "Top-3 Scripts": [
        "ul_109536: $ help fg\nfg: fg [job_spec]\n    Move job to the foreground.\n\n    Place the job identified by JOB_SPEC in the foreground, making it the\n    current job.  If JOB_SPEC is not present, the shell's notion of the\n    current job is used.\n\n    Exit Status:\n    Status of command placed in foreground, or failure if an error occurs.",
        "ul_116959: user@mysystem:~$ fg 1\npython",
        "so_17621798: fg %job"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bg",
      "MP Summary": "run jobs in the background",
      "Top-3 Similar Questions": [
        "ul_109536: If you ^Z from a process, it gets \"stopped\". How do you switch back in?",
        "ul_312767: How to stop ./configure script?"
      ],
      "Top-3 Scripts": [
        "ul_109536: $ help bg\nbg: bg [job_spec ...]\n    Move jobs to the background.\n\n    Place the jobs identified by each JOB_SPEC in the background, as if they\n    had been started with `&'.  If JOB_SPEC is not present, the shell's notion\n    of the current job is used.\n\n    Exit Status:\n    Returns success unless job control is not enabled or an error occurs.",
        "ul_312767: "
      ],
      "Explanations about Options": {}
    }
  ]
}