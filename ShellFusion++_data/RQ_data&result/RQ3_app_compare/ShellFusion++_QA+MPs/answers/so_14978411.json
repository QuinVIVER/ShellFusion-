{
  "Query": "HTTP POST and GET using cURL in Linux",
  "Answers": [
    {
      "Command": "nginx",
      "MP Summary": "HTTP and reverse proxy server, mail proxy server",
      "Top-3 Similar Questions": [
        "so_47287018: How to get a response number of a HTTPS request"
      ],
      "Top-3 Scripts": [
        "so_47287018: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "curl",
      "MP Summary": "transfer a URL",
      "Top-3 Similar Questions": [
        "so_46853407: How to get correct response from curl in executable bash script?",
        "so_64271111: Getting output of curl command in a variable",
        "so_52242133: How to get file from POST data in Bash CGI script?"
      ],
      "Top-3 Scripts": [
        "so_46853407: #!/bin/bash\nresult=\"$(curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" https://jsonplaceholder.typicode.com/posts/1)\"\necho the result is: \"${result}\"",
        "so_64271111: out=$(curl -u user:password -k ${second_url})\n# or \nout=$(curl -u user:password -k abc.com/${jobid}/result/ --get -d output=json) \n# and\necho \"$out\"",
        "so_52242133: curl http://localhost:81/cgi-bin/wtf.sh -F \"MyFile=@myfile.txt\""
      ],
      "Explanations about Options": {
        "-F": "(HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form\n in which a user has pressed the submit button. This causes curl to POST data using\n the Content-Type multipart/form-data according to RFC 2388.",
        "-d": "(HTTP) Sends the specified data in a POST request to the HTTP server, in the same\n way that a browser does when a user has filled in an HTML form and presses the\n submit button. This will cause curl to pass the data to the server using the\n content-type application/x-www-form-urlencoded. Compare to -F, --form.",
        "--get": "When used, this option will make all data specified with -d, --data, --data-binary\n or --data-urlencode to be used in an HTTP GET request instead of the POST request\n that otherwise would be used. The data will be appended to the URL with a '?'\n separator.",
        "-i": "Include the HTTP response headers in the output. The HTTP response headers can\n include things like server name, cookies, date of the document, HTTP version and\n more...",
        "-u": "Specify the user name and password to use for server authentication. Overrides -n,\n --netrc and --netrc-optional.",
        "-k": "(TLS) By default, every SSL connection curl makes is verified to be secure. This\n option allows curl to proceed and operate even for server connections otherwise\n considered insecure."
      }
    },
    {
      "Command": "then",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Top-3 Similar Questions": [
        "so_52242133: How to get file from POST data in Bash CGI script?",
        "ul_505984: Getting exit code from curl in bash script",
        "so_44663438: Get status starting Java HTTP server in shell script"
      ],
      "Top-3 Scripts": [
        "so_52242133: ",
        "ul_505984: ",
        "so_44663438: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bin",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Top-3 Similar Questions": [
        "ul_505984: Getting exit code from curl in bash script"
      ],
      "Top-3 Scripts": [
        "ul_505984: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "from",
      "MP Summary": "print names of those who have sent mail",
      "Top-3 Similar Questions": [
        "ul_325490: How to get last part of http link in Bash?"
      ],
      "Top-3 Scripts": [
        "ul_325490: ${haystack##needle} # removes any matching 'needle' from the\n                    # beginning of the variable 'haystack'"
      ],
      "Explanations about Options": {}
    }
  ]
}