{
  "Query": "grep exclude multiple strings",
  "Answers": [
    {
      "Command": "pcregrep",
      "MP Summary": "a grep with Perl-compatible regular expressions.",
      "Top-3 Similar Questions": [
        "ul_326519: PCRE-regex Use grep to exclude a capturing group"
      ],
      "Top-3 Scripts": [
        "ul_326519: pcregrep -o1 -o2 --om-separator=' ' '.zoo.(\\d+).*:\\s+(.*)'"
      ],
      "Explanations about Options": {
        "--om-separator": "Specify a separating string for multiple occurrences of -o. The default is an\n empty string. Separating strings are never coloured."
      }
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Top-3 Similar Questions": [
        "so_9153170: Grep for a single line comment but exclude stuff like http://example.com",
        "ul_326519: PCRE-regex Use grep to exclude a capturing group"
      ],
      "Top-3 Scripts": [
        "so_9153170: $ echo $'http://www.example.com\\n   // single line comment' | grep \"^ *//.*\"\n   // single line comment",
        "ul_326519: echo foobar | grep -Po 'foo|foob'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Top-3 Similar Questions": [
        "so_32993085: How do I grep for a string excluding some other string",
        "su_509601: grep multiple exclude extension",
        "ul_439299: grep to file to exclude content"
      ],
      "Top-3 Scripts": [
        "so_32993085: grep -v 'anotherString' | grep -A 10 'myString'",
        "su_509601: grep -r --exclude=\\*.{html,htm,js} \"li\" *",
        "ul_439299: grep -vi -f greplist.txt myfile.txt > newfile.txt"
      ],
      "Explanations about Options": {
        "-v": "Invert the sense of matching, to select non-matching lines.",
        "--exclude": "Skip any command-line file with a name suffix that matches the pattern GLOB, using\n wildcard matching; a name suffix is either the whole name, or a trailing part that\n starts with a non-slash character immediately after a slash (/) in the name. When\n searching recursively, skip any subfile whose base name matches GLOB; the base name\n is the part after the last slash. A pattern can use *, ?, and [...] as wildcards,\n and \\ to quote a wildcard or backslash character literally.",
        "-f": "Obtain patterns from FILE, one per line. If this option is used multiple times or\n is combined with the -e (--regexp) option, search for all patterns given. The\n empty file contains zero patterns, and therefore matches nothing.",
        "-r": "Read all files under each directory, recursively, following symbolic links only if\n they are on the command line. Note that if no file operand is given, grep searches\n the working directory. This is equivalent to the -d recurse option.",
        "-i": "Ignore case distinctions in patterns and input data, so that characters that differ\n only in case match each other."
      }
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Top-3 Similar Questions": [
        "so_28647088: grep for a line in a file then remove the line",
        "so_39463714: Need grep statement to exclude lines",
        "so_43342178: Search files for a string but exclude another string"
      ],
      "Top-3 Scripts": [
        "so_28647088: awk -i inplace -v rmv=\"test\" '!index($0,rmv)' example.txt",
        "so_39463714: awk '/IN=eth0/ && !/SRC=0\\.0\\.0\\.0/ && !/SRC=10\\.0\\.1\\.15/' uwf.log",
        "so_43342178: awk '/xc2/ && !/xbb/' <yourfile>"
      ],
      "Explanations about Options": {
        "-v": "FS=sepstring"
      }
    },
    {
      "Command": "gawk",
      "MP Summary": "pattern scanning and processing language",
      "Top-3 Similar Questions": [
        "ul_261263: Print some lines before and after pattern match excluding lines matching another patterns"
      ],
      "Top-3 Scripts": [
        "ul_261263: gawk 'NF > 0' fileName  |ggrep -C5 pattern"
      ],
      "Explanations about Options": {}
    }
  ]
}