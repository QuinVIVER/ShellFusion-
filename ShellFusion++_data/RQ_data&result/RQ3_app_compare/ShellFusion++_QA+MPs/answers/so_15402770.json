{
  "Query": "How to grep and replace",
  "Answers": [
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Top-3 Similar Questions": [
        "so_51281851: Why grep is not recursing",
        "so_60678339: Why does sed sometimes truncate when replacing?",
        "so_29060762: Bash script to replace or append"
      ],
      "Top-3 Scripts": [
        "so_51281851: grep -r --include=\"*.go\" \"closer\" .",
        "so_60678339: resultinglink=$(curl -s -D - \"$link\" | grep location: | sed -e 's/^location: //' -e $'s/\\\\\\r//')",
        "so_29060762: if grep -q \"^$2\" $1\nthen\n    sed -i \"s/^$2.*$/$3/\" $1\nelse\n    echo \"$3\" >>$1\nfi"
      ],
      "Explanations about Options": {
        "--include": "Search only files whose base name matches GLOB (using wildcard matching as\n described under --exclude).",
        "-q": "Quiet; do not write anything to standard output. Exit immediately with zero status\n if any match is found, even if an error was detected. Also see the -s or\n --no-messages option.",
        "-r": "Read all files under each directory, recursively, following symbolic links only if\n they are on the command line. Note that if no file operand is given, grep searches\n the working directory. This is equivalent to the -d recurse option."
      }
    },
    {
      "Command": "cat",
      "MP Summary": "concatenate files and print on the standard output",
      "Top-3 Similar Questions": [
        "so_67721096: Bash don't replace $"
      ],
      "Top-3 Scripts": [
        "so_67721096: cat << \\EOF >> NEWFILE.sh\npathmunge () { case \":${LD_LIBRARY_PATH}:\" in *:\"$1\":*) ;;\n*) LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH${LD_LIBRARY_PATH:+:}$1\";; esac; }\npathmunge $HOME/SOME/PATH\nexport LD_LIBRARY_PATH\nEOF"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "file2",
      "MP Summary": "kanji code checker.",
      "Top-3 Similar Questions": [
        "so_16171865: to grep a pattern from file compare contents with another file and replace"
      ],
      "Top-3 Scripts": [
        "so_16171865: VER=$(awk -F' *: *' '/^App/{print $2}' file1)\n\nawk -v v=\"$VER\" '{\n     split(v, arr, \"-\");\n     sub(/[^\\/]+\\/tar\\.gz/, arr[1]\"/tar.gz\");\n     if (arr[2] ~ /SNAPSHOT/)\n        sub(\"=nexus:\", \":=nexus-snapshot\")\n}1' file2 > tmpFile\n\nmv tmpFile > file2"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sgrep",
      "MP Summary": "search a file for a structured pattern",
      "Top-3 Similar Questions": [
        "ul_322912: Global multiline search & replace"
      ],
      "Top-3 Scripts": [
        "ul_322912: sgrep -o '%r\\n' '(start .. end) extracting (\"<?php\"..\"?>\" containing \"###=CACHE START=###\")'"
      ],
      "Explanations about Options": {
        "-o": "Set the output format. The format is displayed for each output region with any\n occurrences of the following place holders substituted:"
      }
    },
    {
      "Command": "split",
      "MP Summary": "split a file into pieces",
      "Top-3 Similar Questions": [
        "so_16171865: to grep a pattern from file compare contents with another file and replace"
      ],
      "Top-3 Scripts": [
        "so_16171865: VER=$(awk -F' *: *' '/^App/{print $2}' file1)\n\nawk -v v=\"$VER\" '{\n     split(v, arr, \"-\");\n     sub(/[^\\/]+\\/tar\\.gz/, arr[1]\"/tar.gz\");\n     if (arr[2] ~ /SNAPSHOT/)\n        sub(\"=nexus:\", \":=nexus-snapshot\")\n}1' file2 > tmpFile\n\nmv tmpFile > file2"
      ],
      "Explanations about Options": {}
    }
  ]
}