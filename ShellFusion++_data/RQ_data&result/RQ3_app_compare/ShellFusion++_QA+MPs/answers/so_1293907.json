{
  "Query": "How to pass command-line arguments to a PowerShell ps1 file",
  "Answers": [
    {
      "Command": "args",
      "MP Summary": "manipulate and output command arguments.",
      "Top-3 Similar Questions": [
        "so_40436635: How do I pass arguments to a command inside a PowerShell script?",
        "so_63936227: Passing arguments to powershell 7 script invoked form powershell 5"
      ],
      "Top-3 Scripts": [
        "so_40436635: $args",
        "so_63936227: $args\n\npwsh.exe -command {\n    Import-Module PoshGram\n    $token = \"some_token\"\n    $chat = \"-some_id\"\n    Send-TelegramTextMessage -BotToken $token -ChatID $chat -Message $args[0]\n} -args $args # $args are the args from outside the script"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "then",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Top-3 Similar Questions": [
        "so_44626911: Passing arguments values to shell script",
        "so_12836182: Passing arguments to a bash script"
      ],
      "Top-3 Scripts": [
        "so_44626911: SCRIPTNAME=$(basename \"$0\") \n...\nif [ $# != 1 ] then \n    echo \"Usage: $SCRIPTNAME url\" \n    exit \nfi \n\n$urls=\"$1\"",
        "so_12836182: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "tee",
      "MP Summary": "read from standard input and write to standard output and files",
      "Top-3 Similar Questions": [
        "ul_113611: How to pass arguments to 'source' command?"
      ],
      "Top-3 Scripts": [
        "ul_113611: echo $arg1 | source /directory/of/script/script.csh | tee /log-file/destination/filename.dat"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "main",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Top-3 Similar Questions": [
        "so_41186788: How to run PowerShell script in a different process and pass arguments to it?"
      ],
      "Top-3 Scripts": [
        "so_41186788: write-host \"I am in main process $($pid)\"\npowershell.exe -Command {\n    Param(\n        $one,\n        $two,\n        $three\n    )\n    write-host \"I am in process $($pid)\"\n    write-host \"Message.Status: $($one) $($two) $($three)\";\n} -args \"I\", \"am\", \"here\" | Out-Null\n\nI am in main process 17900\nI am in process 10284\nMessage.Status: I am here"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "have",
      "MP Summary": "presumably creating or updating package.json and running any other initialization-related operations. The init command is transformed to a corresponding npx operation as follows: \u00b7 npm init foo -> npx create-foo \u00b7 npm init @usr/foo -> npx @usr/create-foo \u00b7 npm init @usr -> npx @usr/create Any  additional  options  will  be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello. If the initializer is omitted (by just calling npm init), init will fall  back  to  legacy init  behavior.  It  will  ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on  existing  fields,  dependencies, and  options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether.  If  you pass --scope, it will create a scoped package. See Also \u00b7 https://github.com/isaacs/init-package-json \u00b7 npm help package.json \u00b7 npm help version \u00b7 npm help scope April 2020                                NPM-INIT(1)",
      "Top-3 Similar Questions": [
        "su_403263: How to pass bash script arguments to a subshell"
      ],
      "Top-3 Scripts": [
        "su_403263: #!/bin/bash\n\nquoted_args=\"$(printf \"${1+ %q}\" \"$@\")\" # Note: this will have a leading space before the first arg\n# echo \"Quoted args:$quoted_args\" # Uncomment this to see what it's doing\nbash -c \"other_tool -a -b$quoted_args\""
      ],
      "Explanations about Options": {}
    }
  ]
}