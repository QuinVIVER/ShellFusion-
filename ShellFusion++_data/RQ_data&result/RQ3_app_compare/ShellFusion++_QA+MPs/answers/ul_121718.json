{
  "Query": "How to parse JSON with shell scripting in Linux?",
  "Answers": [
    {
      "Command": "xmllint",
      "MP Summary": "command line XML tool",
      "Top-3 Similar Questions": [
        "so_16711592: parsing xml file in unix"
      ],
      "Top-3 Scripts": [
        "so_16711592: xmllint --xpath '//Read[@IsIndexedRead = \"Y\"]/@NumCycles' RunInfo.xml | grep -o '[0-9]\\+'\n\nxmllint --xpath '//Read[@IsIndexedRead = \"N\"]/@NumCycles' RunInfo.xml | grep -o '[0-9]\\+'"
      ],
      "Explanations about Options": {
        "--xpath": "Run an XPath expression given as argument and print the result. In case of a nodeset\n result, each node in the node set is serialized in full in the output. In case of an\n empty node set the \"XPath set is empty\" result will be shown and an error exit code\n will be returned."
      }
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "so_13912990: Parsing JSON in shell script with regex"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_65014334: ",
        "so_13912990: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "re",
      "MP Summary": "programm to conver russian texts between different encodings",
      "Top-3 Similar Questions": [
        "so_42678678: Parsing substrings into shell variables in bash"
      ],
      "Top-3 Scripts": [
        "so_42678678: re='^\\[([[:digit:]:]+)\\] \\[Server thread/INFO\\]: ([^[:space:]]+) entered area ~ ([^[:space:]]+) - [(]PvP[)] ~'\nline='[18:51:10] [Server thread/INFO]: Tester121 entered area ~ Wilderness - (PvP) ~'\n\nif [[ $line =~ $re ]]; then\n  time=${BASH_REMATCH[1]}\n  player=${BASH_REMATCH[2]}\n  area=${BASH_REMATCH[3]}\nfi"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Top-3 Similar Questions": [
        "so_62263081: How to parse multi properties with spacing in jq json bash script?",
        "so_65014334: parse JSON Array with spaces in bash",
        "ul_542603: Parsing JSON with jq to get firstname in below JSON"
      ],
      "Top-3 Scripts": [
        "so_62263081: readarray z_array < <(echo \"${json}\" | jq -c '.x[] | .z')\n\ndeclare -a array\nwhile read v\ndo\n    array+=(\"$v\")\ndone < <(echo \"${json}\" | jq -c '.x[] | .z')",
        "so_65014334: ",
        "ul_542603: jq -r '.[]|select(.middlename|not).firstname'\n\njq -r '.[]|select(has(\"middlename\")|not).firstname'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "eval",
      "MP Summary": "construct command by concatenating arguments",
      "Top-3 Similar Questions": [
        "so_4731631: How to parse variables from a parameter file in a K Shell script"
      ],
      "Top-3 Scripts": [
        "so_4731631: while read line\n do\n     # Check - which is HARD!\n     eval $line\n done"
      ],
      "Explanations about Options": {}
    }
  ]
}