{
  "Query": "How do I change directories in the terminal, and know which directory I'm in?",
  "Answers": [
    {
      "Command": "mv",
      "MP Summary": "move (rename) files",
      "Top-3 Similar Questions": [
        "so_46578496: How to add and change the extension of files in a directory?",
        "ul_68912: How to change extension of all files in a directory?",
        "so_8551993: Change file extensions of multiple files in a directory with terminal/bash?"
      ],
      "Top-3 Scripts": [
        "so_46578496: $ for f in * ; do if [ -f \"$f\" ] ; then t=\"${f%.*}\" ; mv -i \"$f\" \"$t\".ext ; fi ; done\n\nfor f in *               # loop all items in the current dir\ndo \n  if [ -f \"$f\" ]         # test that $f is a file\n  then\n    t=\"${f%.*}\"          # strip extension off ie. everything after last .\n    mv -i \"$f\" \"$t\".ext  # rename file with the new extension\n  fi\ndone\n\n$ touch foo bar baz.baz \n$ mkdir dir ; ls -F\nbar  baz.baz  dir/  foo\n$ for f in * ; do if [ -f \"$f\" ] ; then t=\"${f%.*}\" ; mv -i \"$f\" \"$t\".ext ; fi ; done\n$ ls\nbar.ext  baz.ext  dir/  foo.ext",
        "ul_68912: for x in !(*.*); do\n  mv -- \"$x\" \"$x.md\"\ndone\n\nfor x in *; do\n  case \"$x\" in\n    *.*) ;;         # skip this file\n    *) mv -- \"$x\" \"$x.md\";;\n  esac\ndone",
        "so_8551993: for file in *.dat; do mv \"$file\" \"${file%dat}mp3\"; done\n\nmv *.dat *.mp3\n\nmv t.dat *.mp3\n\nmv t1.dat t2.dat *.mp3"
      ],
      "Explanations about Options": {
        "-i": "prompt before overwrite"
      }
    },
    {
      "Command": "file",
      "MP Summary": "determine file type",
      "Top-3 Similar Questions": [
        "au_1320065: trying to change to a file directory in the terminal but I am having trouble",
        "so_46578496: How to add and change the extension of files in a directory?",
        "ul_68912: How to change extension of all files in a directory?"
      ],
      "Top-3 Scripts": [
        "au_1320065: No such file or directory",
        "so_46578496: for f in *               # loop all items in the current dir\ndo \n  if [ -f \"$f\" ]         # test that $f is a file\n  then\n    t=\"${f%.*}\"          # strip extension off ie. everything after last .\n    mv -i \"$f\" \"$t\".ext  # rename file with the new extension\n  fi\ndone",
        "ul_68912: for x in *; do\n  case \"$x\" in\n    *.*) ;;         # skip this file\n    *) mv -- \"$x\" \"$x.md\";;\n  esac\ndone"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "such",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Top-3 Similar Questions": [
        "au_1320065: trying to change to a file directory in the terminal but I am having trouble"
      ],
      "Top-3 Scripts": [
        "au_1320065: No such file or directory"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "alias",
      "MP Summary": "define or display aliases",
      "Top-3 Similar Questions": [
        "ul_68912: How to change extension of all files in a directory?",
        "so_18228371: change terminal title according to the last 2 directories in the path",
        "su_1379728: When I change working directory in a script and execute it, the working directory only changes to specified path while in the script"
      ],
      "Top-3 Scripts": [
        "ul_68912: autoload -U zmv\n# you don't need the following two now, but put them also in your .zshrc\nalias zcp='zmv -C'\nalias zln='zmv -L'",
        "so_18228371: alias cd    'cd \\!*; <dir of script file>/titleRename.tcsh'",
        "su_1379728: alias mycd='cd /media/hard/drive/partitionX; pwd'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Top-3 Similar Questions": [
        "so_54446377: How to change the directory of Linux in python script?"
      ],
      "Top-3 Scripts": [
        "so_54446377: >>> import subprocess as sp\n>>> sp.call(\"ls -ll\", cwd='/tmp', shell=True)"
      ],
      "Explanations about Options": {}
    }
  ]
}