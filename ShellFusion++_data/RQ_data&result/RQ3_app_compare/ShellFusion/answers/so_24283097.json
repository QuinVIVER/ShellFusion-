{
    "Answers": [
        {
            "Command": "eval",
            "Explanations about Options": {},
            "MP Summary": "construct command by concatenating arguments",
            "Most Similar TLDR Script": "eval \"{{echo foo}}\"",
            "Most Similar TLDR Task": "Call `echo` with the \"foo\" argument",
            "Top-3 Scripts": [
                "so_63529818: ( set -a; eval \"$(outputenv --name myprogram)\"; exec myprogram --options )"
            ],
            "Top-3 Similar Questions": [
                "so_13649299: reuse string in bash",
                "so_63529818: Using output of one command as is"
            ]
        },
        {
            "Command": "tail",
            "Explanations about Options": {
                "-n(M)": "output the last NUM lines, instead of the last 10; or use -n +NUM to output\n starting with line NUM"
            },
            "MP Summary": "output the last part of files",
            "Most Similar TLDR Script": "tail -n {{num}} {{file}}",
            "Most Similar TLDR Task": "Show last 'num' lines in file",
            "Top-3 Scripts": [
                "au_621681: $(!! |& tail -1)\n\ntail -1\n\n$(!! 2>&1 >/dev/null | tail -1)",
                "so_55733878: for log in *.log; do\n   if ! tail \"$log\" | grep -q 'TEST COMPLETE'; then\n      echo \"$log\"\n   fi\ndone"
            ],
            "Top-3 Similar Questions": [
                "au_621681: How can I execute the last line of output in bash?",
                "so_55733878: Use grep command but only for the last lines of a file?"
            ]
        },
        {
            "Command": "xargs",
            "Explanations about Options": {
                "-I(M)": "Replace occurrences of replace-str in the initial-arguments with names read from\n standard input. Also, unquoted blanks do not terminate input items; instead the\n separator is the newline character. Implies -x and -L 1."
            },
            "MP Summary": "build and execute command lines from standard input",
            "Most Similar TLDR Script": "{{arguments_source}} | xargs {{command}}",
            "Most Similar TLDR Task": "Run a command using the input data as arguments",
            "Top-3 Scripts": [
                "so_16976080: ls -p | grep -v / | xargs md5sum | awk '{print $2,$1}'",
                "ul_185156: myCommand | xargs -I{} sh -c 'echo -n {}\\ ; cat /folder/{}/folder2/file'",
                "so_2689537: /usr/bin/php /var/www/bims/index.php \"projects/output\" | xargs rm"
            ],
            "Top-3 Similar Questions": [
                "so_16976080: Reuse or repeat pipe input as arguments in command (example given)",
                "ul_185156: Reuse output from command 1 in command 2 using a pipe",
                "so_2689537: Use the output of a command as input of the next command"
            ]
        },
        {
            "Command": "zsh",
            "Explanations about Options": {
                "-c(M)": "Take the first argument as a command to execute, rather than reading commands from\n a script or standard input. If any further arguments are given, the first one is\n assigned to $0, rather than being used as a positional parameter."
            },
            "MP Summary": "the Z shell",
            "Most Similar TLDR Script": "zsh -c {{command}}",
            "Most Similar TLDR Task": "Execute command passed as parameter",
            "Top-3 Scripts": [],
            "Top-3 Similar Questions": [
                "ul_537494: zsh: reuse all arguments from previous command"
            ]
        },
        {
            "Command": "shuf",
            "Explanations about Options": {
                "-n(M)": "output at most COUNT lines",
                "-o(M)": "write result to FILE instead of standard output"
            },
            "MP Summary": "generate random permutations",
            "Most Similar TLDR Script": "shuf {{filename}} -o {{output_filename}}",
            "Most Similar TLDR Task": "Write the output to another file",
            "Top-3 Scripts": [
                "so_41791386: gcloud compute instance-groups list-instances workers | grep -v \"^NAME\"  | shuf -n 1 | awk '{print $1, $2}' | \nwhile read machine zone; do\n    export SELECTED_MACHINE=\"$machine\"\n    export SELECTED_ZONE=\"$zone\"\ndone\ngcloud compute --project \"my-project\" ssh --zone \"$SELECTED_ZONE\" \"$SELECTED_MACHINE\"\n\nmachine_zone=$(gcloud compute instance-groups list-instances workers | \n              grep -v \"^NAME\"  | shuf -n 1 | awk '{print $1, $2}')\nread machine zone <<< $machine_zone\ngcloud compute --project \"my-project\" ssh --zone \"$zone\" \"$machine\""
            ],
            "Top-3 Similar Questions": [
                "so_41791386: a bash command that uses the output of another bash command"
            ]
        }
    ],
    "Query": "Reusing output from last command in Bash"
}