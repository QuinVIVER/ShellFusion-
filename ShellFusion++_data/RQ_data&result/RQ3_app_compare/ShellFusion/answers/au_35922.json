{
    "Answers": [
        {
            "Command": "find",
            "Explanations about Options": {
                "-n(M)": "for less than n ,",
                "-name(M)": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils."
            },
            "MP Summary": "search for files in a directory hierarchy",
            "Most Similar TLDR Script": "find {{root_path}} -name '{{*.ext}}'",
            "Most Similar TLDR Task": "Find files by extension",
            "Top-3 Scripts": [
                "so_44088046: find . -name '*.blend' -exec blender {} --background --python myScript.py \\;",
                "so_56331802: find src/ -regex '.*\\.\\(tsv\\|xlsx\\|gz\\|html\\)$' -exec cp {} dest/ \\;",
                "ul_461886: find . -name '*.foo' -exec bash -c 'mv \"$0\" \"${0%.foo}.foo1\"' \"{}\" \\;"
            ],
            "Top-3 Similar Questions": [
                "so_44088046: How to run a command recursively for files with specific extensions in bash?",
                "so_56331802: How to copy recursively files with multiple specific extensions in bash",
                "ul_461886: Trying to change multiple files' extensions"
            ]
        },
        {
            "Command": "rm",
            "Explanations about Options": {
                "-f(M)": "ignore nonexistent files and arguments, never prompt",
                "-r(M)": "remove directories and their contents recursively"
            },
            "MP Summary": "remove files or directories",
            "Most Similar TLDR Script": "rm -r {{path/to/directory}}",
            "Most Similar TLDR Task": "Recursively remove a directory and all its subdirectories",
            "Top-3 Scripts": [
                "so_4638874: find /tmp -name '*.pdf' -or -name '*.doc' | xargs rm",
                "so_11800030: cd /home/servers2\nfind . -type d -name plugins -exec cp -f /home/servers/template/plugins/AutoStop1.3.001.jar {} \\; -exec rm -f {}/AutoStopFinal.jar \\;",
                "au_946629: rm *.error *.out\n\nrm *.{error,out}\n\nrm a.out b.out"
            ],
            "Top-3 Similar Questions": [
                "so_4638874: How to loop through a directory recursively to delete files with certain extensions",
                "so_11800030: Bash script to recursively add a file to multiple directories",
                "au_946629: delete all files in a directory with multiple extensions"
            ]
        },
        {
            "Command": "cd",
            "Explanations about Options": {},
            "MP Summary": "change the working directory",
            "Most Similar TLDR Script": "cd {{path/to/directory}}",
            "Most Similar TLDR Task": "Go to the given directory",
            "Top-3 Scripts": [
                "ul_418988: COMMAND='echo'\nfind `pwd` -iname \"*.pdf\" -printf \"%h\\n\" | sort -u | while read i; do                                              \n    cd \"$i\" && pwd && $COMMAND\ndone",
                "so_11800030: cd /home/servers2\nfind . -type d -name plugins -exec cp -f /home/servers/template/plugins/AutoStop1.3.001.jar {} \\; -exec rm -f {}/AutoStopFinal.jar \\;"
            ],
            "Top-3 Similar Questions": [
                "ul_461886: Trying to change multiple files' extensions",
                "ul_418988: Recursively iterate through all subdirectories, If a file with a specific extension exists then run a command in that folder once",
                "so_11800030: Bash script to recursively add a file to multiple directories"
            ]
        },
        {
            "Command": "xargs",
            "Explanations about Options": {
                "-0(M)": "Input items are terminated by a null character instead of by whitespace, and the\n quotes and backslash are not special (every character is taken literally).\n Disables the end of file string, which is treated like any other argument. Useful\n when input items might contain white space, quote marks, or backslashes. The GNU\n find -print0 option produces input suitable for this mode.",
                "-a(M)": "Read items from file instead of standard input. If you use this option, stdin\n remains unchanged when commands are run. Otherwise, stdin is redirected from\n /dev/null.",
                "-e(M)": "This option is a synonym for the -E option. Use -E instead, because it is POSIX\n compliant while this option is not. If eof-str is omitted, there is no end of file\n string. If neither -E nor -e is used, no end of file string is used.",
                "-n(M)": "Use at most max-args arguments per command line. Fewer than max-args arguments\n will be used if the size (see the -s option) is exceeded, unless the -x option is\n given, in which case xargs will exit."
            },
            "MP Summary": "build and execute command lines from standard input",
            "Most Similar TLDR Script": "find . -name {{'*.backup'}} -print0 | xargs -0 rm -v",
            "Most Similar TLDR Task": "Delete all files with a `.backup` extension (`-print0` uses a null character to split file names, and `-0` uses it as delimiter)",
            "Top-3 Scripts": [
                "ul_78821: $ find some_folder -type f -name \"*.bub\" | \n    sed \"s/\\.bub$//\" | \n    xargs -I% mv -iv %.bub %.aaa\n`some_folder/a.bub' -> `some_folder/a.aaa'\n`some_folder/v.bub' -> `some_folder/v.aaa'\n`some_folder/dr.bub' -> `some_folder/dr.aaa'\n`some_folder/catpictures/or.bub' -> `some_folder/catpictures/or.aaa'\n`some_folder/catpictures/on.bub' -> `some_folder/catpictures/on.aaa'\n\n$ extmv () {\n    find \"${1}\" -type f -name \"*.${2}\" | \n    sed \"s/\\.${2}$//\" | \n    xargs -I% mv -iv \"%.${2}\" \"%.${3}\"\n}",
                "so_47936724: printf '%s\\0' ./*.new | xargs -r0 bash -c 'for f; do d=${f%.new}; mv \"$f\" \"${d/.D1./.D2.}\"; done' _",
                "so_4638874: find /tmp -name '*.pdf' -or -name '*.doc' | xargs rm"
            ],
            "Top-3 Similar Questions": [
                "ul_78821: How can I rename all files with one extension to a different extension recursively",
                "so_47936724: Rename multiple files changing the extension and part of the string",
                "so_4638874: How to loop through a directory recursively to delete files with certain extensions"
            ]
        },
        {
            "Command": "tree",
            "Explanations about Options": {
                "--prune(M)": "Makes tree prune empty directories from the output, useful when used in conjunction\n with -P or -I. See BUGS AND NOTES below for more information on this option.",
                "-P(M)": "List only those files that match the wild-card pattern. Note: you must use the -a\n option to also consider those files beginning with a dot `.' for matching. Valid\n wildcard operators are `*' (any zero or more characters), `?' (any single\n character), `[...]' (any single character listed between brackets (optional -\n (dash) for character range may be used: ex: [A-Z]), and `[^...]' (any single\n character not listed in brackets) and `|' separates alternate patterns."
            },
            "MP Summary": "list contents of directories in a tree-like format.",
            "Most Similar TLDR Script": "tree -P '{{*.txt}}' --prune",
            "Most Similar TLDR Task": "Print files within the tree hierarchy, using a wildcard (glob) pattern, and pruning out directories that don't contain matching files",
            "Top-3 Scripts": [
                "so_44088046: some/sub/tree/file.blend"
            ],
            "Top-3 Similar Questions": [
                "so_44088046: How to run a command recursively for files with specific extensions in bash?"
            ]
        }
    ],
    "Query": "How do I change extension of multiple files recursively from the command line?"
}