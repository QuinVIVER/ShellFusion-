{
    "Answers": [
        {
            "Command": "grep",
            "Explanations about Options": {
                "--exclude(M)": "Skip any command-line file with a name suffix that matches the pattern GLOB, using\n wildcard matching; a name suffix is either the whole name, or a trailing part that\n starts with a non-slash character immediately after a slash (/) in the name. When\n searching recursively, skip any subfile whose base name matches GLOB; the base name\n is the part after the last slash. A pattern can use *, ?, and [...] as wildcards,\n and \\ to quote a wildcard or backslash character literally.",
                "-F(M)": "Interpret PATTERNS as fixed strings, not regular expressions.",
                "-I(M)": "Process a binary file as if it did not contain matching data; this is equivalent to\n the --binary-files=without-match option.",
                "-n(M)": "Prefix each line of output with the 1-based line number within its input file.",
                "-r(M)": "Read all files under each directory, recursively, following symbolic links only if\n they are on the command line. Note that if no file operand is given, grep searches\n the working directory. This is equivalent to the -d recurse option.",
                "-v(M)": "Invert the sense of matching, to select non-matching lines."
            },
            "MP Summary": "print lines that match patterns",
            "Most Similar TLDR Script": "grep -v {{search_pattern}}",
            "Most Similar TLDR Task": "Invert match for excluding specific strings",
            "Top-3 Scripts": [
                "ul_125360: grep -Inr TEXT --exclude='*.svn' dir/",
                "so_31309531: find . -exec grep -i -n -w 'search text' /dev/null {} \\; | grep -v '/\\*'\n\ngrep -v",
                "ul_240470: grep -v -e 90.192.142.138 -e PIX -e Intrusion cisco.log-20151103.log\n\ngrep -vF '90.192.142.138\nPIX\nIntrusion\n' cisco.log-20151103.log"
            ],
            "Top-3 Similar Questions": [
                "ul_125360: How to specify matching patterns while excluding some files having a PATTERN in their filenames",
                "so_31309531: Exclude a pattern from grep result",
                "ul_240470: Excluding multiple patterns with one grep command"
            ]
        },
        {
            "Command": "find",
            "Explanations about Options": {
                "-n(M)": "for less than n ,",
                "-name(M)": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils.",
                "-not(M)": "Same as ! expr, but not POSIX compliant.",
                "-type(C)": "Any \"find\" test can be negated (inverted) by preceding it with \"!\".  So \"find . ! -type d\" finds plain files, symbolic links, named pipes, sockets, and device files — everything except directories.",
                "-type(M)": "File is of type c:"
            },
            "MP Summary": "search for files in a directory hierarchy",
            "Most Similar TLDR Script": "find {{root_path}} -name '{{*.py}}' -not -path '{{*/site-packages/*}}'",
            "Most Similar TLDR Task": "Find files matching a given pattern, excluding specific paths",
            "Top-3 Scripts": [
                "so_31309531: find . -exec grep -i -n -w 'search text' /dev/null {} \\; | grep -v '/\\*'",
                "ul_523716: find . -type f ! -exec grep -q \"$idontwant\" {} ';' -exec grep -q \"$iwant\" {} ';' -print\n\nfind . -type f -exec grep -q \"$iwant\" {} ';' ! -exec grep -q \"$idontwant\" {} ';' -print\n\nfind . ! -type d",
                "ul_61366: find /{foo,fooLib,fooHandler,fooGizmo} -type f -exec grep -l \"test\" {} \\;\n\nfind /foo* -type f -exec grep -l \"test\" {} \\;"
            ],
            "Top-3 Similar Questions": [
                "so_31309531: Exclude a pattern from grep result",
                "ul_523716: grep files with pattern A but exclude files with pattern B",
                "ul_61366: grep only subdirectories matching pattern"
            ]
        },
        {
            "Command": "cut",
            "Explanations about Options": {
                "-d(M)": "use DELIM instead of TAB for field delimiter",
                "-f(M)": "select only these fields; also print any line that contains no delimiter\n character, unless the -s option is specified"
            },
            "MP Summary": "remove sections from each line of files",
            "Most Similar TLDR Script": "cut -d'{{ }}' -f{{3-}}",
            "Most Similar TLDR Task": "Cut out the fields 3 through to the end of each line, using a space as a delimiter",
            "Top-3 Scripts": [
                "ul_347402: cut -d : -f 1 < /etc/passwd | grep -vEx '[[:alpha:]][[:digit:]]{6}'",
                "ul_439691: env_var=`cat /etc/oratab |grep $DB_NAME |grep -v '^#' |cut -d\":\" -f 2`",
                "ul_113497: grep -r pattern . | cut -c1-\"$COLUMNS\""
            ],
            "Top-3 Similar Questions": [
                "ul_347402: Using sed to exclude a pattern of letters/numbers",
                "ul_439691: grep for a text in a line. But if it has a comment only at its beginning then exclude it from the grep",
                "ul_113497: Exclude files that have very long lines of text from grep output"
            ]
        },
        {
            "Command": "awk",
            "Explanations about Options": {},
            "MP Summary": "pattern scanning and processing language",
            "Most Similar TLDR Script": "awk -F ',' '{print $NF}' {{filename}}",
            "Most Similar TLDR Task": "Print the last column of each line in a file, using a comma (instead of space) as a field separator",
            "Top-3 Scripts": [
                "so_22492441: awk 'BEGIN{FS=OFS=\"=\"} NF==2 && $1!=\"\"{gsub(/^\\(|\\)$/, \"\", $2); print}' file\nhello=123\nstack=23(4)\noverflow=345\nfriends=987",
                "so_25599346: awk '/^foo[34]$/||!/^foo/{print}' foo",
                "ul_346203: awk '/name/{n+=1}{print > \"file_\"n\".txt\"}'"
            ],
            "Top-3 Similar Questions": [
                "so_22492441: How to exclude patterns in regex conditionally in bash?",
                "so_25599346: Excluding with grep",
                "ul_346203: Grep the lines between the occurrence of the same pattern"
            ]
        },
        {
            "Command": "sed",
            "Explanations about Options": {
                "-E(M)": "use extended regular expressions in the script (for portability use POSIX -E).",
                "-e(M)": "add the script to the commands to be executed"
            },
            "MP Summary": "stream editor for filtering and transforming text",
            "Most Similar TLDR Script": "sed '/{{line_pattern}}/d' {{filename}}",
            "Most Similar TLDR Task": "Delete lines matching the line pattern",
            "Top-3 Scripts": [
                "so_59139098: ls *.jar | sed -E -e 's/^(.*)-+([0-9])(\\.[0-9]+)*.jar$/\\1/'",
                "so_51743995: GNU sed\n\nsed -E 'N;N; /[acgt]{3}cc[acgt][acgt]{3}/d' ip.txt",
                "so_13350855: sed '/MANAGER_WIDGET/!s/\\.\\([jscss]\\+\\)\\\"/\\.min\\.\\1\\\"/g' index.html"
            ],
            "Top-3 Similar Questions": [
                "so_59139098: grep return line but exclude pattern",
                "so_51743995: grep to exclude pattern and exclude 2 preceding lines",
                "so_13350855: Exclude lines by pattern in sed"
            ]
        }
    ],
    "Query": "How to grep, excluding some patterns?"
}