{
    "Answers": [
        {
            "Command": "diff",
            "Explanations about Options": {},
            "MP Summary": "compare two files",
            "Most Similar TLDR Script": "diff -rq {{old_directory}} {{new_directory}}",
            "Most Similar TLDR Task": "Compare directories, only showing the names of files that differ",
            "Top-3 Scripts": [
                "su_234810: diff --brief <(sort file1) <(sort file2)"
            ],
            "Top-3 Similar Questions": [
                "su_234810: How do I compare two files with a shell script?"
            ]
        },
        {
            "Command": "date",
            "Explanations about Options": {
                "--utc(M)": "print or set Coordinated Universal Time (UTC)",
                "-d(M)": "display time described by STRING, not 'now'",
                "-r(M)": "display the last modification time of FILE"
            },
            "MP Summary": "print or set the system date and time",
            "Most Similar TLDR Script": "date -d \"{{2018-09-01 00:00}}\" +%s --utc",
            "Most Similar TLDR Task": "Convert a specific date to the Unix timestamp format",
            "Top-3 Scripts": [
                "au_1137981: peak_time=$(date -d \"$peak_time\" '+%H%M%S');\n\n$ peak_time=$(date -d \"$peak_time\" '+%H%M%S');\n$ echo $peak_time \n000000\n\n$ peak_time=\"10:05:31\"\n$ peak_time=$(date -d \"$peak_time\" '+%H%M%S');\n$ echo $peak_time \n100531",
                "ul_502208: date +%s\n\nif [ $(date +%s -r file) -ge $(date +%s) ]; then \n    # do something\nfi",
                "so_16546043: kent$  echo $(($(date -d\"${d}\" +%s)-$(date +%s)))\n251171977"
            ],
            "Top-3 Similar Questions": [
                "au_1137981: Compare two dates in the shell",
                "so_5895159: Bash script compare two date variables",
                "ul_502208: How to compare two dates in bash script?"
            ]
        },
        {
            "Command": "join",
            "Explanations about Options": {
                "-a(M)": "FILENUM\n also print unpairable lines from file FILENUM, where FILENUM is 1 or 2,\n corresponding to FILE1 or FILE2",
                "-e(M)": "EMPTY\n replace missing input fields with EMPTY",
                "-j(M)": "FIELD\n equivalent to '-1 FIELD -2 FIELD'"
            },
            "MP Summary": "join lines of two files on a common field",
            "Most Similar TLDR Script": "join {{file1}} {{file2}}",
            "Most Similar TLDR Task": "Join two files on the first (default) field",
            "Top-3 Scripts": [
                "so_4030500: join -t'\\0' -v2 file1 file2",
                "so_49958479: join -t',' -a 1 -a 2 -j 2 file1 file2\n2018042100,21,45\n2018042101,22\n2018042102,87,86\n2018042103,98,87\n\njoin -t',' -a 1 -a 2 -e \"0\" -j 2 file1 file2  | sed -r 's/^[^,]+,[^,]+$/&,0/'\n2018042100,21,45\n2018042101,22,0\n2018042102,87,86\n2018042103,98,87"
            ],
            "Top-3 Similar Questions": [
                "so_4030500: comparing two files using Shell script",
                "so_49958479: compare two columns in two different files in shell script"
            ]
        },
        {
            "Command": "uniq",
            "Explanations about Options": {
                "-u(M)": "only print unique lines"
            },
            "MP Summary": "report or omit repeated lines",
            "Most Similar TLDR Script": "sort {{file}} | uniq -u",
            "Most Similar TLDR Task": "Display only unique lines",
            "Top-3 Scripts": [
                "so_4030500: sort file1 file1 file2 | uniq -u"
            ],
            "Top-3 Similar Questions": [
                "so_4030500: comparing two files using Shell script"
            ]
        },
        {
            "Command": "comm",
            "Explanations about Options": {},
            "MP Summary": "select or reject lines common to two files",
            "Most Similar TLDR Script": "comm {{file1}} {{file2}}",
            "Most Similar TLDR Task": "Produce three tab-separated columns: lines only in first file, lines only in second file and common lines",
            "Top-3 Scripts": [
                "so_27690630: sort < file1 > fileresult\nfor i in {2..204}; do\n    comm -12 fileresult <(sort < file$i) > fileresult.tmp\n    mv fileresult.tmp fileresult\ndone"
            ],
            "Top-3 Similar Questions": [
                "so_27690630: Bash command to compare more than two files"
            ]
        }
    ],
    "Query": "How to compare two dates in a shell?"
}