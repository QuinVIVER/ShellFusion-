{
    "Answers": [
        {
            "Command": "split",
            "Explanations about Options": {
                "--filter(M)": "write to shell COMMAND; file name is $FILE",
                "-d(C)": "This should work for the second format you requested (\"000\", \"001\", \"002\" etc.): .  \"split --lines=100 -d -a 3 file ''\".",
                "-d(M)": "use numeric suffixes starting at 0 , not alphabetic",
                "-l(M)": "put NUMBER lines/records per output file"
            },
            "MP Summary": "split a file into pieces",
            "Most Similar TLDR Script": "split -l {{10}} {{filename}}",
            "Most Similar TLDR Task": "Split a file, each split having 10 lines (except the last split)",
            "Top-3 Scripts": [
                "so_62026693: split -d -l 25 large.txt file\n\n$ split -d -l 25 --filter=\"awk '{ printf \\\"%s%s\\\", sep, \\$0 ; sep=\\\",\\\" } END { print \\\"\\\" }' > \\$FILE\" large.txt file\n$ cat file00\nhost1,host2,host3...,host25",
                "so_23852093: split --lines=100 -d -a 3 file ''\n\nman split"
            ],
            "Top-3 Similar Questions": [
                "so_62026693: Bash split command to split line in comma separated values",
                "so_23852093: Split file by lines"
            ]
        },
        {
            "Command": "cut",
            "Explanations about Options": {
                "-d(M)": "use DELIM instead of TAB for field delimiter",
                "-f(M)": "select only these fields; also print any line that contains no delimiter\n character, unless the -s option is specified"
            },
            "MP Summary": "remove sections from each line of files",
            "Most Similar TLDR Script": "cut -d'{{ }}' -f{{3-}}",
            "Most Similar TLDR Task": "Cut out the fields 3 through to the end of each line, using a space as a delimiter",
            "Top-3 Scripts": [
                "so_42504564: # print first field \necho \"name=John:@(ADDRESS=(LONDON=(STREET=XY)))\" | cut -d = -f 1\n# print remaining fields \necho \"name=John:@(ADDRESS=(LONDON=(STREET=XY)))\" | cut -d = -f 2-",
                "so_26508138: $ echo \"Hello World Good Morning\" | cut -d' ' -f2-\nWorld Good Morning"
            ],
            "Top-3 Similar Questions": [
                "so_42504564: Bash split word with same characters",
                "so_26508138: Split a sentence using space in bash script"
            ]
        },
        {
            "Command": "xargs",
            "Explanations about Options": {
                "-0(M)": "Input items are terminated by a null character instead of by whitespace, and the\n quotes and backslash are not special (every character is taken literally).\n Disables the end of file string, which is treated like any other argument. Useful\n when input items might contain white space, quote marks, or backslashes. The GNU\n find -print0 option produces input suitable for this mode.",
                "-I(M)": "Replace occurrences of replace-str in the initial-arguments with names read from\n standard input. Also, unquoted blanks do not terminate input items; instead the\n separator is the newline character. Implies -x and -L 1."
            },
            "MP Summary": "build and execute command lines from standard input",
            "Most Similar TLDR Script": "{{arguments_source}} | xargs -I _ {{command}} _ {{optional_extra_arguments}}",
            "Most Similar TLDR Task": "Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as `_`) with the input line",
            "Top-3 Scripts": [
                "au_1168019: printf \"%s\\0\" $(<file) | xargs -0 command",
                "so_53148436: find . -name '*.txt' -print0 | xargs -0 ..."
            ],
            "Top-3 Similar Questions": [
                "au_1168019: Read file lines into shell line separated by space",
                "so_53148436: split a string based on a .txt and space"
            ]
        },
        {
            "Command": "join",
            "Explanations about Options": {
                "-t(M)": "CHAR\n use CHAR as input and output field separator"
            },
            "MP Summary": "join lines of two files on a common field",
            "Most Similar TLDR Script": "join -t {{','}} {{file1}} {{file2}}",
            "Most Similar TLDR Task": "Join two files using a comma (instead of a space) as the field separator",
            "Top-3 Scripts": [
                "so_21738971: perl -F: -lane 'print join \":\" , map {$_ eq \"dog\" ? \"fox\" : $_} @F'"
            ],
            "Top-3 Similar Questions": [
                "so_21738971: bash replace word in a : separated file"
            ]
        },
        {
            "Command": "wc",
            "Explanations about Options": {
                "-w(M)": "print the word counts"
            },
            "MP Summary": "print newline, word, and byte counts for each file",
            "Most Similar TLDR Script": "wc -w {{file}}",
            "Most Similar TLDR Task": "Count words in file",
            "Top-3 Scripts": [
                "so_29309679: IFS='()'\necho \"$s\" | wc    # 1 line, 1 word and 10 characters\necho $s | wc      # 1 line, 2 words and 9 characters"
            ],
            "Top-3 Similar Questions": [
                "so_29309679: How to split words in bash"
            ]
        }
    ],
    "Query": "How to split a line into words separated by one or more spaces in bash?"
}