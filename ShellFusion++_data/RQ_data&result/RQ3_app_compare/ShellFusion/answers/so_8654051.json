{
    "Answers": [
        {
            "Command": "datamash",
            "Explanations about Options": {},
            "MP Summary": "command-line calculations",
            "Most Similar TLDR Script": "echo -e '1.0\\n2.5\\n3.1\\n4.3\\n5.6\\n5.7' | tr '.' ',' | datamash mean 1",
            "Most Similar TLDR Task": "Get the mean of a single column of float numbers (floats must use \",\" and not \".\")",
            "Top-3 Scripts": [],
            "Top-3 Similar Questions": [
                "so_60456910: Taking Floating Point Number as String and Performing Aritmetic in Bash"
            ]
        },
        {
            "Command": "bc",
            "Explanations about Options": {
                "-l(M)": "Define the standard math library.",
                "-q(M)": "Do not print the normal GNU bc welcome."
            },
            "MP Summary": "An arbitrary precision calculator language",
            "Most Similar TLDR Script": "bc <<< \"scale=10; 5 / 3\"",
            "Most Similar TLDR Task": "Calculate expression and force number of decimal places to 10",
            "Top-3 Scripts": [
                "so_35734666: if [[ $(bc -l <<< \"$chi_square>3.84\") -eq 1 ]]; then\n   echo 'yes'\nelse\n   echo 'no'\nfi",
                "so_26012809: pole_registru=(\"3\" \"8\" \"3.2\" \"6\" \"1\" \"3\" \"1.3\" \"3.3\" \"5.8\" \"12\" \"0\" \"3\")\nfor i in \"${pole_registru[@]}\"\ndo\n  Hodnota=\"Value of actual: $i\"\n  if (( $(bc <<< \"$i<1\") )) ; then (( A+=1 )); else (( A=A )); fi\n  echo \"$Value ($i) ($A)\"\n  sleep 1\ndone",
                "au_543058: $ echo \"scale=3; $exp/1\" | bc\n9.456\n\n$ bc <<< \"scale=3; $exp/1\"\n9.456\n\necho \"scale=4; $exp\" | bc | xargs printf \"%.3f\\n\""
            ],
            "Top-3 Similar Questions": [
                "so_35734666: floating point number comparison in bash script",
                "so_39799064: [: missing `]' error while comparing variables with floating point numbers in a bash script",
                "so_26012809: Bash comparison floating number"
            ]
        },
        {
            "Command": "grep",
            "Explanations about Options": {
                "-H(M)": "Print the file name for each match. This is the default when there is more than\n one file to search.",
                "-n(M)": "Prefix each line of output with the 1-based line number within its input file.",
                "-q(C)": "This verifies that \"$test\" is in the range that you want. \"grep -q 1\" sets the appropriate exit code for the \"if\" statement to use. This continues the bc test only if \"$test\" passed the number check. .  \"echo \"$test>-0.9 && $test <=0.9\" |bc -l | grep -q 1\".",
                "-q(M)": "Quiet; do not write anything to standard output. Exit immediately with zero status\n if any match is found, even if an error was detected. Also see the -s or\n --no-messages option.",
                "-x(M)": "Select only those matches that exactly match the whole line. For a regular\n expression pattern, this is like parenthesizing the pattern and then surrounding it\n with ^ and $."
            },
            "MP Summary": "print lines that match patterns",
            "Most Similar TLDR Script": "grep -Hn {{search_pattern}} {{path/to/file}}",
            "Most Similar TLDR Task": "Print file name with the corresponding line number for each match",
            "Top-3 Scripts": [
                "so_47824933: if [[ \"$test\" =~ ^[[:digit:].e+-]+$ ]] && echo \"$test>-0.9 && $test <=0.9\" |bc -l | grep -q 1; then\n\necho \"$test>-0.9 && $test <=0.9\" |bc -l | grep -q 1\n\ngrep -q 1",
                "so_59379304: cat input.txt |\nsed 's/\\91.//g' |\ngrep -x '.\\{10\\}' |\ngrep \"^[6-9]\" > output.txt\n\nsed 's/^91\\.//' input.txt |\ngrep -x '.\\{10\\}' |\ngrep \"^[6-9]\" > output.txt"
            ],
            "Top-3 Similar Questions": [
                "so_30539931: Comparing Numbers Two number in bash",
                "so_47824933: Bash script: testing if floating point number is in a certain range including negative numbers",
                "so_59379304: Bash issue with floating point numbers in specific format"
            ]
        },
        {
            "Command": "sort",
            "Explanations about Options": {
                "--general-numeric-sort(M)": "compare according to general numerical value",
                "-n(M)": "compare according to string numerical value"
            },
            "MP Summary": "sort lines of text files",
            "Most Similar TLDR Script": "sort --general-numeric-sort {{path/to/file}}",
            "Most Similar TLDR Task": "Sort numbers with exponents",
            "Top-3 Scripts": [
                "so_28903613: array1=(0 1 2 3 4 5 6 7 8 9 10 11 12)\narray2=(0 1 3 4 6 7 10 12)\n\ncomm -23 <(printf \"%s\\n\" \"${array1[@]}\" | sort) <(printf \"%s\\n\" \"${array2[@]}\" | sort) | sort -n\n\n2\n5\n8\n9\n11"
            ],
            "Top-3 Similar Questions": [
                "so_28903613: shell script compare two array of number"
            ]
        },
        {
            "Command": "comm",
            "Explanations about Options": {},
            "MP Summary": "select or reject lines common to two files",
            "Most Similar TLDR Script": "comm {{file1}} {{file2}}",
            "Most Similar TLDR Task": "Produce three tab-separated columns: lines only in first file, lines only in second file and common lines",
            "Top-3 Scripts": [
                "so_28903613: array1=(0 1 2 3 4 5 6 7 8 9 10 11 12)\narray2=(0 1 3 4 6 7 10 12)\n\ncomm -23 <(printf \"%s\\n\" \"${array1[@]}\" | sort) <(printf \"%s\\n\" \"${array2[@]}\" | sort) | sort -n\n\n2\n5\n8\n9\n11"
            ],
            "Top-3 Similar Questions": [
                "so_28903613: shell script compare two array of number"
            ]
        }
    ],
    "Query": "How to compare two floating point numbers in Bash?"
}