{
    "Answers": [
        {
            "Command": "curl",
            "Explanations about Options": {
                "-(M)": "Tells curl to use a separate operation for the following URL and associated\n options. This allows you to send several URL requests, each with their own specific\n options, for example, such as different user names or custom requests for each.",
                "--trace-ascii(M)": "Enables a full trace dump of all incoming and outgoing data, including descriptive\n information, to the given output file. Use \"-\" as filename to have the output sent\n to stdout.",
                "-X(M)": "(HTTP) Specifies a custom request method to use when communicating with the HTTP\n server. The specified request method will be used instead of the method otherwise\n used (which defaults to GET). Read the HTTP 1.1 specification for details and\n explanations. Common additional HTTP requests include PUT and DELETE, but related\n technologies like WebDAV offers PROPFIND, COPY, MOVE and more."
            },
            "MP Summary": "transfer a URL",
            "Most Similar TLDR Script": "curl -H {{'X-My-Header: 123'}} -X {{PUT}} {{http://example.com}}",
            "Most Similar TLDR Task": "Send a request with an extra header, using a custom HTTP method",
            "Top-3 Scripts": [
                "so_10357618: curl http://www.smsggglobal.com/http-api.php?action=sendsms&user=asda&password=123123&&from=123123&to=1232&text=adsdad\n\nuse curl -X <TYPE> <URL>\n\ncurl -X POST http://www.smsggglobal.com/http-api.php?action=sendsms&user=asda&password=123123&&from=123123&to=1232&text=adsdad",
                "so_42218219: curl --trace-ascii - -X POST -i 'https://a-webservice.com' \\\n  -H X-apiKey:jamesBond007 -d MESSAGE-TYPE=\"pub.controller.user.created\" \\\n  -d PAYLOAD='a json object goes here!'",
                "so_63373440: curl http://myclient.vpn.myservice:1234"
            ],
            "Top-3 Similar Questions": [
                "so_10357618: HTTP request in Ubuntu",
                "so_42218219: Convert curl request into http request?",
                "so_63373440: How to forward incoming requests to IP through VPN"
            ]
        },
        {
            "Command": "nc",
            "Explanations about Options": {
                "-l(M)": "Listen for an incoming connection rather than initiating a connection to a remote\n host. The destination and port to listen on can be specified either as non-optional\n arguments, or with options -s and -p respectively. Cannot be used together with -x\n or -z. Additionally, any timeouts specified with the -w option are ignored."
            },
            "MP Summary": "arbitrary TCP and UDP connections and listens",
            "Most Similar TLDR Script": "nc -l {{port}}",
            "Most Similar TLDR Task": "Listen on a specified port and print any data received",
            "Top-3 Scripts": [
                "su_1286886: nc localhost 5000\n\necho token | nc localhost 5000",
                "ul_324562: $ nc localhost 222\nSSH-2.0-OpenSSH_7.0\n\n$ nc webserver 80\nGET /\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n[...]"
            ],
            "Top-3 Similar Questions": [
                "su_1286886: Listen for incoming request on port on Linux, then run command",
                "so_42218219: Convert curl request into http request?",
                "ul_269046: Empty response on HTTP request with netcat"
            ]
        },
        {
            "Command": "tcpdump",
            "Explanations about Options": {
                "-c(M)": "Exit after receiving count packets."
            },
            "MP Summary": "dump traffic on a network",
            "Most Similar TLDR Script": "tcpdump net {{192.168.1.0/24}}",
            "Most Similar TLDR Task": "Capture the traffic of a network",
            "Top-3 Scripts": [
                "au_1126645: doug@DOUG-64:~/tcpdump/104$ gunzip -c all0.txt.gz | grep \"IP 192\\.168\\.111\\.101\\.\" | grep \"\\.80:\" | grep \"HTTP: GET\" | grep \"^2019-01-\" | wc -l\n29835\ndoug@DOUG-64:~/tcpdump/104$ gunzip -c all0.txt.gz | grep \"IP 192\\.168\\.111\\.101\\.\" | grep \"\\.80:\" | grep \"HTTP: GET\" | grep \"^2019-02-\" | wc -l\n69684",
                "au_93861: tcpdump ip proto \\\\icmp",
                "su_348327: tcpdump ip proto \\\\icmp"
            ],
            "Top-3 Similar Questions": [
                "au_1126645: Count all outgoing http/s requests",
                "au_93861: Monitor all incoming pings/requests",
                "su_348327: Linux: How to monitor incoming pings"
            ]
        },
        {
            "Command": "ncat",
            "Explanations about Options": {
                "--ssl(M)": "SSL)\n In connect mode, this option transparently negotiates an SSL session with an SSL\n server to securely encrypt the connection. This is particularly handy for talking to\n SSL enabled HTTP servers, etc.",
                "-C(M)": "EOL)\n This option tells Ncat to convert LF line endings to CRLF when taking input from\n standard input. This is useful for talking to some stringent servers directly from a\n terminal in one of the many common plain-text protocols that use CRLF for end-of-line.",
                "-l(M)": "(Listen for connections)\n Listen for connections rather than connecting to a remote machine"
            },
            "MP Summary": "Concatenate and redirect sockets",
            "Most Similar TLDR Script": "ncat -l {{port}} > {{path/to/file}}",
            "Most Similar TLDR Task": "Listen for input on the specified port and write it to the specified file",
            "Top-3 Scripts": [
                "su_312094: ncat -C --ssl www.example.com 443 < input.txt > output.txt"
            ],
            "Top-3 Similar Questions": [
                "su_312094: Manual HTTP(S) request"
            ]
        },
        {
            "Command": "tcpflow",
            "Explanations about Options": {
                "-c(M)": "Console print. Print the contents of packets to stdout as they are received,\n without storing any captured data to files (implies -s).",
                "-i(M)": "Interface name. Capture packets from the network interface named iface. If no\n interface is specified with -i , a reasonable default will be used by libpcap\n automatically.",
                "-p(M)": "No promiscuous mode. Normally, tcpflow attempts to put the network interface into\n promiscuous mode before capturing packets. The -p option tells tcpflow not to put\n the interface into promiscuous mode. Note that it might already be in promiscuous\n mode for some other reason."
            },
            "MP Summary": "TCP flow recorder",
            "Most Similar TLDR Script": "tcpflow -c -i {{eth0}} port {{80}}",
            "Most Similar TLDR Task": "Show all data on the given interface and port",
            "Top-3 Scripts": [
                "ul_6279: tcpflow -p -c -i eth0 port 80 | grep -oE '(GET|POST|HEAD) .* HTTP/1.[01]|Host: .*'"
            ],
            "Top-3 Similar Questions": [
                "ul_6279: On-the-fly monitoring HTTP requests on a network interface?"
            ]
        }
    ],
    "Query": "How to monitor incoming http requests"
}