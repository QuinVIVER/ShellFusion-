{
    "Answers": [
        {
            "Command": "wait",
            "Explanations about Options": {},
            "MP Summary": "await process completion",
            "Most Similar TLDR Script": "wait {{pid}}",
            "Most Similar TLDR Task": "Wait for a process to finish given its process ID (PID) and return its exit status",
            "Top-3 Scripts": [
                "ul_45639: wait(2)\n\nsh myprogram &; wait",
                "so_1157700: wait()",
                "so_23906392: # Assuming that 100,000 seconds is long enough \n# for at least one bg job to complete\nsleep 100000 & sleep_pid=$!\n\n{ MyScript1.sh; kill $sleep_pid 2>/dev/null; } &\n{ MyScript2.sh; kill $sleep_pid 2>/dev/null; } &\n{ MyScript3.sh; kill $sleep_pid 2>/dev/null; } &\nwait $sleep_pid\nMyScript4.sh"
            ],
            "Top-3 Similar Questions": [
                "so_35722491: Parent process waits for all child processes to finish before continuing",
                "ul_45639: wait does not wait",
                "so_1157700: How to wait for exit of non-children processes"
            ]
        },
        {
            "Command": "jobs",
            "Explanations about Options": {},
            "MP Summary": "display status of jobs in the current session",
            "Most Similar TLDR Script": "jobs -s",
            "Most Similar TLDR Task": "Display stopped processes",
            "Top-3 Scripts": [
                "so_38199958: vlc /some/file/path.mkv &\nwhile [[ -n $(jobs -r) ]]; do echo -n \"some data\"; sleep 1; done\n\njobs -r"
            ],
            "Top-3 Similar Questions": [
                "so_37205010: wait one process to finish and execute another process",
                "so_38199958: Run while loop until background process finish its job"
            ]
        },
        {
            "Command": "exit",
            "Explanations about Options": {},
            "MP Summary": "cause the shell to exit",
            "Most Similar TLDR Script": "exit",
            "Most Similar TLDR Task": "Exit the shell with the exit code of the last command executed",
            "Top-3 Scripts": [
                "so_31168145: pid=$!\nwhile kill -0 $pid; do\n    read -t 0 && exit\n    sleep 1\ndone",
                "ul_528431: wait: wait [-fn] [id ...]\n    Wait for job completion and return exit status.\n\n    Waits for each process identified by an ID, which may be a process ID or a\n    job specification, and reports its termination status.  If ID is not\n    given, waits for all currently active child processes, and the return\n    status is zero.  If ID is a job specification, waits for all processes\n    in that job's pipeline."
            ],
            "Top-3 Similar Questions": [
                "so_31168145: Wait for process to finish, or user input",
                "so_8665642: Why do I have to `wait()` for child processes?",
                "so_53605579: wait(NULL) is not waiting till forked process is finished"
            ]
        },
        {
            "Command": "kill",
            "Explanations about Options": {},
            "MP Summary": "send a signal to a process",
            "Most Similar TLDR Script": "kill -{{17|STOP}} {{process_id}}",
            "Most Similar TLDR Task": "Signal the operating system to pause a program until a SIGCONT (\"continue\") signal is received",
            "Top-3 Scripts": [
                "so_31168145: kill -0\n\npid=$!\nwhile kill -0 $pid; do\n    read -t 0 && exit\n    sleep 1\ndone",
                "so_1157700: kill(pid, 0)",
                "so_23906392: # Assuming that 100,000 seconds is long enough \n# for at least one bg job to complete\nsleep 100000 & sleep_pid=$!\n\n{ MyScript1.sh; kill $sleep_pid 2>/dev/null; } &\n{ MyScript2.sh; kill $sleep_pid 2>/dev/null; } &\n{ MyScript3.sh; kill $sleep_pid 2>/dev/null; } &\nwait $sleep_pid\nMyScript4.sh"
            ],
            "Top-3 Similar Questions": [
                "so_31168145: Wait for process to finish, or user input",
                "ul_602274: Bash function that will wait for a process to be finished before starting a new one",
                "so_1157700: How to wait for exit of non-children processes"
            ]
        },
        {
            "Command": "pkill",
            "Explanations about Options": {
                "-P(C)": "I'm guessing that you used \"pkill -P $Pb_id\" as you want to kill all child processes of \"b.sh\", this command kills all of the child processes, but not the process itself.",
                "-P(M)": "Only match processes whose parent process ID is listed."
            },
            "MP Summary": "look up or signal processes based on name and other attributes",
            "Most Similar TLDR Script": "pkill -9 {{process_name}}",
            "Most Similar TLDR Task": "Kill all processes which match",
            "Top-3 Scripts": [
                "au_1154636: pkill -P $b_id\n\npkill -P $Pb_id"
            ],
            "Top-3 Similar Questions": [
                "au_1154636: How to stop a background process when the foreground process finished completing the task"
            ]
        }
    ],
    "Query": "Wait for a process to finish"
}