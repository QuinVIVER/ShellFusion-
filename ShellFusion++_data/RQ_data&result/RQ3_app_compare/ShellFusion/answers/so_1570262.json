{
    "Answers": [
        {
            "Command": "exit",
            "Explanations about Options": {},
            "MP Summary": "cause the shell to exit",
            "Most Similar TLDR Script": "exit {{exit_code}}",
            "Most Similar TLDR Task": "Exit the shell with the specified exit code",
            "Top-3 Scripts": [
                "so_8833394: exit()",
                "so_90418: ls -al file.ext\nrc=$?; if [[ $rc != 0 ]]; then exit $rc; fi",
                "so_51072044: exec {psfd}< <(echo \"hello\"; exit 3); procsub_pid=$!\ncat <&$psfd           # read from the process substitution so it can exit\nexec {psfd}<&-        # close the FD\nwait \"$procsub_pid\"   # wait for the process to collect its exit status\necho \"$?\"\n\ncmd() { printf '%s\\n' My Three Lines; exit 2; }\nexport -f cmd\n\nexec {psfd}< <(timeout 5 bash -c cmd); ps_pid=$!\nperl -pe \"if (/Hello/) { print \\$_; exit 1 }\" <&$psfd\necho \"Perl exited with status $?\"\nwait \"$ps_pid\"; echo \"Process substitution exited with status $?\""
            ],
            "Top-3 Similar Questions": [
                "so_8833394: Can exit() fail to terminate process?",
                "so_90418: Exit Shell Script Based on Process Exit Code",
                "so_8634742: Powershell: How do I get the exit code returned from a process run inside a PsJob?"
            ]
        },
        {
            "Command": "true",
            "Explanations about Options": {},
            "MP Summary": "do nothing, successfully",
            "Most Similar TLDR Script": "true",
            "Most Similar TLDR Task": "Return a successful exit code",
            "Top-3 Scripts": [
                "so_90418: pax> false | true ; echo ${PIPESTATUS[0]}\n1\n\npax> false | true | false; echo ${PIPESTATUS[*]}\n1 0 1\n\ntrue | true | false | true | false\nrcs=${PIPESTATUS[*]}; rc=0; for i in ${rcs}; do rc=$(($i > $rc ? $i : $rc)); done\necho $rc"
            ],
            "Top-3 Similar Questions": [
                "so_90418: Exit Shell Script Based on Process Exit Code",
                "so_51313091: How kill background child processes on bash script exit when child processes repeatedly spawned and kill -9"
            ]
        },
        {
            "Command": "bg",
            "Explanations about Options": {},
            "MP Summary": "run jobs in the background",
            "Most Similar TLDR Script": "bg {{job_id}}",
            "Most Similar TLDR Task": "Resume a specific job (use `jobs -l` to get its ID) and run it in the background",
            "Top-3 Scripts": [],
            "Top-3 Similar Questions": [
                "au_1312449: How do I exit a process in terminal without killing it?"
            ]
        },
        {
            "Command": "fg",
            "Explanations about Options": {},
            "MP Summary": "run jobs in the foreground",
            "Most Similar TLDR Script": "fg",
            "Most Similar TLDR Task": "Bring most recently suspended background job to foreground",
            "Top-3 Scripts": [
                "au_662817: fg <job-number>"
            ],
            "Top-3 Similar Questions": [
                "au_662817: Why can I see the output of background processes?"
            ]
        },
        {
            "Command": "false",
            "Explanations about Options": {},
            "MP Summary": "return false value",
            "Most Similar TLDR Script": "false",
            "Most Similar TLDR Task": "Return an exit code of 1",
            "Top-3 Scripts": [
                "so_90418: pax> false | true ; echo ${PIPESTATUS[0]}\n1\n\npax> false | true | false; echo ${PIPESTATUS[*]}\n1 0 1\n\ntrue | true | false | true | false\nrcs=${PIPESTATUS[*]}; rc=0; for i in ${rcs}; do rc=$(($i > $rc ? $i : $rc)); done\necho $rc"
            ],
            "Top-3 Similar Questions": [
                "so_90418: Exit Shell Script Based on Process Exit Code"
            ]
        }
    ],
    "Query": "Get exit code of a background process"
}