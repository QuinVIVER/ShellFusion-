{
    "Answers": [
        {
            "Command": "jq",
            "Explanations about Options": {
                "-r(C)": "What makes this a viable alternative in terms of performance is that no external utilities are called in each loop iteration; however, for larger input files, a solution based on external utilities will be much faster. .   [1] Here's what a robust \"jq\"-based solution would look like (Bash 4.x): \"readarray -t values < <(jq -r '.[]' myfile.json)\"."
            },
            "MP Summary": "Command-line JSON processor",
            "Most Similar TLDR Script": "jq . {{file.json}}",
            "Most Similar TLDR Task": "Output a JSON file, in pretty-print format",
            "Top-3 Scripts": [
                "so_33537039: jq '.entries[0].author.value' /tmp/data.json \n\"plugin-demo Administrator\"",
                "so_38364261: readarray -t values < <(jq -r '.[]' myfile.json)",
                "so_53508885: {\n  IFS= read -r -d '' status1\n  IFS= read -r -d '' details1\n} < <(jq -r '.status + \"\\u0000\" + .details + \"\\u0000\"' <<<\"$response\")"
            ],
            "Top-3 Similar Questions": [
                "so_33537039: Json parsing with Linux shell script",
                "so_38364261: Parse JSON to array in a shell script",
                "so_28185913: How to read and parse the json file and add it into the shell script variable?"
            ]
        },
        {
            "Command": "ruby",
            "Explanations about Options": {
                "-e(M)": "Specifies script from command-line while telling Ruby not to search the rest\n of the arguments for a script file name."
            },
            "MP Summary": "Interpreted object-oriented scripting language",
            "Most Similar TLDR Script": "ruby {{script.rb}}",
            "Most Similar TLDR Task": "Execute a Ruby script",
            "Top-3 Scripts": [
                "so_33537039: ruby -e 'require \"json\"; puts JSON.parse(File.read(\"data.json\"))[\"entries\"][0][\"author\"][\"value\"]'"
            ],
            "Top-3 Similar Questions": [
                "so_33537039: Json parsing with Linux shell script"
            ]
        },
        {
            "Command": "perl",
            "Explanations about Options": {},
            "MP Summary": "The Perl 5 language interpreter",
            "Most Similar TLDR Script": "perl {{script.pl}}",
            "Most Similar TLDR Task": "Parse and execute a Perl script",
            "Top-3 Scripts": [
                "so_40848249: perl -lne 'print \"$1\" if /.*\\\"_id\\\" : \\\"([[:alnum:]]+)\\\".*/' file\n579289cc0\n5792892323\n57923320",
                "so_16845944: perl -ne 'chomp; @a=split(/\\$,\\$/); $_ = join(\"\", @a[4..($#a-1)]); print join(\"\\$,\\$\", @a[0..3], $_, $a[$#a]), \"\\n\"' < data.txt\n\n... | perl -ne 'print scalar split(/\\$,\\$/), \"\\n\"' | sort -u"
            ],
            "Top-3 Similar Questions": [
                "so_40848249: Parse json from bash script variable for a string",
                "so_16845944: Parse a file under linux"
            ]
        },
        {
            "Command": "python",
            "Explanations about Options": {
                "-c(M)": "Specify the command to execute (see next section). This terminates the option list\n (following options are passed as arguments to the command).",
                "-i(M)": "When a script is passed as first argument or the -c option is used, enter\n interactive mode after executing the script or the command. It does not read the\n $PYTHONSTARTUP file. This can be useful to inspect global variables or a stack\n trace when a script raises an exception."
            },
            "MP Summary": "an interpreted, interactive, object-oriented programming language",
            "Most Similar TLDR Script": "python -i {{script.py}}",
            "Most Similar TLDR Task": "Execute script as part of an interactive shell",
            "Top-3 Scripts": [
                "ul_116228: $ cat members.json | \\\n     python -c 'import json,sys;obj=json.load(sys.stdin);print obj;'\n\n$ cat members.json | \\\n    python -c 'import json,sys;obj=json.load(sys.stdin);print obj[\"hits\"][\"hits\"][0][\"_source\"][\"'$1'\"]';\n\n$ cat members.json | \\\npython -c '\nimport json, sys\nobj=json.load(sys.stdin)\nfor y in [x[\"_source\"][\"'$1'\"] for x in obj[\"hits\"][\"hits\"]]:\n    print y\n'"
            ],
            "Top-3 Similar Questions": [
                "ul_116228: Parse JSON using Python?"
            ]
        },
        {
            "Command": "exit",
            "Explanations about Options": {},
            "MP Summary": "cause the shell to exit",
            "Most Similar TLDR Script": "exit {{exit_code}}",
            "Most Similar TLDR Task": "Exit the shell with the specified exit code",
            "Top-3 Scripts": [
                "so_24644520: case \"$KEY\" in\nsuccess)\n    echo \"Success message: $MESSAGE\"\n    exit 0\n    ;;\nerror)\n    echo \"Error message: $MESSAGE\"\n    exit 1\n    ;;\nesac\n\nIFS=\\\" read __ KEY __ MESSAGE __ <<< \"$DATA\"\necho \"$DATA\"  ## Your really need to show $DATA and not $MESSAGE right?\n[[ $KEY == success ]]\nexit  ## Exits with code based from current $?. Not necessary if you're on the last line of the script."
            ],
            "Top-3 Similar Questions": [
                "so_24644520: How to parse json response in the shell script?"
            ]
        }
    ],
    "Query": "How to parse JSON with shell scripting in Linux?"
}