{
  "Query": "How to download portion of video with youtube-dl command?",
  "Answers": [
    {
      "Command": "youtube-dl",
      "MP Summary": "download videos from youtube.com or other video platforms",
      "Most Similar TLDR Task": "Download a video or playlist",
      "Most Similar TLDR Script": "youtube-dl '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'",
      "Top-3 Similar Questions": [
        "au_1074697: How can I download part of a playlist from YouTube with 'youtube-dl'?",
        "au_948516: How do I download with youtube-dl to get video title as filename?",
        "su_1661048: How to download a portion of a YouTube video"
      ],
      "Top-3 Scripts": [
        "au_1074697: youtube-dl -c -f '...' --playlist-start 2 --playlist-end 8 https://youtube.com/watch/foo\n\nyoutube-dl -c -f '...' --playlist-end 5 https://youtube.com/watch/foo\n\nyoutube-dl -c -f '...' --playlist-start 7 https://youtube.com/watch/foo\n\nyoutube-dl -c -f '...' --playlist-items 2,4,6 https://youtube.com/watch/bar\n\nyoutube-dl -c --playlist-items 2-3,5,8-10,18 https://youtube.com/watch/bar\n\nyoutube-dl -c -f '...' --playlist-end 6 --playlist-reverse",
        "au_948516: man youtube-dl\n\nyoutube-dl -o '%(title)s.%(ext)s' <URL-of-video>",
        "su_1661048: # As scary as it looks, perfectly safe to run in a terminal \n{   \n   read -r video_url  \n   read -r audio_url\n} < <(\n   youtube-dl --get-url --youtube-skip-dash-manifest https://www.youtube.com/watch?v=MfnzBYV5fxs\n)\n\nyoutube-dl --get-url --youtube-skip-dash-manifest \"https://www.youtube.com/watch?v=MfnzBYV5fxs\""
      ],
      "Explanations about Options": {
        "--youtube-skip-dash-manifest": "Do not download the DASH manifests and related data on YouTube videos",
        "--playlist-end": "Playlist video to end at (default is last)",
        "--get-url": "Simulate, quiet but print URL",
        "--playlist-reverse": "Download playlist videos in reverse order",
        "-o": "Output filename template, see the \"OUTPUT TEMPLATE\" for all the info",
        "-c": "Force resume of partially downloaded files. By default, youtube-dl will resume\n downloads if possible."
      }
    },
    {
      "Command": "ffmpeg",
      "MP Summary": "ffmpeg video converter",
      "Most Similar TLDR Task": "Remux MKV video to MP4 without re-encoding audio or video streams",
      "Most Similar TLDR Script": "ffmpeg -i {{input_video}}.mkv -codec copy {{output_video}}.mp4",
      "Top-3 Similar Questions": [
        "au_59383: Extract part of a video with a one-line command",
        "su_1661048: How to download a portion of a YouTube video",
        "so_51121333: ffmpeg extract subclips from video at 10s; 30%; 60%; last 30s of a video"
      ],
      "Top-3 Scripts": [
        "au_59383: ffmpeg -formats -E\n\nffmpeg -ss 00:00:30 -i orginalfile -t 00:00:05 -vcodec copy -acodec copy newfile",
        "su_1661048: # Download 2 minutes of the video between 5 mins in to 7 mins, using timestamps:\nffmpeg -ss 00:05:00.00 -to 00:07:00.00 -i \"$video_url\" -ss 00:05:00.00 -to 00:07:00.00 -i \"$audio_url\" output.mkv\n\n# Download 2 minutes of the video between 5 mins in to 7 mins, using duration:  \nffmpeg -ss 00:05:00.00 -i \"$video_url\" -ss 00:05:00.00 -i \"$audio_url\" -t 2:00 output.mkv\n\n# Download 2 minutes of the video between 5 mins in to 7 mins, using timestamps:\nffmpeg -ss 00:05:00.00 -to 00:07:00.00 -i <video_url> -ss 00:05:00.00 -to 00:07:00.00 -i <audio_url> output.mkv\n\n# Download 2 minutes of the video between 5 mins in to 7 mins, using duration:  \nffmpeg -ss 00:05:00.00 -i <video_url> -ss 00:05:00.00 -i <audio_url> -t 2:00 output.mkv",
        "so_51121333: DURATION=$(ffmpeg -i $file 2>&1 | grep \"Duration\" | awk '{print $2}' | sed 's/\\..*//g' | awk '{split($1, a, \":\"); print 3600*a[1] + 60*a[2] + a[3]}')"
      ],
      "Explanations about Options": {
        "-ss": "When used as an input option (before \"-i\"), seeks in this input file to position. Note\n that in most formats it is not possible to seek exactly, so ffmpeg will seek to the\n closest seek point before position. When transcoding and -accurate_seek is enabled\n (the default), this extra segment between the seek point and position will be decoded\n and discarded. When doing stream copy or when -noaccurate_seek is used, it will be\n preserved.",
        "-vcodec": "Set the video codec. This is an alias for \"-codec:v\".",
        "-i": "input file url",
        "-acodec": "Set the audio codec. This is an alias for \"-codec:a\".",
        "-t": "When used as an input option (before \"-i\"), limit the duration of data read from the\n input file."
      }
    },
    {
      "Command": "aria2c",
      "MP Summary": "The ultra fast download utility",
      "Most Similar TLDR Task": "Download the contents of an URL to a file",
      "Most Similar TLDR Script": "aria2c -o {{filename}} {{url}}",
      "Top-3 Similar Questions": [
        "so_22114610: Downloading a file with wget using multiple connections"
      ],
      "Top-3 Scripts": [
        "so_22114610: aria2c -x 16 [url] #where 16 is the number of connections"
      ],
      "Explanations about Options": {
        "-x": "The maximum number of connections to one server for each download. Default: 1"
      }
    },
    {
      "Command": "curl",
      "MP Summary": "transfer a URL",
      "Most Similar TLDR Task": "Download a file, following [L]ocation redirects, and automatically [C]ontinuing (resuming) a previous file transfer",
      "Most Similar TLDR Script": "curl -O -L -C - {{http://example.com/filename}}",
      "Top-3 Similar Questions": [
        "ul_462646: A file on AkamaiGlobalHost downloads with a browser but not with curl",
        "so_3518968: is it possbile to download one part of a file from web ?",
        "ul_121314: Download only a part of a file"
      ],
      "Top-3 Scripts": [
        "ul_462646: ",
        "so_3518968: curl -o filename -r 0-1048575 <a href=\"http://url/to/file\" rel=\"nofollow noreferrer\">http://url/to/file</a>",
        "ul_121314: $ curl --header \"Range: bytes=2-3\" https://localhost/testfile.txt -k\n34\n$ curl --header \"Range: bytes=0-1\" https://localhost/testfile.txt -k\n12 \n$ curl --header \"Range: bytes=4-\" https://localhost/testfile.txt -k\n5"
      ],
      "Explanations about Options": {
        "-k": "(TLS) By default, every SSL connection curl makes is verified to be secure. This\n option allows curl to proceed and operate even for server connections otherwise\n considered insecure.",
        "-o": "Write output to <file> instead of stdout. If you are using {} or [] to fetch\n multiple documents, you can use '#' followed by a number in the <file> specifier.\n That variable will be replaced with the current string for the URL being fetched.\n Like in:"
      }
    },
    {
      "Command": "import",
      "MP Summary": "saves any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen.",
      "Most Similar TLDR Task": "Capture a specific window, given its ID as displayed by `xwininfo`, into the JPEG format",
      "Most Similar TLDR Script": "import -window {{window_id}} {{output.jpg}}",
      "Top-3 Similar Questions": [
        "so_9081506: How to take pictures from a video with mouse"
      ],
      "Top-3 Scripts": [
        "so_9081506: "
      ],
      "Explanations about Options": {}
    }
  ]
}