{
  "Query": "Best way to find os name and version in Unix/Linux platform",
  "Answers": [
    {
      "Command": "pgrep",
      "MP Summary": "look up or signal processes based on name and other attributes",
      "Most Similar TLDR Task": "Search for process run by a specific user",
      "Most Similar TLDR Script": "pgrep -u root {{process_name}}",
      "Top-3 Similar Questions": [
        "so_50982858: How to use \"which\" with regex, or other ways to find a command in the $PATH"
      ],
      "Top-3 Scripts": [
        "so_50982858: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "uname",
      "MP Summary": "print system information",
      "Most Similar TLDR Task": "Print software-related information: operating system, release number, and version",
      "Most Similar TLDR Script": "uname -srv",
      "Top-3 Similar Questions": [
        "so_45181115: Portable way to find the number of processors/CPU's in a shell script?"
      ],
      "Top-3 Scripts": [
        "so_45181115: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Assemble a file, writing the output to a.out",
      "Most Similar TLDR Script": "as {{file.s}}",
      "Top-3 Similar Questions": [
        "so_18578042: how to find file name ignoring case sensitivity in unix",
        "so_20892134: Find files with brackets in their names with -iwholename"
      ],
      "Top-3 Scripts": [
        "so_18578042: -iname pattern\n          Like -name, but the match is case insensitive.  For example, the\n          patterns `fo*' and `F??' match  the  file  names  `Foo',  `FOO',\n          `foo',  `fOo',  etc.   In these patterns, unlike filename expan\u2010\n          sion by the shell, an initial '.' can be matched by  `*'.   That\n          is, find -name *bar will match the file `.foobar'.   Please note\n          that you should quote patterns as a matter of course,  otherwise\n          the shell will expand any wildcard characters in them.",
        "so_20892134: -path pattern\n         True if the pathname being examined matches pattern.  Special\n         shell pattern matching characters (``['', ``]'', ``*'', and\n         ``?'') may be used as part of pattern.  These characters may be\n         matched explicitly by escaping them with a backslash (``\\'').\n         Slashes (``/'') are treated as normal characters and do not have\n         to be matched explicitly."
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "date",
      "MP Summary": "print or set the system date and time",
      "Most Similar TLDR Task": "Convert a specific date to the Unix timestamp format",
      "Most Similar TLDR Script": "date -d \"{{2018-09-01 00:00}}\" +%s --utc",
      "Top-3 Similar Questions": [
        "ul_655181: Find files with Julian days in a specific range in their names"
      ],
      "Top-3 Scripts": [
        "ul_655181: $ date -d \"2021/03/01\" +%j\n060"
      ],
      "Explanations about Options": {
        "-d": "display time described by STRING, not 'now'"
      }
    },
    {
      "Command": "make",
      "MP Summary": "GNU make utility to maintain groups of programs",
      "Most Similar TLDR Task": "Call a specific target",
      "Most Similar TLDR Script": "make {{target}}",
      "Top-3 Similar Questions": [
        "so_29153861: How can I find all the versions of a Unix program on a system?"
      ],
      "Top-3 Scripts": [
        "so_29153861: /usr/local/sbin/make\n\n/usr/local/bin/make\n\n/usr/bin/make\n\nwhich make"
      ],
      "Explanations about Options": {}
    }
  ]
}