{
  "Query": "Alias for directory listing sorted by time modified in reverse order",
  "Answers": [
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort a file using numeric rather than alphabetic order",
      "Most Similar TLDR Script": "sort -n {{path/to/file}}",
      "Top-3 Similar Questions": [
        "su_643704: List of files under a directory in name order",
        "so_26694153: How to sort lists with chronological order in Linux Terminal?",
        "so_62468086: Sort a merged file by second field in a reverse order"
      ],
      "Top-3 Scripts": [
        "su_643704: find \"$PHOTODIR\" -iname \"*.jpg\" | sort\n\nfind \"$PHOTODIR\" -iname \"*.jpg\" -print0 | sort -z | xargs -0 <command>",
        "so_26694153: sort -s -k7 -k9",
        "so_62468086: sort -t# -rk2 File4"
      ],
      "Explanations about Options": {
        "-s": "stabilize sort by disabling last-resort comparison",
        "-z": "line delimiter is NUL, not newline"
      }
    },
    {
      "Command": "ls",
      "MP Summary": "list directory contents",
      "Most Similar TLDR Task": "List all files, with trailing `/` added to directory names",
      "Most Similar TLDR Script": "ls -F",
      "Top-3 Similar Questions": [
        "au_1182473: How to list all pdf files in a directory, sorted in reverse alphabetical order, with bash?",
        "so_49872339: Shell script to find files after certain modified date and sort them in order of modified date",
        "ul_600268: Most robust way to list every basename in a directory, sorted by modification date?"
      ],
      "Top-3 Scripts": [
        "au_1182473: ls -r all_files/*.pdf\n\n(cd all_files && ls -r -- *.pdf)\n\nls -1r all_files/*.pdf\n\n(cd all_files && ls -1r -- *.pdf)\n\nls --reverse\n\nls -1 --reverse all_files/*.pdf\n\nls -r all_files/!(*.docx)\n\n(cd all_files && ls -r -- !(*.docx))\n\n(shopt -s extglob; ls -r all_files/!(*.docx))\n\n(shopt -s extglob; cd all_files && ls -r -- !(*.docx))",
        "so_49872339: xargs ls\n\nls -tr `find -type f -newermt \"2018-04-09 00:00:00\"`",
        "ul_600268: ls -Lt\n\nls -td -- ./*\n\nls -t | sed -e 's/.[^.]*$//'"
      ],
      "Explanations about Options": {
        "-p": "append / indicator to directories",
        "-w": "set output width to COLS. 0 means no limit",
        "-t": "sort by modification time , newest first",
        "-m": "fill width with a comma separated list of entries",
        "-r": "reverse order while sorting",
        "-n": "like -l, but list numeric user and group IDs"
      }
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Include a given path to the list of directories to search for files specified in .include directives",
      "Most Similar TLDR Script": "as -I {{path/to/directory}} {{file.s}}",
      "Top-3 Similar Questions": [
        "so_66795950: sorting an output in numeric order bash"
      ],
      "Top-3 Scripts": [
        "so_66795950: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Find files modified in the last 7 days, and delete them",
      "Most Similar TLDR Script": "find {{root_path}} -mtime {{-7}} -delete",
      "Top-3 Similar Questions": [
        "su_643704: List of files under a directory in name order",
        "au_840337: Listing modified files using a specific date range in a directory",
        "ul_600268: Most robust way to list every basename in a directory, sorted by modification date?"
      ],
      "Top-3 Scripts": [
        "su_643704: find \"$PHOTODIR\" -iname \"*.jpg\" | sort\n\nfind \"$PHOTODIR\" -iname \"*.jpg\" -print0 | sort -z | xargs -0 <command>",
        "au_840337: find -newerct \"1 Sep 2016\" ! -newerct \"1 Oct 2016\"",
        "ul_600268: find . -type f -print0 | while IFS= read -d '' -r l ; do print \"${${l%.*}##*/}\" ; done"
      ],
      "Explanations about Options": {
        "-print0": "Always print the exact filename, unchanged, even if the output is going to a\n terminal.",
        "-iname": "Like -name, but the match is case insensitive. For example, the patterns `fo*' and\n `F??' match the file names `Foo', `FOO', `foo', `fOo', etc. The pattern `*foo*`\n will also match a file called '.foobar'.",
        "-type": "File is of type c:",
        "-n": "for less than n ,"
      }
    },
    {
      "Command": "tree",
      "MP Summary": "list contents of directories in a tree-like format.",
      "Most Similar TLDR Task": "Print directories only",
      "Most Similar TLDR Script": "tree -d",
      "Top-3 Similar Questions": [
        "ul_348866: How do I list files in the same order as scp -rp copies them?"
      ],
      "Top-3 Scripts": [
        "ul_348866: tree -U"
      ],
      "Explanations about Options": {
        "-U": "Do not sort. Lists files in directory order. Disables --dirsfirst."
      }
    }
  ]
}