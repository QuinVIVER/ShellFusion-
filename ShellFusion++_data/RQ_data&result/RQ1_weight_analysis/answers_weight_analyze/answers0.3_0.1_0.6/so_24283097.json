{
  "Query": "Reusing output from last command in Bash",
  "Answers": [
    {
      "Command": "tail",
      "MP Summary": "output the last part of files",
      "Most Similar TLDR Task": "Show last 'num' lines in 'file' and refresh every 'n' seconds",
      "Most Similar TLDR Script": "tail -n {{num}} -s {{n}} -f {{file}}",
      "Top-3 Similar Questions": [
        "au_621681: How can I execute the last line of output in bash?",
        "so_26736973: execute last output line of previous command in linux",
        "so_51361771: How to remove lines from the output of a command in a bash script"
      ],
      "Top-3 Scripts": [
        "au_621681: $(!! |& tail -1)\n\ntail -1\n\n$(!! 2>&1 >/dev/null | tail -1)",
        "so_26736973: $(!! 2>&1 | tail -n 1)",
        "so_51361771: ldapwhoami | tail -n 1\n\nldapwhoami 2>&1 | tail -n 1\n\nldapwhoami |& tail -n 1"
      ],
      "Explanations about Options": {
        "-n": "output the last NUM lines, instead of the last 10; or use -n +NUM to output\n starting with line NUM"
      }
    },
    {
      "Command": "tee",
      "MP Summary": "read from standard input and write to standard output and files",
      "Most Similar TLDR Task": "Print standard input to the terminal, and also pipe it into another program for further processing",
      "Most Similar TLDR Script": "echo \"example\" | tee {{/dev/tty}} | {{xargs printf \"[%s]\"}}",
      "Top-3 Similar Questions": [
        "so_3297884: Using output of previous commands in bash",
        "so_5955577: Automatically capture output of last command into a variable using Bash?",
        "so_41794805: Read the last line of output of a bash command"
      ],
      "Top-3 Scripts": [
        "so_3297884: make | tee output.txt\ngrep \"warning\" output.txt",
        "so_5955577: PROMPT_COMMAND='LAST=\"`cat /tmp/x`\"; exec >/dev/tty; exec > >(tee /tmp/x)'",
        "so_41794805: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sh",
      "MP Summary": "MirBSD Korn shell",
      "Most Similar TLDR Task": "Execute a command",
      "Most Similar TLDR Script": "sh -c {{command}}",
      "Top-3 Similar Questions": [
        "ul_185156: Reuse output from command 1 in command 2 using a pipe",
        "so_33299398: Get all output of bash command in Python"
      ],
      "Top-3 Scripts": [
        "ul_185156: myCommand | xargs -I{} sh -c 'echo -n {}\\ ; cat /folder/{}/folder2/file'",
        "so_33299398: "
      ],
      "Explanations about Options": {
        "-n": "Do not execute any commands. Useful for checking the syntax of scripts (ignored\n if interactive).",
        "-c": "Impose a size limit of n blocks on the size of core dumps."
      }
    },
    {
      "Command": "exit",
      "MP Summary": "cause the shell to exit",
      "Most Similar TLDR Task": "Exit the shell with the exit code of the last command executed",
      "Most Similar TLDR Script": "exit",
      "Top-3 Similar Questions": [
        "so_33299398: Get all output of bash command in Python"
      ],
      "Top-3 Scripts": [
        "so_33299398: #!/bin/bash\n>&2 echo \"my Error on STDERR!\"\nexit 255"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "eval",
      "MP Summary": "construct command by concatenating arguments",
      "Most Similar TLDR Task": "Set a variable in the current shell",
      "Most Similar TLDR Script": "eval \"{{foo=bar}}\"",
      "Top-3 Similar Questions": [
        "so_39864837: Efficiently rereading (or otherwise reusing) content from an input file in bash"
      ],
      "Top-3 Scripts": [
        "so_39864837: # read command_list.txt only once, storing its contents in an array\nreadarray -t eval_commands < command_list.txt\n\nwhile IFS= read -r -d '' t_file <&3; do          # iterate over filenames from find\n  for eval_command in \"${eval_commands[@]}\"; do  # iterate over your array\n    eval \"$eval_command\"\n  done\ndone 3< <(find target_dir -maxdepth 1 -type f -print0)\n\n# put the filename expansion in *single quotes*\neval \"$eval_command \"'\"$t_file\"'\n\n# generate a safe version of the filename\nprintf -v t_file_q '%q' \"$t_file\"\n\n# ...and use that safe version instead of the original\neval \"$eval_command $t_file_q\"\n\neval \"$eval_command $t_file\""
      ],
      "Explanations about Options": {}
    }
  ]
}