{
  "Query": "grep exclude multiple strings",
  "Answers": [
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Delete lines matching the line pattern",
      "Most Similar TLDR Script": "sed '/{{line_pattern}}/d' {{filename}}",
      "Top-3 Similar Questions": [
        "so_28647088: grep for a line in a file then remove the line",
        "so_51743995: grep to exclude pattern and exclude 2 preceding lines",
        "ul_205478: How to grep whitespace exclude new-line character?"
      ],
      "Top-3 Scripts": [
        "so_28647088: sed -i",
        "so_51743995: GNU sed\n\nsed -E 'N;N; /[acgt]{3}cc[acgt][acgt]{3}/d' ip.txt",
        "ul_205478: sed -n '/[\\t ]$/p' file \n    perl -ne 'print if /[\\t ]$/' file"
      ],
      "Explanations about Options": {
        "-E": "use extended regular expressions in the script (for portability use POSIX -E).",
        "-i": "edit files in place (makes backup if SUFFIX supplied)"
      }
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Top-3 Similar Questions": [
        "so_9153170: Grep for a single line comment but exclude stuff like http://example.com",
        "ul_326519: PCRE-regex Use grep to exclude a capturing group"
      ],
      "Top-3 Scripts": [
        "so_9153170: $ echo $'http://www.example.com\\n   // single line comment' | grep \"^ *//.*\"\n   // single line comment",
        "ul_326519: echo foobar | grep -Po 'foo|foob'"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "grep",
      "MP Summary": "print lines that match patterns",
      "Most Similar TLDR Task": "Invert match for excluding specific strings",
      "Most Similar TLDR Script": "grep -v {{search_pattern}}",
      "Top-3 Similar Questions": [
        "so_32993085: How do I grep for a string excluding some other string",
        "su_509601: grep multiple exclude extension",
        "ul_439299: grep to file to exclude content"
      ],
      "Top-3 Scripts": [
        "so_32993085: grep -v 'anotherString' | grep -A 10 'myString'",
        "su_509601: grep -r --exclude=\\*.{html,htm,js} \"li\" *",
        "ul_439299: grep -vi -f greplist.txt myfile.txt > newfile.txt"
      ],
      "Explanations about Options": {
        "-v": "Invert the sense of matching, to select non-matching lines.",
        "--exclude": "Skip any command-line file with a name suffix that matches the pattern GLOB, using\n wildcard matching; a name suffix is either the whole name, or a trailing part that\n starts with a non-slash character immediately after a slash (/) in the name. When\n searching recursively, skip any subfile whose base name matches GLOB; the base name\n is the part after the last slash. A pattern can use *, ?, and [...] as wildcards,\n and \\ to quote a wildcard or backslash character literally.",
        "-i": "Ignore case distinctions in patterns and input data, so that characters that differ\n only in case match each other.",
        "-r": "Read all files under each directory, recursively, following symbolic links only if\n they are on the command line. Note that if no file operand is given, grep searches\n the working directory. This is equivalent to the -d recurse option.",
        "-f": "Obtain patterns from FILE, one per line. If this option is used multiple times or\n is combined with the -e (--regexp) option, search for all patterns given. The\n empty file contains zero patterns, and therefore matches nothing."
      }
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Most Similar TLDR Task": "Print the last column of each line in a file, using a comma (instead of space) as a field separator",
      "Most Similar TLDR Script": "awk -F ',' '{print $NF}' {{filename}}",
      "Top-3 Similar Questions": [
        "so_28647088: grep for a line in a file then remove the line",
        "so_39463714: Need grep statement to exclude lines",
        "so_43342178: Search files for a string but exclude another string"
      ],
      "Top-3 Scripts": [
        "so_28647088: awk -i inplace -v rmv=\"test\" '!index($0,rmv)' example.txt",
        "so_39463714: awk '/IN=eth0/ && !/SRC=0\\.0\\.0\\.0/ && !/SRC=10\\.0\\.1\\.15/' uwf.log",
        "so_43342178: awk '/xc2/ && !/xbb/' <yourfile>"
      ],
      "Explanations about Options": {
        "-v": "FS=sepstring"
      }
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Find files matching a given pattern, excluding specific paths",
      "Most Similar TLDR Script": "find {{root_path}} -name '{{*.py}}' -not -path '{{*/site-packages/*}}'",
      "Top-3 Similar Questions": [
        "so_47954092: Exclude wildcard containing string 'x'",
        "so_59407697: Exclude multiple folders (bash)",
        "so_46796378: Exclude certain string bash"
      ],
      "Top-3 Scripts": [
        "so_47954092: find . -type f -exec awk '/part1.*part2/ && !/part1.*string_x.*part2/' {} +",
        "so_59407697: find * -mindepth 0 -maxdepth 0 -not -name first_folder -not -name second_folder",
        "so_46796378: sudo find $FOCUS_HOME -maxdepth 1 -mtime +$userDays ! -name 'trunk' -printf '- %f\\n' -exec rm -rf {} \\"
      ],
      "Explanations about Options": {
        "-printf": "True; print format on the standard output, interpreting `\\' escapes and `%'\n directives. Field widths and precisions can be specified as with the `printf' C\n function. Please note that many of the fields are printed as %s rather than %d,\n and this may mean that flags don't work as you might expect. This also means that\n the `-' flag does work (it forces fields to be left-aligned). Unlike -print,\n -printf does not add a newline at the end of the string. The escapes and\n directives are:",
        "-name": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils.",
        "-not": "Same as ! expr, but not POSIX compliant.",
        "-type": "File is of type c:",
        "-mindepth": "Do not apply any tests or actions at levels less than levels (a non-negative\n integer). -mindepth 1 means process all files except the starting-points.",
        "-mtime": "File's data was last modified n*24 hours ago. See the comments for -atime to\n understand how rounding affects the interpretation of file modification times.",
        "-maxdepth": "Descend at most levels (a non-negative integer) levels of directories below the\n starting-points. -maxdepth 0 means only apply the tests and actions to the\n starting-points themselves."
      }
    }
  ]
}