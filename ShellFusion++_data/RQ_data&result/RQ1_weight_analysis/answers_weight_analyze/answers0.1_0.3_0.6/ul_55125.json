{
  "Query": "Alias for directory listing sorted by time modified in reverse order",
  "Answers": [
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort a file using numeric rather than alphabetic order",
      "Most Similar TLDR Script": "sort -n {{path/to/file}}",
      "Top-3 Similar Questions": [
        "ul_203169: How to list all leaf files under a directory in reverse time order?",
        "su_643704: List of files under a directory in name order",
        "ul_332348: How to sort file names in numerical order AND modified time order?"
      ],
      "Top-3 Scripts": [
        "ul_203169: find . ! -type d -printf '%T@\\t%f\\0' | sort -zn |\n  tr '\\n\\0' '\\0\\n' | cut -f2- | tr '\\0' '\\n'",
        "su_643704: find \"$PHOTODIR\" -iname \"*.jpg\" | sort\n\nfind \"$PHOTODIR\" -iname \"*.jpg\" -print0 | sort -z | xargs -0 <command>",
        "ul_332348: { for f (*)\nprintf '%s %s\\n' ${(l:6::0:)${f%%.*}}$(zstat -F '%s' +mtime -- $f) $f\n} | sort -k1,1n"
      ],
      "Explanations about Options": {
        "-z": "line delimiter is NUL, not newline",
        "-n": "compare according to string numerical value"
      }
    },
    {
      "Command": "ls",
      "MP Summary": "list directory contents",
      "Most Similar TLDR Task": "List all files, with trailing `/` added to directory names",
      "Most Similar TLDR Script": "ls -F",
      "Top-3 Similar Questions": [
        "au_1182473: How to list all pdf files in a directory, sorted in reverse alphabetical order, with bash?",
        "ul_645954: Sort directory list in reverse order",
        "so_49872339: Shell script to find files after certain modified date and sort them in order of modified date"
      ],
      "Top-3 Scripts": [
        "au_1182473: ls -r all_files/*.pdf\n\n(cd all_files && ls -r -- *.pdf)\n\nls -1r all_files/*.pdf\n\n(cd all_files && ls -1r -- *.pdf)\n\nls --reverse\n\nls -1 --reverse all_files/*.pdf\n\nls -r all_files/!(*.docx)\n\n(cd all_files && ls -r -- !(*.docx))\n\n(shopt -s extglob; ls -r all_files/!(*.docx))\n\n(shopt -s extglob; cd all_files && ls -r -- !(*.docx))",
        "ul_645954: ls -l /usr/bin/ | sort -k9 -r",
        "so_49872339: xargs ls\n\nls -tr `find -type f -newermt \"2018-04-09 00:00:00\"`"
      ],
      "Explanations about Options": {
        "-p": "append / indicator to directories",
        "-t": "sort by modification time , newest first",
        "-l": "use a long listing format",
        "-w": "set output width to COLS. 0 means no limit",
        "-m": "fill width with a comma separated list of entries",
        "-r": "reverse order while sorting",
        "-n": "like -l, but list numeric user and group IDs"
      }
    },
    {
      "Command": "date",
      "MP Summary": "print or set the system date and time",
      "Most Similar TLDR Task": "Convert a specific date to the Unix timestamp format",
      "Most Similar TLDR Script": "date -d \"{{2018-09-01 00:00}}\" +%s --utc",
      "Top-3 Similar Questions": [
        "so_5289420: UNIX / BASH: Listing files modified in specific month"
      ],
      "Top-3 Scripts": [
        "so_5289420: date -d \"01-Mar-2011 -1 sec\" # last second of Feb-2011"
      ],
      "Explanations about Options": {
        "-d": "display time described by STRING, not 'now'"
      }
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Include a given path to the list of directories to search for files specified in .include directives",
      "Most Similar TLDR Script": "as -I {{path/to/directory}} {{file.s}}",
      "Top-3 Similar Questions": [
        "so_66795950: sorting an output in numeric order bash"
      ],
      "Top-3 Scripts": [
        "so_66795950: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "lsblk",
      "MP Summary": "list block devices",
      "Most Similar TLDR Task": "Also list empty devices",
      "Most Similar TLDR Script": "lsblk -a",
      "Top-3 Similar Questions": [
        "ul_412450: Does lsblk always list disks in sorted ascending order?"
      ],
      "Top-3 Scripts": [
        "ul_412450: lsblk(1)\n\nlsblk --help\n\nlsblk -o NAME -x NAME"
      ],
      "Explanations about Options": {
        "-x": "Sort output lines by column. This option enables --list output format by default.\n It is possible to use the option --tree to force tree-like output and than the tree\n branches are sorted by the column.",
        "-o": "Specify which output columns to print. Use --help to get a list of all supported\n columns. The columns may affect tree-like output. The default is to use tree for\n the column 'NAME' (see also --tree)."
      }
    }
  ]
}