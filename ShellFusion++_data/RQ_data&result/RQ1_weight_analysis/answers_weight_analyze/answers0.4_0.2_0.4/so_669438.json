{
  "Query": "How to get memory usage at runtime using C++?",
  "Answers": [
    {
      "Command": "free",
      "MP Summary": "Display amount of free and used memory in the system",
      "Most Similar TLDR Task": "Display system memory",
      "Most Similar TLDR Script": "free",
      "Top-3 Similar Questions": [
        "ul_152299: How to get memory used(RAM used) using Linux command?",
        "au_1094465: How to get the memory usage by bytes using script",
        "ul_26957: How to get free memory on AIX?"
      ],
      "Top-3 Scripts": [
        "ul_152299: % free\n             total       used       free     shared    buffers     cached\nMem:      24683904   20746840    3937064     254920    1072508   13894892\n-/+ buffers/cache:    5779440   18904464\nSwap:      4194236        136    4194100\n\n% free | awk 'FNR == 3 {print $3/($3+$4)*100}'\n23.8521\n\n% free | awk 'FNR == 3 {print $4/($3+$4)*100}' \n76.0657",
        "au_1094465: #!/usr/bin/env bash\n\necho -e \"$HOSTNAME, $(date +%s), \\\\n $(free -b)\" >> \"system_monitor.csv\"\n\n#! /usr/bin/env bash\n\necho -e \"$HOSTNAME, $(date +%s), \\\\n $(free -b) \\\\n \\\\n\" >> \"system_monitor.csv\"",
        "ul_26957: # svmon\n               size      inuse       free        pin    virtual\nmemory       131072     114552      16520      34191     151562\npg space     655360      78472\n\n               work       pers       clnt      other\npin           30911          6          0       3274\nin use        83264      31288          0"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Assemble a file, writing the output to a.out",
      "Most Similar TLDR Script": "as {{file.s}}",
      "Top-3 Similar Questions": [
        "su_1295005: How to get a disk usage map on linux?"
      ],
      "Top-3 Scripts": [
        "su_1295005: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "vmstat",
      "MP Summary": "Report virtual memory statistics",
      "Most Similar TLDR Task": "Display virtual memory statistics",
      "Most Similar TLDR Script": "vmstat",
      "Top-3 Similar Questions": [
        "ul_26957: How to get free memory on AIX?"
      ],
      "Top-3 Scripts": [
        "ul_26957: vmstat -v"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Top-3 Similar Questions": [
        "so_33774260: How to get Memory Usage in a variable using shell script",
        "ul_674717: Get memory/cpu usage by application",
        "au_1094465: How to get the memory usage by bytes using script"
      ],
      "Top-3 Scripts": [
        "so_33774260: memory_usage=`free -m | awk 'NR==2{print $3*100/$2 }'`\nif [ `echo \"${memory_usage} > 90.0\" | bc` -eq 1 ] ; then\n    echo \" > 90.0 \"\nelse\n    echo \" <= 90.0 \"\nfi",
        "ul_674717: ",
        "au_1094465: #!/usr/bin/env bash\n\necho -e \"$HOSTNAME, $(date +%s), \\\\n $(free -b)\" >> \"system_monitor.csv\"\n\n#! /usr/bin/env bash\n\necho -e \"$HOSTNAME, $(date +%s), \\\\n $(free -b) \\\\n \\\\n\" >> \"system_monitor.csv\""
      ],
      "Explanations about Options": {
        "-e": "enable interpretation of backslash escapes"
      }
    },
    {
      "Command": "valgrind",
      "MP Summary": "a suite of tools for debugging and profiling programs",
      "Most Similar TLDR Task": "Use the (default) Memcheck tool to show a diagnostic of memory usage by `program`",
      "Most Similar TLDR Script": "valgrind {{program}}",
      "Top-3 Similar Questions": [
        "so_22732932: How to get the max memory usage of a program using psutil in Python"
      ],
      "Top-3 Scripts": [
        "so_22732932: $ valgrind --tool=massif cmd arg1 arg2\n\nvalgrind --tool=massif"
      ],
      "Explanations about Options": {
        "--tool": "Run the Valgrind tool called toolname, e.g. memcheck, cachegrind, callgrind, helgrind,\n drd, massif, dhat, lackey, none, exp-sgcheck, exp-bbv, etc."
      }
    }
  ]
}