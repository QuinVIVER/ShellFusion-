{
  "Query": "PowerShell   retrieve JSON object by field value",
  "Answers": [
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Most Similar TLDR Task": "Output all elements from arrays (or all the values from objects) in a JSON file",
      "Most Similar TLDR Script": "jq '.[]' {{file.json}}",
      "Top-3 Similar Questions": [
        "so_32172066: retrieve multiple values from json array using bash",
        "so_64149031: Looping through a json file and retrieving the values into bash variables",
        "so_67404726: Retrieving required set-off json objects using through \"Jq\" method"
      ],
      "Top-3 Scripts": [
        "so_32172066: aws ec2 describe-volumes --region $region --filter Name=tag-key,Values=\"Name\"\\\n    Name=tag-value,Values=\"*$servername\" --filter Name=\"status\",Values=\"available\"\\\n    | jq .[].VolumeId",
        "so_64149031: $ ID=$(cat data.json | jq .Item.ID.S -r)\n$ no=$(cat data.json | jq .Item.no.N -r)\n$ echo $ID $no\n4869949 2",
        "so_67404726: cat input | jq --slurp -c .[] | head -5 | jq . > FirstTopObject.json\ncat input | jq --slurp -c .[] | sed '6,10!d' | jq . > SecondTopObject.json\ncat input | jq --slurp -c .[] | tail -5 | jq . > ThirdTopObject.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Top-3 Similar Questions": [
        "so_32172066: retrieve multiple values from json array using bash",
        "so_64149031: Looping through a json file and retrieving the values into bash variables",
        "so_56242621: Finding highest value in a specific JSON field in bash"
      ],
      "Top-3 Scripts": [
        "so_32172066: ",
        "so_64149031: $ ID=$(cat data.json | jq .Item.ID.S -r)\n$ no=$(cat data.json | jq .Item.no.N -r)\n$ echo $ID $no\n4869949 2",
        "so_56242621: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sed",
      "MP Summary": "stream editor for filtering and transforming text",
      "Most Similar TLDR Task": "Replace only on lines matching the line pattern",
      "Most Similar TLDR Script": "sed '/{{line_pattern}}/s/{{find}}/{{replace}}/' {{filename}}",
      "Top-3 Similar Questions": [
        "so_67836241: Retrieve JSON Object Key Values using SED command",
        "so_67404726: Retrieving required set-off json objects using through \"Jq\" method"
      ],
      "Top-3 Scripts": [
        "so_67836241: sed -n 's/^[[:space:]]*\"name\": \"\\(.*\\)\",/\\1/p' output.txt\n# With GNU sed:\nsed -n 's/^\\s*\"name\":\\s*\"\\(.*\\)\",/\\1/p' output.txt\n\nsed -z 's/.*\"fields\":\\s*{\\s*\"status\": {.*\\s*name\": \"\\([^\"]*\\)\".*/\\1/' output.txt",
        "so_67404726: cat input | jq --slurp -c .[] | head -5 | jq . > FirstTopObject.json\ncat input | jq --slurp -c .[] | sed '6,10!d' | jq . > SecondTopObject.json\ncat input | jq --slurp -c .[] | tail -5 | jq . > ThirdTopObject.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "printf",
      "MP Summary": "format and print data",
      "Most Similar TLDR Task": "Print a text message composed with environment variables",
      "Most Similar TLDR Script": "printf \"{{var1: %s\\tvar2: %s\\n}}\" \"{{$VAR1}}\" \"{{$VAR2}}\"",
      "Top-3 Similar Questions": [
        "so_5117622: Retrieve value from CSV file"
      ],
      "Top-3 Scripts": [
        "so_5117622: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "cut",
      "MP Summary": "remove sections from each line of files",
      "Most Similar TLDR Task": "Cut out everything from the 3rd character to the end of each line",
      "Most Similar TLDR Script": "cut -c {{3-}}",
      "Top-3 Similar Questions": [
        "au_1203818: How to retrieve a value from a JSON using bash?"
      ],
      "Top-3 Scripts": [
        "au_1203818: man cut\n\nregCode=\"$( aws iot get-registration-code |\\\n    tr -d '{}' |\\\n    cut '-d\"' -f4 )\"\n\ncode=\"${regCode}.registrationCode\""
      ],
      "Explanations about Options": {}
    }
  ]
}