{
  "Query": "How to compare two floating point numbers in Bash?",
  "Answers": [
    {
      "Command": "cmp",
      "MP Summary": "compare two files",
      "Most Similar TLDR Task": "Find the byte number and differing bytes of every difference",
      "Most Similar TLDR Script": "cmp -l {{file1}} {{file2}}",
      "Top-3 Similar Questions": [
        "so_48491662: Comparing two version numbers in a shell script",
        "so_8081860: Comparing large numbers of files in Bash quickly"
      ],
      "Top-3 Scripts": [
        "so_48491662: if cmp -s <(cut -d: -f2 infile) <(cut -d: -f2 infile | sort -V); then\n    echo 'FAILURE'\nelse\n    echo 'SUCCESS'\nfi",
        "so_8081860: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "bc",
      "MP Summary": "An arbitrary precision calculator language",
      "Most Similar TLDR Task": "Calculate expression and force number of decimal places to 10",
      "Most Similar TLDR Script": "bc <<< \"scale=10; 5 / 3\"",
      "Top-3 Similar Questions": [
        "so_39799064: [: missing `]' error while comparing variables with floating point numbers in a bash script",
        "au_635147: Checking a floating point value within a range",
        "so_55595636: Comparing floating-point numbers in an `if` statement in bash"
      ],
      "Top-3 Scripts": [
        "so_39799064: ",
        "au_635147: if [ $(bc <<< \"$result > 17.5\") -eq 1 -a $(bc <<< \"$result <= 18.2\") -eq 1 ]\n\nif [[ $(bc <<< \"$result > 17.5\") == 1 && $(bc <<< \"$result <= 18.2\") == 1 ]]\n\nif [ $(bc <<< \"$result > 17.5\") -eq 1 ] && [ $(bc <<< \"$result <= 18.2\") -eq 1 ]\n\n[[ $( bc <<< \"$result > 17.5; %result <= 18.2\" ) == $'1\\n1' ]]\n\nif [[ $(bc <<< \"$result > 17.5 && $result <= 18.2\") == 1 ]]",
        "so_55595636: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "printf",
      "MP Summary": "format and print data",
      "Most Similar TLDR Task": "Print a float number with the unicode Euro sign",
      "Most Similar TLDR Script": "printf \"{{\\u20AC %.2f\\n}}\" {{123.4}}",
      "Top-3 Similar Questions": [
        "so_28304185: Determining the number of decimals in a float number",
        "au_611600: How to compare float variables in awk?",
        "so_28903613: shell script compare two array of number"
      ],
      "Top-3 Scripts": [
        "so_28304185: printf -v v '6.%03d' $((i*20))",
        "au_611600: ",
        "so_28903613: array1=(0 1 2 3 4 5 6 7 8 9 10 11 12)\narray2=(0 1 3 4 6 7 10 12)\n\ncomm -23 <(printf \"%s\\n\" \"${array1[@]}\" | sort) <(printf \"%s\\n\" \"${array2[@]}\" | sort) | sort -n\n\n2\n5\n8\n9\n11"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort numbers with exponents",
      "Most Similar TLDR Script": "sort --general-numeric-sort {{path/to/file}}",
      "Top-3 Similar Questions": [
        "so_28903613: shell script compare two array of number",
        "so_29135022: How to compare two strings in variables in bash",
        "so_48491662: Comparing two version numbers in a shell script"
      ],
      "Top-3 Scripts": [
        "so_28903613: array1=(0 1 2 3 4 5 6 7 8 9 10 11 12)\narray2=(0 1 3 4 6 7 10 12)\n\ncomm -23 <(printf \"%s\\n\" \"${array1[@]}\" | sort) <(printf \"%s\\n\" \"${array2[@]}\" | sort) | sort -n\n\n2\n5\n8\n9\n11",
        "so_29135022: $ awk '{print $1}' WEDI_RC | sort -u\nfile1\nfile2\nfile3",
        "so_48491662: if cmp -s <(cut -d: -f2 infile) <(cut -d: -f2 infile | sort -V); then\n    echo 'FAILURE'\nelse\n    echo 'SUCCESS'\nfi\n\nCurrV='1.5.2'\nExpecV='1.8.1'\nprintf -v versions '%s\\n%s' \"$CurrV\" \"$ExpecV\"\nif [[ $versions = \"$(sort -V <<< \"$versions\")\" ]]; then\n    echo 'FAILURE'\nelse\n    echo 'SUCCESS'\nfi"
      ],
      "Explanations about Options": {
        "-u": "with -c, check for strict ordering; without -c, output only the first of an equal\n run",
        "-V": "natural sort of (version) numbers within text",
        "-n": "compare according to string numerical value"
      }
    },
    {
      "Command": "perl",
      "MP Summary": "The Perl 5 language interpreter",
      "Most Similar TLDR Task": "Parse and execute a Perl statement",
      "Most Similar TLDR Script": "perl -e {{perl_statement}}",
      "Top-3 Similar Questions": [
        "so_36031317: Replacing precision of floating point numbers in existing file"
      ],
      "Top-3 Scripts": [
        "so_36031317: perl -pe '!/^step/ && s/(\\S+)/sprintf(\"%.2e\", $1)/ge' file"
      ],
      "Explanations about Options": {}
    }
  ]
}