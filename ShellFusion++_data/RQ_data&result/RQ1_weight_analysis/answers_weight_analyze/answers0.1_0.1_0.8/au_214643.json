{
  "Query": "Help with creating a symbolic link",
  "Answers": [
    {
      "Command": "ln",
      "MP Summary": "make links between files",
      "Most Similar TLDR Task": "Create a symbolic link to a file or directory",
      "Most Similar TLDR Script": "ln -s {{path/to/file_or_directory}} {{path/to/symlink}}",
      "Top-3 Similar Questions": [
        "ul_331381: Creating symbolic link",
        "ul_159843: Creating symbolic link recursively",
        "so_27347465: Create symbolic link of a folder"
      ],
      "Top-3 Scripts": [
        "ul_331381: $ mv /home/app/var/cache /mnt/new_cache_folder\n$ ln -s /mnt/new_cache_folder /home/app/var/cache",
        "ul_159843: ",
        "so_27347465: ln -s /usr/local/var /var/run"
      ],
      "Explanations about Options": {
        "-s": "make symbolic links instead of hard links"
      }
    },
    {
      "Command": "link",
      "MP Summary": "call the link function to create a link to a file",
      "Most Similar TLDR Task": "Create a hard link from a new file to an existing file",
      "Most Similar TLDR Script": "link {{path/to/existing_file}} {{path/to/new_file}}",
      "Top-3 Similar Questions": [
        "ul_358690: Can I create a symbolic link to a file I can't access?",
        "su_335466: How to create a symbolic link in an other directory?",
        "ul_507529: Error to Create symbolic binary link"
      ],
      "Top-3 Scripts": [
        "ul_358690: $ ln -s /etc/shadow foo\n$ file foo\nfoo: symbolic link to /etc/shadow\n$ cat foo\ncat: foo: Permission denied\n\n$ ln -s /etc/nonexistent bar\n$ file bar\nbar: broken symbolic link to /etc/nonexistent",
        "su_335466: ln -s $(pwd)/F /full/path/to/A/link",
        "ul_507529: [root@vvek-workstation grep]# ln -ss ./vi ./vim \nln: failed to create symbolic link \u2018./vim\u2019: File exists\n[root@vvek-workstation grep]# ln -sf ./vi ./vim \n[root@vvek-workstation grep]# ls -lart\ntotal 0\ndrwxr-xr-x. 9 root root 228 Mar 20 15:20 ..\n-rw-r--r--  1 root root   0 Mar 20 16:00 vi\nlrwxrwxrwx  1 root root   4 Mar 20 16:00 vim -> ./vi\ndrwxr-xr-x  2 root root  27 Mar 20 16:00 ."
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "cp",
      "MP Summary": "copy files and directories",
      "Most Similar TLDR Task": "Dereference symbolic links before copying",
      "Most Similar TLDR Script": "cp -L {{link}} {{path/to/target_directory}}",
      "Top-3 Similar Questions": [
        "nl2bash_10630: Copy directory hierarchy \"dir\" and all its .txt files to \"dir_txt\""
      ],
      "Top-3 Scripts": [
        "nl2bash_10630: find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents"
      ],
      "Explanations about Options": {
        "-a": "same as -dR --preserve=all",
        "--parents": "use full source file name under DIRECTORY",
        "--target-directory": "copy all SOURCE arguments into DIRECTORY"
      }
    },
    {
      "Command": "pwd",
      "MP Summary": "print name of current/working directory",
      "Most Similar TLDR Task": "Print the current directory, and resolve all symlinks (i.e. show the \"physical\" path)",
      "Most Similar TLDR Script": "pwd -P",
      "Top-3 Similar Questions": [
        "su_335466: How to create a symbolic link in an other directory?",
        "ul_84175: Create a symbolic link relative to the current directory"
      ],
      "Top-3 Scripts": [
        "su_335466: ",
        "ul_84175: $ pwd\n/usr/bin\n$ ln -s ls /usr/bin/ls2\n\n$ pwd\n/home/me\n$ ln -s ls /usr/bin/ls2"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "readlink",
      "MP Summary": "print resolved symbolic links or canonical file names",
      "Most Similar TLDR Task": "Get the absolute path to a file",
      "Most Similar TLDR Script": "readlink -f {{filename}}",
      "Top-3 Similar Questions": [
        "so_3862179: Creating a symbolic link in a bash script in a different folder"
      ],
      "Top-3 Scripts": [
        "so_3862179: ln -s \"$(readlink -e \"$2\")\" \"$1/link\""
      ],
      "Explanations about Options": {
        "-e": "canonicalize by following every symlink in every component of the given name\n recursively, all components must exist"
      }
    }
  ]
}