{
  "Query": "How to view core files for debugging purposes in Linux?",
  "Answers": [
    {
      "Command": "unzip",
      "MP Summary": "list, test and extract compressed files in a ZIP archive",
      "Most Similar TLDR Task": "Extract zip file(s) (for multiple files, separate file paths by spaces)",
      "Most Similar TLDR Script": "unzip {{file(s)}}",
      "Top-3 Similar Questions": [
        "su_216617: View list of files in ZIP archive on Linux",
        "ul_49992: How can I view files in zip from a terminal command line"
      ],
      "Top-3 Scripts": [
        "su_216617: unzip -l zipfile",
        "ul_49992: unzip -l <filename>"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "find",
      "MP Summary": "search for files in a directory hierarchy",
      "Most Similar TLDR Task": "Find files by extension",
      "Most Similar TLDR Script": "find {{root_path}} -name '{{*.ext}}'",
      "Top-3 Similar Questions": [
        "so_34309734: viewing the largest file in the directory using linux?",
        "so_1695434: viewing source of namespace resolver functions linux fedora",
        "au_700885: How to view recent files from the command-line?"
      ],
      "Top-3 Scripts": [
        "so_34309734: ",
        "so_1695434: $ curl -O http://ftp.gnu.org/gnu/glibc/glibc-2.7.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 20.2M  100 20.2M    0     0  12.3M      0  0:00:01  0:00:01 --:--:-- 12.8M\n$ tar xzf glibc-2.7.tar.gz\n$ cd glibc-2.7\n$ find . -name \"*.c\" | xargs grep res_search\n./resolv/res_data.c:res_search(const char *name, /* domain name */\n./resolv/res_data.c:# undef res_search\n./resolv/res_data.c:weak_alias (__res_search, res_search);",
        "au_700885: recently=5\nfind . -type f -amin \"$recently\""
      ],
      "Explanations about Options": {
        "-amin": "File was last accessed n minutes ago.",
        "-name": "This option is supported, but POSIX conformance depends on the POSIX conformance of\n the system's fnmatch(3) library function. As of findutils-4.2.2, shell\n metacharacters (`*', `?' or `[]' for example) will match a leading `.', because\n IEEE PASC interpretation 126 requires this. This is a change from previous\n versions of findutils.",
        "-type": "File is of type c:"
      }
    },
    {
      "Command": "debugfs",
      "MP Summary": "ext2/ext3/ext4 file system debugger",
      "Most Similar TLDR Task": "View the filesystem stats in debugfs console",
      "Most Similar TLDR Script": "stats",
      "Top-3 Similar Questions": [
        "su_591186: View file system inode tree / table of contents via Linux CLI?"
      ],
      "Top-3 Scripts": [
        "su_591186: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "stat",
      "MP Summary": "display file or file system status",
      "Most Similar TLDR Task": "Show file properties such as size, permissions, creation and access dates among others",
      "Most Similar TLDR Script": "stat {{file}}",
      "Top-3 Similar Questions": [
        "ul_336845: How to view the size of the binary files using linux command?"
      ],
      "Top-3 Scripts": [
        "ul_336845: stat -c %s  /data/local/tools/bin/csimu"
      ],
      "Explanations about Options": {
        "-c": "use the specified FORMAT instead of the default; output a newline after each use of\n FORMAT"
      }
    },
    {
      "Command": "gcc",
      "MP Summary": "GNU project C and C++ compiler",
      "Most Similar TLDR Task": "Compile multiple source files into executable",
      "Most Similar TLDR Script": "gcc {{source1.c}} {{source2.c}} -o {{executable}}",
      "Top-3 Similar Questions": [
        "au_1349047: Where do I find core dump files, and how do I view and analyze the backtrace (stack trace) in one?"
      ],
      "Top-3 Scripts": [
        "au_1349047: # C build and run command for \"hello_world.c\"\ngcc -Wall -Wextra -Werror -ggdb -O0 -std=c11 -o hello_world hello_world.c \\\n&& ./hello_world\n\n# C++ build and run command for \"hello_world.c\"\ng++ -Wall -Wextra -Werror -ggdb -O0 -std=c++17 -o hello_world hello_world.c \\\n&& ./hello_world"
      ],
      "Explanations about Options": {
        "-ggdb": "Produce debugging information for use by GDB. This means to use the most expressive\n format available (DWARF, stabs, or the native format if neither of those are\n supported), including GDB extensions if at all possible.",
        "-Wextra": "This enables some extra warning flags that are not enabled by -Wall. (This option used\n to be called -W. The older name is still supported, but the newer name is more\n descriptive.)",
        "-std": "Determine the language standard. This option is currently only supported when\n compiling C or C++.",
        "-O0": "Reduce compilation time and make debugging produce the expected results. This is the\n default.",
        "-o": "Place output in file file. This applies to whatever sort of output is being produced,\n whether it be an executable file, an object file, an assembler file or preprocessed C\n code.",
        "-Wall": "turns on the following warning flags:",
        "-Werror": "Make the specified warning into an error. The specifier for a warning is appended;\n for example -Werror=switch turns the warnings controlled by -Wswitch into errors.\n This switch takes a negative form, to be used to negate -Werror for specific warnings;\n for example -Wno-error=switch makes -Wswitch warnings not be errors, even when -Werror\n is in effect."
      }
    }
  ]
}