{
  "Query": "PowerShell   retrieve JSON object by field value",
  "Answers": [
    {
      "Command": "jq",
      "MP Summary": "Command-line JSON processor",
      "Most Similar TLDR Task": "Output all elements from arrays (or all the values from objects) in a JSON file",
      "Most Similar TLDR Script": "jq '.[]' {{file.json}}",
      "Top-3 Similar Questions": [
        "so_48205247: JQ - parsing field by hierarchy",
        "so_64149031: Looping through a json file and retrieving the values into bash variables",
        "so_67404726: Retrieving required set-off json objects using through \"Jq\" method"
      ],
      "Top-3 Scripts": [
        "so_48205247: jq '.[] | .[].y | .\"number of un-used\" | .count + 0' < input.json\n\n$ { printf '%s+' $(jq '.[] | .[].y | .\"number of un-used\" | .count + 0' input.json); echo 0; } | bc\n18",
        "so_64149031: $ ID=$(cat data.json | jq .Item.ID.S -r)\n$ no=$(cat data.json | jq .Item.no.N -r)\n$ echo $ID $no\n4869949 2",
        "so_67404726: cat input | jq --slurp -c .[] | head -5 | jq . > FirstTopObject.json\ncat input | jq --slurp -c .[] | sed '6,10!d' | jq . > SecondTopObject.json\ncat input | jq --slurp -c .[] | tail -5 | jq . > ThirdTopObject.json"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Top-3 Similar Questions": [
        "so_48205247: JQ - parsing field by hierarchy",
        "so_64149031: Looping through a json file and retrieving the values into bash variables",
        "so_40988026: Not able retrieve the key value from shell script"
      ],
      "Top-3 Scripts": [
        "so_48205247: $ { printf '%s+' $(jq '.[] | .[].y | .\"number of un-used\" | .count + 0' input.json); echo 0; } | bc\n18",
        "so_64149031: $ ID=$(cat data.json | jq .Item.ID.S -r)\n$ no=$(cat data.json | jq .Item.no.N -r)\n$ echo $ID $no\n4869949 2",
        "so_40988026: echo  \"${!servername_value}\""
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "awk",
      "MP Summary": "pattern scanning and processing language",
      "Most Similar TLDR Task": "Print the last column of each line in a file, using a comma (instead of space) as a field separator",
      "Most Similar TLDR Script": "awk -F ',' '{print $NF}' {{filename}}",
      "Top-3 Similar Questions": [
        "so_48205247: JQ - parsing field by hierarchy",
        "ul_582248: Retrieve first two fields from the first column",
        "so_6358436: How would I find a variable in a line and use cut to retrieve the value"
      ],
      "Top-3 Scripts": [
        "so_48205247: | awk '{n+=$1}END{print n}'",
        "ul_582248: awk -F':[^a-z]+' '{print $1, $2}' file1",
        "so_6358436: awk  '/Disktype/{print $2}' RS=\" \" FS=="
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "join",
      "MP Summary": "join lines of two files on a common field",
      "Most Similar TLDR Task": "Join two files using a comma (instead of a space) as the field separator",
      "Most Similar TLDR Script": "join -t {{','}} {{file1}} {{file2}}",
      "Top-3 Similar Questions": [
        "ul_480810: Retrieve Field Rows from a Pipe Delimited File"
      ],
      "Top-3 Scripts": [
        "ul_480810: perl -F'\\|' -lanE 'while (@F) {say join(\"|\", splice @F, 0, 9), \"|\"}' a.txt"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "sort",
      "MP Summary": "sort lines of text files",
      "Most Similar TLDR Task": "Sort a file preserving only unique lines",
      "Most Similar TLDR Script": "sort -u {{path/to/file}}",
      "Top-3 Similar Questions": [
        "so_32499924: Retrieve latest value of each month"
      ],
      "Top-3 Scripts": [
        "so_32499924: gc $filePath |\n sort { [datetime]$_ } -Descending |\n  group {([datetime]$_).Month } |\n   % {$_.Group | select -first 1}\n\n| sort { [datetime]$_ }\n\n$array3 = gc $filePath |\n ? { $tmp = [datetime]$_; $tmp.Month -ne \"8\" -and $tmp.Month -ne \"9\" } |\n sort { [datetime]$_ } -Descending|\n  group {([datetime]$_).Month } |\n   % {$_.Group | select -first 1}\n   sort { [datetime]$_ } -Descending"
      ],
      "Explanations about Options": {
        "-g": "compare according to general numerical value",
        "-d": "consider only blanks and alphanumeric characters",
        "-c": "check for sorted input; do not sort",
        "-i": "consider only printable characters",
        "-s": "stabilize sort by disabling last-resort comparison",
        "-n": "compare according to string numerical value"
      }
    }
  ]
}