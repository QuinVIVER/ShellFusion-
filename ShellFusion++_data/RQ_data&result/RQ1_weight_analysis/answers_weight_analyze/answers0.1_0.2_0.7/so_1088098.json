{
  "Query": "How do I divide in the Linux console?",
  "Answers": [
    {
      "Command": "cp",
      "MP Summary": "copy files and directories",
      "Most Similar TLDR Task": "Copy a file to another location",
      "Most Similar TLDR Script": "cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}",
      "Top-3 Similar Questions": [
        "so_30234984: dividing outputs in make by filename",
        "au_612131: How to display more than 1 terminal simultaneously",
        "so_62236261: Linux Copy All Files with specific filename length"
      ],
      "Top-3 Scripts": [
        "so_30234984: %.output1: %.input\n    # If the stem that matched the '%' is equal to 'filename1'\n    if [ filename1 = '$*' ]; then\n        # Then copy the prerequisite/input file to the output file name.\n        cp $< $@\n    fi",
        "au_612131: cp /usr/share/applications/terminator.desktop ~/.local/share/applications/\nnano ~/.local/share/applications/terminator.desktop",
        "so_62236261: cp ???.py destination_directory/"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "echo",
      "MP Summary": "display a line of text",
      "Most Similar TLDR Task": "Print a message with environment variables",
      "Most Similar TLDR Script": "echo \"{{My path is $PATH}}\"",
      "Top-3 Similar Questions": [
        "so_30398014: Divide two variables in bash",
        "so_24093798: How to divide variable by 10",
        "su_536496: Capturing the console output"
      ],
      "Top-3 Scripts": [
        "so_30398014: var1=8\nvar2=4\necho $((var1 / var2))\n\nvar1=3\nvar2=4\necho $((var1 / var2))\n\necho \"scale=2 ; $var1 / $var2\" | bc",
        "so_24093798: echo \"scale=1; $RX/10\" | bc",
        "su_536496: echo \"SELECT COUNT(*) FROM test\" | hive 2>&1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "as",
      "MP Summary": "or  any situation  where  you want to make sure you're doing a clean install of your dependencies. It  can  be  significantly  faster  than  a  regular  npm  install  by  skipping   certain user-oriented  features.  It  is  also  more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed  local  environments of most npm users. In short, the main differences between using npm install and npm ci are: \u00b7 The project must have an existing package-lock.json or npm-shrinkwrap.json. \u00b7 If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package lock. \u00b7 npm ci can only install entire projects at a time:  individual  dependencies  cannot  be added with this command. \u00b7 If  a  node_modules  is  already present, it will be automatically removed before npm ci begins its install. \u00b7 It will  never  write  to  package.json  or  any  of  the  package-locks:  installs  are essentially frozen. See Also \u00b7 npm help install \u00b7 npm help package-locks April 2020                                  NPM-CI(1)",
      "Most Similar TLDR Task": "Include a given path to the list of directories to search for files specified in .include directives",
      "Most Similar TLDR Script": "as -I {{path/to/directory}} {{file.s}}",
      "Top-3 Similar Questions": [
        "so_37624881: Divide Every Other Line Between Two Files",
        "so_6069162: Dividing an array equally in C"
      ],
      "Top-3 Scripts": [
        "so_37624881: with open('January.txt', 'r') as f1, open('February.txt', 'r') as f2:\n    for x, y in zip(f1.read().splitlines()[1::2], f2.read().splitlines()[1::2]):\n        print(float(x) / int(y))",
        "so_6069162: int arraySize = 100; // You would get a count from the array here\nint nChildren = 5; // This would be provided by you as a parameter to this function\nint parentSize = sqrt(arraySize);\nint remainder = arraySize - parentSize;\nint nChildSize = (remainder / nChildren) + 1"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "uname",
      "MP Summary": "print system information",
      "Most Similar TLDR Task": "Print all available system information (hardware, software, nodename)",
      "Most Similar TLDR Script": "uname -a",
      "Top-3 Similar Questions": [
        "so_29128798: Delete last executed command in Linux terminal"
      ],
      "Top-3 Scripts": [
        "so_29128798: "
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "import",
      "MP Summary": "saves any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen.",
      "Most Similar TLDR Task": "Capture the entire X server screen in the PostScript image format",
      "Most Similar TLDR Script": "import -window root {{output.postscript}}",
      "Top-3 Similar Questions": [
        "so_38677043: How to create own Linux console app?"
      ],
      "Top-3 Scripts": [
        "so_38677043: #!/bin/python\n\n# hello.py\n\nfrom sys import argv\n\nname = argv[1]\nif name == 'bob':\n    print('hello', name)"
      ],
      "Explanations about Options": {}
    }
  ]
}