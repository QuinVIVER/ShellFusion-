{
  "Query": "How to monitor incoming http requests",
  "Answers": [
    {
      "Command": "curl",
      "MP Summary": "transfer a URL",
      "Most Similar TLDR Task": "Send a request with an extra header, using a custom HTTP method",
      "Most Similar TLDR Script": "curl -H {{'X-My-Header: 123'}} -X {{PUT}} {{http://example.com}}",
      "Top-3 Similar Questions": [
        "ul_497706: Does `curl -v` show the complete HTTP request including the body?",
        "ul_105134: Type URL and show HTTP status",
        "au_293426: What system monitoring tools are available?"
      ],
      "Top-3 Scripts": [
        "ul_497706: curl --data \"user=user&password=password\" --trace google.log http://google.com/",
        "ul_105134: url=$1\ncurl -sL $url -w \"%{http_code} %{url_effective}\\\\n\" \"URL\" -o /dev/null",
        "au_293426: curl -L https://raw.githubusercontent.com/nicolargo/glancesautoinstall/master/install.sh | sudo /bin/bash"
      ],
      "Explanations about Options": {
        "-w": "Make curl display information on stdout after a completed transfer. The format is a\n string that may contain plain text mixed with any number of variables. The format\n can be specified as a literal \"string\", or you can have curl read the format from a\n file with \"@filename\" and to tell curl to read the format from stdin you write\n \"@-\".",
        "-o": "Write output to <file> instead of stdout. If you are using {} or [] to fetch\n multiple documents, you can use '#' followed by a number in the <file> specifier.\n That variable will be replaced with the current string for the URL being fetched.\n Like in:",
        "--trace": "Enables a full trace dump of all incoming and outgoing data, including descriptive\n information, to the given output file. Use \"-\" as filename to have the output sent\n to stdout. Use \"%\" as filename to have the output sent to stderr.",
        "--data": "(HTTP) Sends the specified data in a POST request to the HTTP server, in the same\n way that a browser does when a user has filled in an HTML form and presses the\n submit button. This will cause curl to pass the data to the server using the\n content-type application/x-www-form-urlencoded. Compare to -F, --form.",
        "-s": "Silent or quiet mode. Don't show progress meter or error messages. Makes Curl\n mute. It will still output the data you ask for, potentially even to the\n terminal/stdout unless you redirect it."
      }
    },
    {
      "Command": "tcpdump",
      "MP Summary": "dump traffic on a network",
      "Most Similar TLDR Task": "Capture the traffic from a specific interface, source, destination and destination port",
      "Most Similar TLDR Script": "tcpdump -i {{eth0}} src {{192.168.1.1}} and dst {{192.168.1.2}} and dst port {{80}}",
      "Top-3 Similar Questions": [
        "au_93861: Monitor all incoming pings/requests",
        "su_348327: Linux: How to monitor incoming pings",
        "so_33570391: How to see all Request URLs the server is doing (final URLs)"
      ],
      "Top-3 Scripts": [
        "au_93861: tcpdump ip proto \\\\icmp",
        "su_348327: tcpdump ip proto \\\\icmp",
        "so_33570391: tcpdump -i any -A -vv -s 0 |  grep -e \"Host:\"\n\n[root@localhost ~]# tcpdump -i any -A -vv -s 0 | egrep -e \"GET\" -e \"POST\" -e \"Host:\"\ntcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 65535 bytes\nE..v.[@.@.......h.$....P....Ga  .P.9.=...GET / HTTP/1.1\nHost: stackoverflow.com\nE....x@.@..7....h.$....P....Ga.mP...>;..GET /search?q=tcpdump HTTP/1.1\nHost: stackoverflow.com\n\n[root@localhost ~]# ngrep -d any -vv -w byline | egrep -e \"Host:\" -e \"GET\" -e \"POST\"\n^[[B  GET //meta.stackoverflow.com HTTP/1.1..Host: stackoverflow.com..User-Agent:\n  GET //search?q=tcpdump HTTP/1.1..Host: stackoverflow.com..User-Agent: Links"
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "ping",
      "MP Summary": "send ICMP ECHO_REQUEST to network hosts",
      "Most Similar TLDR Task": "Also display a message if no response was received",
      "Most Similar TLDR Script": "ping -O {{host}}",
      "Top-3 Similar Questions": [
        "au_564349: Remote monitor PC status"
      ],
      "Top-3 Scripts": [
        "au_564349: ping -c1 ipadress\n\n#!/bin/bash\n\n# machine 1\nping -c1 ipadress &> /dev/null && echo \"machine 1 is up\" || echo \"machine 1 is down\"\n\n# machine 2\nping -c1 ipadress &> /dev/null && echo \"machine 2 is up\" || echo \"machine 2 is down\"\n# .."
      ],
      "Explanations about Options": {}
    },
    {
      "Command": "iotop",
      "MP Summary": "simple top-like I/O monitor",
      "Most Similar TLDR Task": "Start top-like I/O monitor",
      "Most Similar TLDR Script": "iotop",
      "Top-3 Similar Questions": [
        "ul_266728: Monitor hard disk activity"
      ],
      "Top-3 Scripts": [
        "ul_266728: sudo apt-get install iotop\n\nsudo iotop --only"
      ],
      "Explanations about Options": {
        "--only": "Only show processes or threads actually doing I/O, instead of showing all processes\n or threads. This can be dynamically toggled by pressing o."
      }
    },
    {
      "Command": "nginx",
      "MP Summary": "HTTP and reverse proxy server, mail proxy server",
      "Most Similar TLDR Task": "Reload the configuration by sending a signal with no downtime",
      "Most Similar TLDR Script": "nginx -s reload",
      "Top-3 Similar Questions": [
        "su_1147237: How to proxy and redirect incoming http requests"
      ],
      "Top-3 Scripts": [
        "su_1147237: "
      ],
      "Explanations about Options": {}
    }
  ]
}